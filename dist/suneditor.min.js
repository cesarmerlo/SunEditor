!function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s="XJR1")}({"1kvd":function(e,t,n){"use strict";var i,o;i="undefined"!=typeof window?window:this,o=function(e,t){const n={name:"dialog",add:function(e){const t=e.context;t.dialog={kind:"",updateModal:!1,_closeSignal:!1};let n=e.util.createElement("DIV");n.className="se-dialog sun-editor-common";let i=e.util.createElement("DIV");i.className="se-dialog-back",i.style.display="none";let o=e.util.createElement("DIV");o.className="se-dialog-inner",o.style.display="none",n.appendChild(i),n.appendChild(o),t.dialog.modalArea=n,t.dialog.back=i,t.dialog.modal=o,t.dialog.modal.addEventListener("mousedown",this._onMouseDown_dialog.bind(e)),t.dialog.modal.addEventListener("click",this._onClick_dialog.bind(e)),t.element.relative.appendChild(n),n=null,i=null,o=null},_onMouseDown_dialog:function(e){/se-dialog-inner/.test(e.target.className)?this.context.dialog._closeSignal=!0:this.context.dialog._closeSignal=!1},_onClick_dialog:function(e){(/close/.test(e.target.getAttribute("data-command"))||this.context.dialog._closeSignal)&&this.plugins.dialog.close.call(this)},open:function(e,t){if(this.modalForm)return!1;this.plugins.dialog._bindClose&&(this._d.removeEventListener("keydown",this.plugins.dialog._bindClose),this.plugins.dialog._bindClose=null),this.plugins.dialog._bindClose=function(e){/27/.test(e.keyCode)&&this.plugins.dialog.close.call(this)}.bind(this),this._d.addEventListener("keydown",this.plugins.dialog._bindClose),this.context.dialog.updateModal=t,"full"===this.options.popupDisplay?this.context.dialog.modalArea.style.position="fixed":this.context.dialog.modalArea.style.position="absolute",this.context.dialog.kind=e,this.modalForm=this.context[e].modal;const n=this.context[e].focusElement;"function"==typeof this.plugins[e].on&&this.plugins[e].on.call(this,t),this.context.dialog.modalArea.style.display="block",this.context.dialog.back.style.display="block",this.context.dialog.modal.style.display="block",this.modalForm.style.display="block",n&&n.focus()},_bindClose:null,close:function(){this.plugins.dialog._bindClose&&(this._d.removeEventListener("keydown",this.plugins.dialog._bindClose),this.plugins.dialog._bindClose=null);const e=this.context.dialog.kind;this.modalForm.style.display="none",this.context.dialog.back.style.display="none",this.context.dialog.modalArea.style.display="none",this.context.dialog.updateModal=!1,"function"==typeof this.plugins[e].init&&this.plugins[e].init.call(this),this.context.dialog.kind="",this.modalForm=null,this.focus()}};return void 0===t&&(e.SUNEDITOR_MODULES||Object.defineProperty(e,"SUNEDITOR_MODULES",{enumerable:!0,writable:!1,configurable:!1,value:{}}),Object.defineProperty(e.SUNEDITOR_MODULES,"dialog",{enumerable:!0,writable:!1,configurable:!1,value:n})),n},"object"==typeof e.exports?e.exports=i.document?o(i,!0):function(e){if(!e.document)throw new Error("SUNEDITOR_MODULES a window with a document");return o(e)}:o(i)},"3FqI":function(e,t,n){},JhlZ:function(e,t,n){"use strict";var i,o;i="undefined"!=typeof window?window:this,o=function(e,t){const n={name:"fileBrowser",_xmlHttp:null,_loading:null,add:function(e){const t=e.context;t.fileBrowser={_closeSignal:!1,area:null,header:null,tagArea:null,body:null,list:null,tagElements:null,items:[],selectedTags:[],selectorHandler:null,contextPlugin:"",columnSize:4};let n=e.util.createElement("DIV");n.className="se-file-browser sun-editor-common";let i=e.util.createElement("DIV");i.className="se-file-browser-back";let o=e.util.createElement("DIV");o.className="se-file-browser-inner",o.innerHTML=this.set_browser(e),n.appendChild(i),n.appendChild(o),this._loading=n.querySelector(".se-loading-box"),t.fileBrowser.area=n,t.fileBrowser.header=o.querySelector(".se-file-browser-header"),t.fileBrowser.titleArea=o.querySelector(".se-file-browser-title"),t.fileBrowser.tagArea=o.querySelector(".se-file-browser-tags"),t.fileBrowser.body=o.querySelector(".se-file-browser-body"),t.fileBrowser.list=o.querySelector(".se-file-browser-list"),t.fileBrowser.tagArea.addEventListener("click",this.onClickTag.bind(e)),t.fileBrowser.list.addEventListener("click",this.onClickFile.bind(e)),o.addEventListener("mousedown",this._onMouseDown_browser.bind(e)),o.addEventListener("click",this._onClick_browser.bind(e)),t.element.relative.appendChild(n),n=null,i=null,o=null},set_browser:function(e){const t=e.lang;return'<div class="se-file-browser-content"><div class="se-file-browser-header"><button type="button" data-command="close" class="se-btn se-file-browser-close" class="close" title="'+t.dialogBox.close+'" aria-label="'+t.dialogBox.close+'">'+e.icons.cancel+'</button><span class="se-file-browser-title"></span><div class="se-file-browser-tags"></div></div><div class="se-file-browser-body"><div class="se-loading-box sun-editor-common"><div class="se-loading-effect"></div></div><div class="se-file-browser-list"></div></div></div>'},_onMouseDown_browser:function(e){/se-file-browser-inner/.test(e.target.className)?this.context.fileBrowser._closeSignal=!0:this.context.fileBrowser._closeSignal=!1},_onClick_browser:function(e){e.stopPropagation(),(/close/.test(e.target.getAttribute("data-command"))||this.context.fileBrowser._closeSignal)&&this.plugins.fileBrowser.close.call(this)},open:function(e,t){this.plugins.fileBrowser._bindClose&&(this._d.removeEventListener("keydown",this.plugins.fileBrowser._bindClose),this.plugins.fileBrowser._bindClose=null),this.plugins.fileBrowser._bindClose=function(e){/27/.test(e.keyCode)&&this.plugins.fileBrowser.close.call(this)}.bind(this),this._d.addEventListener("keydown",this.plugins.fileBrowser._bindClose);const n=this.context.fileBrowser;n.contextPlugin=e,n.selectorHandler=t;const i=this.context[e],o=i.listClass;this.util.hasClass(n.list,o)||(n.list.className="se-file-browser-list "+o),"full"===this.options.popupDisplay?n.area.style.position="fixed":n.area.style.position="absolute",n.titleArea.textContent=i.title,n.area.style.display="block",this.plugins.fileBrowser._drawFileList.call(this,this.context[e].url,this.context[e].header)},_bindClose:null,close:function(){const e=this.plugins.fileBrowser;e._xmlHttp&&e._xmlHttp.abort(),e._bindClose&&(this._d.removeEventListener("keydown",e._bindClose),e._bindClose=null);const t=this.context.fileBrowser;t.area.style.display="none",t.selectorHandler=null,t.selectedTags=[],t.items=[],t.list.innerHTML=t.tagArea.innerHTML=t.titleArea.textContent="","function"==typeof this.plugins[t.contextPlugin].init&&this.plugins[t.contextPlugin].init.call(this),t.contextPlugin=""},showBrowserLoading:function(){this._loading.style.display="block"},closeBrowserLoading:function(){this._loading.style.display="none"},_drawFileList:function(e,t){const n=this.plugins.fileBrowser,i=n._xmlHttp=this.util.getXMLHttpRequest();if(i.onreadystatechange=n._callBackGet.bind(this,i),i.open("get",e,!0),null!==t&&"object"==typeof t&&this._w.Object.keys(t).length>0)for(let e in t)i.setRequestHeader(e,t[e]);i.send(null),this.plugins.fileBrowser.showBrowserLoading()},_callBackGet:function(e){if(4===e.readyState)if(this.plugins.fileBrowser._xmlHttp=null,200===e.status)try{const t=JSON.parse(e.responseText);t.result.length>0?this.plugins.fileBrowser._drawListItem.call(this,t.result,!0):t.nullMessage&&(this.context.fileBrowser.list.innerHTML=t.nullMessage)}catch(e){throw Error('[SUNEDITOR.fileBrowser.drawList.fail] cause : "'+e.message+'"')}finally{this.plugins.fileBrowser.closeBrowserLoading(),this.context.fileBrowser.body.style.maxHeight=this._w.innerHeight-this.context.fileBrowser.header.offsetHeight-50+"px"}else if(this.plugins.fileBrowser.closeBrowserLoading(),0!==e.status){const t=e.responseText?JSON.parse(e.responseText):e,n="[SUNEDITOR.fileBrowser.get.serverException] status: "+e.status+", response: "+(t.errorMessage||e.responseText);throw Error(n)}},_drawListItem:function(e,t){const n=this.context.fileBrowser,i=this.context[n.contextPlugin],o=[],l=e.length,s=i.columnSize||n.columnSize,r=s<=1?1:Math.round(l/s)||1,a=i.itemTemplateHandler;let c="",u='<div class="se-file-item-column">',d=1;for(let n,i,h=0;h<l;h++)if(n=e[h],i=n.tag?"string"==typeof n.tag?n.tag.split(","):n.tag:[],i=n.tag=i.map((function(e){return e.trim()})),u+=a(n),(h+1)%r==0&&d<s&&h+1<l&&(d++,u+='</div><div class="se-file-item-column">'),t&&i.length>0)for(let e,t=0,n=i.length;t<n;t++)e=i[t],e&&-1===o.indexOf(e)&&(o.push(e),c+='<a title="'+e+'" aria-label="'+e+'">'+e+"</a>");u+="</div>",n.list.innerHTML=u,t&&(n.items=e,n.tagArea.innerHTML=c,n.tagElements=n.tagArea.querySelectorAll("A"))},onClickTag:function(e){const t=e.target;if(!this.util.isAnchor(t))return;const n=t.textContent,i=this.plugins.fileBrowser,o=this.context.fileBrowser,l=o.tagArea.querySelector('a[title="'+n+'"]'),s=o.selectedTags,r=s.indexOf(n);r>-1?(s.splice(r,1),this.util.removeClass(l,"on")):(s.push(n),this.util.addClass(l,"on")),i._drawListItem.call(this,0===s.length?o.items:o.items.filter((function(e){return e.tag.some((function(e){return s.indexOf(e)>-1}))})),!1)},onClickFile:function(e){e.preventDefault(),e.stopPropagation();const t=this.context.fileBrowser,n=t.list;let i=e.target,o=null;if(i===n)return;for(;n!==i.parentNode&&(o=i.getAttribute("data-command"),!o);)i=i.parentNode;if(!o)return;const l=t.selectorHandler||this.context[t.contextPlugin].selectorHandler;this.plugins.fileBrowser.close.call(this),l(i)}};return void 0===t&&(e.SUNEDITOR_MODULES||Object.defineProperty(e,"SUNEDITOR_MODULES",{enumerable:!0,writable:!1,configurable:!1,value:{}}),Object.defineProperty(e.SUNEDITOR_MODULES,"fileBrowser",{enumerable:!0,writable:!1,configurable:!1,value:n})),n},"object"==typeof e.exports?e.exports=i.document?o(i,!0):function(e){if(!e.document)throw new Error("SUNEDITOR_MODULES a window with a document");return o(e)}:o(i)},P6u4:function(e,t,n){"use strict";var i,o;i="undefined"!=typeof window?window:this,o=function(e,t){const n={code:"en",toolbar:{default:"Default",save:"Save",font:"Font",formats:"Formats",fontSize:"Size",bold:"Bold",underline:"Underline",italic:"Italic",strike:"Strike",subscript:"Subscript",superscript:"Superscript",removeFormat:"Remove Format",fontColor:"Font Color",hiliteColor:"Highlight Color",indent:"Indent",outdent:"Outdent",align:"Align",alignLeft:"Align left",alignRight:"Align right",alignCenter:"Align center",alignJustify:"Align justify",list:"List",orderList:"Ordered list",unorderList:"Unordered list",horizontalRule:"Horizontal line",hr_solid:"Solid",hr_dotted:"Dotted",hr_dashed:"Dashed",table:"Table",link:"Link",math:"Math",image:"Image",video:"Video",audio:"Audio",fullScreen:"Full screen",showBlocks:"Show blocks",codeView:"Code view",undo:"Undo",redo:"Redo",preview:"Preview",print:"print",tag_p:"Paragraph",tag_div:"Normal (DIV)",tag_h:"Header",tag_blockquote:"Quote",tag_pre:"Code",template:"Template",lineHeight:"Line height",paragraphStyle:"Paragraph style",textStyle:"Text style",imageGallery:"Image gallery",dir_ltr:"Left to right",dir_rtl:"Right to left",mention:"Mention"},dialogBox:{linkBox:{title:"Insert Link",url:"URL to link",text:"Text to display",newWindowCheck:"Open in new window",downloadLinkCheck:"Download link",bookmark:"Bookmark"},mathBox:{title:"Math",inputLabel:"Mathematical Notation",fontSizeLabel:"Font Size",previewLabel:"Preview"},imageBox:{title:"Insert image",file:"Select from files",url:"Image URL",altText:"Alternative text"},videoBox:{title:"Insert Video",file:"Select from files",url:"Media embed URL, YouTube/Vimeo"},audioBox:{title:"Insert Audio",file:"Select from files",url:"Audio URL"},browser:{tags:"Tags",search:"Search"},caption:"Insert description",close:"Close",submitButton:"Submit",revertButton:"Revert",proportion:"Constrain proportions",basic:"Basic",left:"Left",right:"Right",center:"Center",width:"Width",height:"Height",size:"Size",ratio:"Ratio"},controller:{edit:"Edit",unlink:"Unlink",remove:"Remove",insertRowAbove:"Insert row above",insertRowBelow:"Insert row below",deleteRow:"Delete row",insertColumnBefore:"Insert column before",insertColumnAfter:"Insert column after",deleteColumn:"Delete column",fixedColumnWidth:"Fixed column width",resize100:"Resize 100%",resize75:"Resize 75%",resize50:"Resize 50%",resize25:"Resize 25%",autoSize:"Auto size",mirrorHorizontal:"Mirror, Horizontal",mirrorVertical:"Mirror, Vertical",rotateLeft:"Rotate left",rotateRight:"Rotate right",maxSize:"Max size",minSize:"Min size",tableHeader:"Table header",mergeCells:"Merge cells",splitCells:"Split Cells",HorizontalSplit:"Horizontal split",VerticalSplit:"Vertical split"},menu:{spaced:"Spaced",bordered:"Bordered",neon:"Neon",translucent:"Translucent",shadow:"Shadow",code:"Code"}};return void 0===t&&(e.SUNEDITOR_LANG||Object.defineProperty(e,"SUNEDITOR_LANG",{enumerable:!0,writable:!1,configurable:!1,value:{}}),Object.defineProperty(e.SUNEDITOR_LANG,"en",{enumerable:!0,writable:!0,configurable:!0,value:n})),n},"object"==typeof e.exports?e.exports=i.document?o(i,!0):function(e){if(!e.document)throw new Error("SUNEDITOR_LANG a window with a document");return o(e)}:o(i)},WUQj:function(e,t,n){},XJR1:function(e,t,n){"use strict";n.r(t);n("3FqI"),n("WUQj");var i={name:"colorPicker",add:function(e){const t=e.context;t.colorPicker={colorListHTML:"",_colorInput:"",_defaultColor:"#000",_styleProperty:"color",_currentColor:"",_colorList:[]},t.colorPicker.colorListHTML=this.createColorList(e,this._makeColorList)},createColorList:function(e,t){const n=e.options,i=e.lang,o=n.colorList&&0!==n.colorList.length?n.colorList:["#ff0000","#ff5e00","#ffe400","#abf200","#00d8ff","#0055ff","#6600ff","#ff00dd","#000000","#ffd8d8","#fae0d4","#faf4c0","#e4f7ba","#d4f4fa","#d9e5ff","#e8d9ff","#ffd9fa","#f1f1f1","#ffa7a7","#ffc19e","#faed7d","#cef279","#b2ebf4","#b2ccff","#d1b2ff","#ffb2f5","#bdbdbd","#f15f5f","#f29661","#e5d85c","#bce55c","#5cd1e5","#6699ff","#a366ff","#f261df","#8c8c8c","#980000","#993800","#998a00","#6b9900","#008299","#003399","#3d0099","#990085","#353535","#670000","#662500","#665c00","#476600","#005766","#002266","#290066","#660058","#222222"];let l=[],s='<div class="se-list-inner">';for(let e,n=0,i=o.length;n<i;n++)e=o[n],e&&("string"==typeof e&&(l.push(e),n<i-1)||(l.length>0&&(s+='<div class="se-selector-color">'+t(l)+"</div>",l=[]),"object"==typeof e&&(s+='<div class="se-selector-color">'+t(e)+"</div>")));return s+='<form class="se-form-group"><input type="text" maxlength="9" class="_se_color_picker_input se-color-input"/><button type="submit" class="se-btn-primary _se_color_picker_submit" title="'+i.dialogBox.submitButton+'" aria-label="'+i.dialogBox.submitButton+'">'+e.icons.checked+'</button><button type="button" class="se-btn _se_color_picker_remove" title="'+i.toolbar.removeFormat+'" aria-label="'+i.toolbar.removeFormat+'">'+e.icons.erase+"</button></form></div>",s},_makeColorList:function(e){let t="";t+='<ul class="se-color-pallet">';for(let n,i=0,o=e.length;i<o;i++)n=e[i],"string"==typeof n&&(t+='<li><button type="button" data-value="'+n+'" title="'+n+'" aria-label="'+n+'" style="background-color:'+n+';"></button></li>');return t+="</ul>",t},init:function(e,t){const n=this.plugins.colorPicker;let i=t||(n.getColorInNode.call(this,e)||this.context.colorPicker._defaultColor);i=n.isHexColor(i)?i:n.rgb2hex(i)||i;const o=this.context.colorPicker._colorList;if(o)for(let e=0,t=o.length;e<t;e++)i.toLowerCase()===o[e].getAttribute("data-value").toLowerCase()?this.util.addClass(o[e],"active"):this.util.removeClass(o[e],"active");n.setInputText.call(this,n.colorName2hex.call(this,i))},setCurrentColor:function(e){this.context.colorPicker._currentColor=e,this.context.colorPicker._colorInput.style.borderColor=e},setInputText:function(e){e=/^#/.test(e)?e:"#"+e,this.context.colorPicker._colorInput.value=e,this.plugins.colorPicker.setCurrentColor.call(this,e)},getColorInNode:function(e){let t="";const n=this.context.colorPicker._styleProperty;for(;e&&!this.util.isWysiwygDiv(e)&&0===t.length;)1===e.nodeType&&e.style[n]&&(t=e.style[n]),e=e.parentNode;return t},isHexColor:function(e){return/^#[0-9a-f]{3}(?:[0-9a-f]{3})?$/i.test(e)},rgb2hex:function(e){const t=e.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);return t&&4===t.length?"#"+("0"+parseInt(t[1],10).toString(16)).slice(-2)+("0"+parseInt(t[2],10).toString(16)).slice(-2)+("0"+parseInt(t[3],10).toString(16)).slice(-2):""},colorName2hex:function(e){if(/^#/.test(e))return e;var t=this.util.createElement("div");t.style.display="none",t.style.color=e;var n=this._w.getComputedStyle(this._d.body.appendChild(t)).color.match(/\d+/g).map((function(e){return parseInt(e,10)}));return this.util.removeItem(t),n.length>=3&&"#"+((1<<24)+(n[0]<<16)+(n[1]<<8)+n[2]).toString(16).substr(1)}},o={name:"fontColor",display:"submenu",add:function(e,t){e.addModule([i]);const n=e.context;n.fontColor={previewEl:null,colorInput:null,colorList:null};let o=this.setSubmenu(e);n.fontColor.colorInput=o.querySelector("._se_color_picker_input"),n.fontColor.colorInput.addEventListener("keyup",this.onChangeInput.bind(e)),o.querySelector("._se_color_picker_submit").addEventListener("click",this.submit.bind(e)),o.querySelector("._se_color_picker_remove").addEventListener("click",this.remove.bind(e)),o.addEventListener("click",this.pickup.bind(e)),n.fontColor.colorList=o.querySelectorAll("li button"),e.initMenuTarget(this.name,t,o),o=null},setSubmenu:function(e){const t=e.context.colorPicker.colorListHTML,n=e.util.createElement("DIV");return n.className="se-submenu se-list-layer",n.innerHTML=t,n},on:function(){const e=this.context.colorPicker,t=this.context.fontColor;e._colorInput=t.colorInput;const n=this.wwComputedStyle.color;e._defaultColor=n?this.plugins.colorPicker.isHexColor(n)?n:this.plugins.colorPicker.rgb2hex(n):"#333333",e._styleProperty="color",e._colorList=t.colorList,this.plugins.colorPicker.init.call(this,this.getSelectionNode(),null)},onChangeInput:function(e){this.plugins.colorPicker.setCurrentColor.call(this,e.target.value)},submit:function(){this.plugins.fontColor.applyColor.call(this,this.context.colorPicker._currentColor)},pickup:function(e){e.preventDefault(),e.stopPropagation(),this.plugins.fontColor.applyColor.call(this,e.target.getAttribute("data-value"))},remove:function(){this.nodeChange(null,["color"],["span"],!0),this.submenuOff()},applyColor:function(e){if(!e)return;const t=this.util.createElement("SPAN");t.style.color=e,this.nodeChange(t,["color"],null,null),this.submenuOff()}},l={name:"hiliteColor",display:"submenu",add:function(e,t){e.addModule([i]);const n=e.context;n.hiliteColor={previewEl:null,colorInput:null,colorList:null};let o=this.setSubmenu(e);n.hiliteColor.colorInput=o.querySelector("._se_color_picker_input"),n.hiliteColor.colorInput.addEventListener("keyup",this.onChangeInput.bind(e)),o.querySelector("._se_color_picker_submit").addEventListener("click",this.submit.bind(e)),o.querySelector("._se_color_picker_remove").addEventListener("click",this.remove.bind(e)),o.addEventListener("click",this.pickup.bind(e)),n.hiliteColor.colorList=o.querySelectorAll("li button"),e.initMenuTarget(this.name,t,o),o=null},setSubmenu:function(e){const t=e.context.colorPicker.colorListHTML,n=e.util.createElement("DIV");return n.className="se-submenu se-list-layer",n.innerHTML=t,n},on:function(){const e=this.context.colorPicker,t=this.context.hiliteColor;e._colorInput=t.colorInput;const n=this.wwComputedStyle.backgroundColor;e._defaultColor=n?this.plugins.colorPicker.isHexColor(n)?n:this.plugins.colorPicker.rgb2hex(n):"#ffffff",e._styleProperty="backgroundColor",e._colorList=t.colorList,this.plugins.colorPicker.init.call(this,this.getSelectionNode(),null)},onChangeInput:function(e){this.plugins.colorPicker.setCurrentColor.call(this,e.target.value)},submit:function(){this.plugins.hiliteColor.applyColor.call(this,this.context.colorPicker._currentColor)},pickup:function(e){e.preventDefault(),e.stopPropagation(),this.plugins.hiliteColor.applyColor.call(this,e.target.getAttribute("data-value"))},remove:function(){this.nodeChange(null,["background-color"],["span"],!0),this.submenuOff()},applyColor:function(e){if(!e)return;const t=this.util.createElement("SPAN");t.style.backgroundColor=e,this.nodeChange(t,["background-color"],null,null),this.submenuOff()}},s={name:"template",display:"submenu",add:function(e,t){e.context.template={selectedIndex:-1};let n=this.setSubmenu(e);n.querySelector("ul").addEventListener("click",this.pickup.bind(e)),e.initMenuTarget(this.name,t,n),n=null},setSubmenu:function(e){const t=e.options.templates;if(!t||0===t.length)throw Error('[SUNEDITOR.plugins.template.fail] To use the "template" plugin, please define the "templates" option.');const n=e.util.createElement("DIV");n.className="se-list-layer";let i='<div class="se-submenu se-list-inner"><ul class="se-list-basic">';for(let e,n=0,o=t.length;n<o;n++)e=t[n],i+='<li><button type="button" class="se-btn-list" data-value="'+n+'" title="'+e.name+'" aria-label="'+e.name+'">'+e.name+"</button></li>";return i+="</ul></div>",n.innerHTML=i,n},pickup:function(e){if(!/^BUTTON$/i.test(e.target.tagName))return!1;e.preventDefault(),e.stopPropagation(),this.context.template.selectedIndex=1*e.target.getAttribute("data-value");const t=this.options.templates[this.context.template.selectedIndex];if(!t.html)throw this.submenuOff(),Error('[SUNEDITOR.template.fail] cause : "templates[i].html not found"');this.setContents(t.html),this.submenuOff()}},r=n("1kvd"),a=n.n(r),c={name:"selectMenu",add:function(e){e.context.selectMenu={caller:{},callerContext:null}},setForm:function(){return'<div class="se-select-list"></div>'},createList:function(e,t,n){e.form.innerHTML="<ul>"+n+"</ul>",e.items=t,e.menus=e.form.querySelectorAll("li")},initEvent:function(e,t){const n=t.querySelector(".se-select-list"),i=this.context.selectMenu.caller[e]={form:n,items:[],menus:[],index:-1,item:null,clickMethod:null,callerName:e};n.addEventListener("mousedown",this.plugins.selectMenu.onMousedown_list),n.addEventListener("mousemove",this.plugins.selectMenu.onMouseMove_list.bind(this,i)),n.addEventListener("click",this.plugins.selectMenu.onClick_list.bind(this,i))},onMousedown_list:function(e){e.preventDefault(),e.stopPropagation()},onMouseMove_list:function(e,t){this.util.addClass(e.form,"__se_select-menu-mouse-move");const n=t.target.getAttribute("data-index");n&&(e.index=1*n)},onClick_list:function(e,t){const n=t.target.getAttribute("data-index");n&&e.clickMethod.call(this,e.items[n])},moveItem:function(e,t){this.util.removeClass(e.form,"__se_select-menu-mouse-move"),t=e.index+t;const n=e.menus,i=n.length,o=e.index=t>=i?0:t<0?i-1:t;for(let e=0;e<i;e++)e===o?this.util.addClass(n[e],"active"):this.util.removeClass(n[e],"active");e.item=e.items[o]},getItem:function(e,t){return t=!t||t<0?e.index:t,e.items[t]},on:function(e,t){const n=this.context.selectMenu.caller[e];this.context.selectMenu.callerContext=n,n.clickMethod=t,n.callerName=e},open:function(e,t){const n=e.form;n.style.visibility="hidden",n.style.display="block",t(n),n.style.visibility=""},close:function(e){e.form.style.display="none",e.items=[],e.menus=[],e.index=-1,e.item=null},init:function(e){e&&(e.items=[],e.menus=[],e.index=-1,e.item=null,e.callerName="",this.context.selectMenu.callerContext=null)}},u={name:"anchor",add:function(e){e.addModule([c]),e.context.anchor={caller:{},forms:this.setDialogForm(e),host:(e._w.location.origin+e._w.location.pathname).replace(/\/$/,""),callerContext:null}},setDialogForm:function(e){const t=e.lang,n=e.options.linkRel,i=(e.options.linkRelDefault.default||"").split(" "),o=e.icons,l=e.util.createElement("DIV");let s='<div class="se-dialog-body"><div class="se-dialog-form"><label>'+t.dialogBox.linkBox.url+'</label><div class="se-dialog-form-files"><input class="se-input-form se-input-url" type="text" placeholder="'+(e.options.protocol||"")+'" /><button type="button" class="se-btn se-dialog-files-edge-button _se_bookmark_button" title="'+t.dialogBox.linkBox.bookmark+'" aria-label="'+t.dialogBox.linkBox.bookmark+'">'+o.bookmark+"</button>"+e.plugins.selectMenu.setForm()+'</div><div class="se-anchor-preview-form"><span class="se-svg se-anchor-preview-icon _se_anchor_bookmark_icon">'+o.bookmark+'</span><span class="se-svg se-anchor-preview-icon _se_anchor_download_icon">'+o.download+'</span><pre class="se-link-preview"></pre></div></div><div class="se-dialog-form"><label>'+t.dialogBox.linkBox.text+'</label><input class="se-input-form _se_anchor_text" type="text" /></div><div class="se-dialog-form-footer"><label><input type="checkbox" class="se-dialog-btn-check _se_anchor_check" />&nbsp;'+t.dialogBox.linkBox.newWindowCheck+'</label><label><input type="checkbox" class="se-dialog-btn-check _se_anchor_download" />&nbsp;'+t.dialogBox.linkBox.downloadLinkCheck+"</label>";if(n.length>0){s+='<div class="se-anchor-rel"><button type="button" class="se-btn se-btn-select se-anchor-rel-btn">&lt;rel&gt;</button><div class="se-anchor-rel-wrapper"><pre class="se-link-preview se-anchor-rel-preview"></pre></div><div class="se-list-layer"><div class="se-list-inner"><ul class="se-list-basic se-list-checked">';for(let e,t=0,l=n.length;t<l;t++)e=n[t],s+='<li><button type="button" class="se-btn-list'+(i.indexOf(e)>-1?" se-checked":"")+'" data-command="'+e+'" title="'+e+'" aria-label="'+e+'"><span class="se-svg">'+o.checked+"</span>"+e+"</button></li>";s+="</ul></div></div></div>"}return s+="</div></div>",l.innerHTML=s,l},initEvent:function(e,t){const n=this.plugins.anchor,i=this.context.anchor.caller[e]={modal:t,urlInput:null,linkDefaultRel:this.options.linkRelDefault,defaultRel:this.options.linkRelDefault.default||"",currentRel:[],linkAnchor:null,linkValue:"",_change:!1,callerName:e};"string"==typeof i.linkDefaultRel.default&&(i.linkDefaultRel.default=i.linkDefaultRel.default.trim()),"string"==typeof i.linkDefaultRel.check_new_window&&(i.linkDefaultRel.check_new_window=i.linkDefaultRel.check_new_window.trim()),"string"==typeof i.linkDefaultRel.check_bookmark&&(i.linkDefaultRel.check_bookmark=i.linkDefaultRel.check_bookmark.trim()),i.urlInput=t.querySelector(".se-input-url"),i.anchorText=t.querySelector("._se_anchor_text"),i.newWindowCheck=t.querySelector("._se_anchor_check"),i.downloadCheck=t.querySelector("._se_anchor_download"),i.download=t.querySelector("._se_anchor_download_icon"),i.preview=t.querySelector(".se-link-preview"),i.bookmark=t.querySelector("._se_anchor_bookmark_icon"),i.bookmarkButton=t.querySelector("._se_bookmark_button"),this.plugins.selectMenu.initEvent.call(this,e,t);const o=this.context.selectMenu.caller[e];this.options.linkRel.length>0&&(i.relButton=t.querySelector(".se-anchor-rel-btn"),i.relList=t.querySelector(".se-list-layer"),i.relPreview=t.querySelector(".se-anchor-rel-preview"),i.relButton.addEventListener("click",n.onClick_relButton.bind(this,i)),i.relList.addEventListener("click",n.onClick_relList.bind(this,i))),i.newWindowCheck.addEventListener("change",n.onChange_newWindowCheck.bind(this,i)),i.downloadCheck.addEventListener("change",n.onChange_downloadCheck.bind(this,i)),i.anchorText.addEventListener("input",n.onChangeAnchorText.bind(this,i)),i.urlInput.addEventListener("input",n.onChangeUrlInput.bind(this,i)),i.urlInput.addEventListener("keydown",n.onKeyDownUrlInput.bind(this,o)),i.urlInput.addEventListener("focus",n.onFocusUrlInput.bind(this,i,o)),i.urlInput.addEventListener("blur",n.onBlurUrlInput.bind(this,o)),i.bookmarkButton.addEventListener("click",n.onClick_bookmarkButton.bind(this,i))},on:function(e,t){const n=this.plugins.anchor;if(t){if(e.linkAnchor){this.context.dialog.updateModal=!0;const t=e.linkAnchor.getAttribute("href");e.linkValue=e.preview.textContent=e.urlInput.value=n.selfPathBookmark.call(this,t)?t.substr(t.lastIndexOf("#")):t,e.anchorText.value=e.linkAnchor.textContent||e.linkAnchor.getAttribute("alt"),e.newWindowCheck.checked=!!/_blank/i.test(e.linkAnchor.target),e.downloadCheck.checked=e.linkAnchor.download}}else n.init.call(this,e),e.anchorText.value=this.getSelection().toString().trim(),e.newWindowCheck.checked=this.options.linkTargetNewWindow;this.context.anchor.callerContext=e,n.setRel.call(this,e,t&&e.linkAnchor?e.linkAnchor.rel:e.defaultRel),n.setLinkPreview.call(this,e,e.linkValue),this.plugins.selectMenu.on.call(this,e.callerName,this.plugins.anchor.setHeaderBookmark)},selfPathBookmark:function(e){const t=this._w.location.href.replace(/\/$/,"");return 0===e.indexOf("#")||0===e.indexOf(t)&&e.indexOf("#")===(-1===t.indexOf("#")?t.length:t.substr(0,t.indexOf("#")).length)},_closeRelMenu:null,toggleRelList:function(e,t){if(t){const t=e.relButton,n=e.relList;this.util.addClass(t,"active"),n.style.visibility="hidden",n.style.display="block",this.options.rtl?n.style.left=t.offsetLeft-n.offsetWidth-1+"px":n.style.left=t.offsetLeft+t.offsetWidth+1+"px",n.style.top=t.offsetTop+t.offsetHeight/2-n.offsetHeight/2+"px",n.style.visibility="",this.plugins.anchor._closeRelMenu=function(e,t,n){n&&(e.relButton.contains(n.target)||e.relList.contains(n.target))||(this.util.removeClass(t,"active"),e.relList.style.display="none",this.modalForm.removeEventListener("click",this.plugins.anchor._closeRelMenu),this.plugins.anchor._closeRelMenu=null)}.bind(this,e,t),this.modalForm.addEventListener("click",this.plugins.anchor._closeRelMenu)}else this.plugins.anchor._closeRelMenu&&this.plugins.anchor._closeRelMenu()},onClick_relButton:function(e,t){this.plugins.anchor.toggleRelList.call(this,e,!this.util.hasClass(t.target,"active"))},onClick_relList:function(e,t){const n=t.target,i=n.getAttribute("data-command");if(!i)return;const o=e.currentRel,l=this.util.toggleClass(n,"se-checked"),s=o.indexOf(i);l?-1===s&&o.push(i):s>-1&&o.splice(s,1),e.relPreview.title=e.relPreview.textContent=o.join(" ")},setRel:function(e,t){const n=e.relList,i=e.currentRel=t?t.split(" "):[];if(!n)return;const o=n.querySelectorAll("button");for(let e,t=0,n=o.length;t<n;t++)e=o[t].getAttribute("data-command"),i.indexOf(e)>-1?this.util.addClass(o[t],"se-checked"):this.util.removeClass(o[t],"se-checked");e.relPreview.title=e.relPreview.textContent=i.join(" ")},createHeaderList:function(e,t,n){const i=this.util.getListChildren(this.context.element.wysiwyg,(function(e){return/h[1-6]/i.test(e.nodeName)}));if(0===i.length)return;const o=new this._w.RegExp("^"+n.replace(/^#/,""),"i"),l=[];let s="";for(let e,t=0,n=i.length;t<n;t++)e=i[t],o.test(e.textContent)&&(l.push(e),s+='<li class="se-select-item" data-index="'+t+'">'+e.textContent+"</li>");0===l.length?this.plugins.selectMenu.close.call(this,t):(this.plugins.selectMenu.createList(t,l,s),this.plugins.selectMenu.open.call(this,t,this.plugins.anchor._setMenuListPosition.bind(this,e)))},_setMenuListPosition:function(e,t){t.style.top=e.urlInput.offsetHeight+1+"px"},onKeyDownUrlInput:function(e,t){switch(t.keyCode){case 38:t.preventDefault(),t.stopPropagation(),this.plugins.selectMenu.moveItem.call(this,e,-1);break;case 40:t.preventDefault(),t.stopPropagation(),this.plugins.selectMenu.moveItem.call(this,e,1);break;case 13:e.index>-1&&(t.preventDefault(),t.stopPropagation(),this.plugins.anchor.setHeaderBookmark.call(this,this.plugins.selectMenu.getItem(e,null)))}},setHeaderBookmark:function(e){const t=this.context.anchor.callerContext,n=e.id||"h_"+this._w.Math.random().toString().replace(/.+\./,"");e.id=n,t.urlInput.value="#"+n,t.anchorText.value.trim()&&t._change||(t.anchorText.value=e.textContent),this.plugins.anchor.setLinkPreview.call(this,t,t.urlInput.value),this.plugins.selectMenu.close.call(this,this.context.selectMenu.callerContext),this.context.anchor.callerContext.urlInput.focus()},onChangeAnchorText:function(e,t){e._change=!!t.target.value.trim()},onChangeUrlInput:function(e,t){const n=t.target.value.trim();this.plugins.anchor.setLinkPreview.call(this,e,n),this.plugins.anchor.selfPathBookmark.call(this,n)?this.plugins.anchor.createHeaderList.call(this,e,this.context.selectMenu.callerContext,n):this.plugins.selectMenu.close.call(this,this.context.selectMenu.callerContext)},onFocusUrlInput:function(e,t){const n=e.urlInput.value;this.plugins.anchor.selfPathBookmark.call(this,n)&&this.plugins.anchor.createHeaderList.call(this,e,t,n)},onBlurUrlInput:function(e){this.plugins.selectMenu.close.call(this,e)},setLinkPreview:function(e,t){const n=e.preview,i=this.options.linkProtocol,o=this.options.linkNoPrefix,l=/^(mailto\:|tel\:|sms\:|https*\:\/\/|#)/.test(t),s=!!i&&this._w.RegExp("^"+t.substr(0,i.length)).test(i);t=e.linkValue=n.textContent=t?o?t:!i||l||s?l?t:/^www\./.test(t)?"http://"+t:this.context.anchor.host+(/^\//.test(t)?"":"/")+t:i+t:"",this.plugins.anchor.selfPathBookmark.call(this,t)?(e.bookmark.style.display="block",this.util.addClass(e.bookmarkButton,"active")):(e.bookmark.style.display="none",this.util.removeClass(e.bookmarkButton,"active")),!this.plugins.anchor.selfPathBookmark.call(this,t)&&e.downloadCheck.checked?e.download.style.display="block":e.download.style.display="none"},setCtx:function(e,t){e&&(t.linkAnchor=e,t.linkValue=e.href,t.currentRel=e.rel.split(" "))},updateAnchor:function(e,t,n,i,o){!this.plugins.anchor.selfPathBookmark.call(this,t)&&i.downloadCheck.checked?e.setAttribute("download",n||t):e.removeAttribute("download"),i.newWindowCheck.checked?e.target="_blank":e.removeAttribute("target");const l=i.currentRel.join(" ");l?e.rel=l:e.removeAttribute("rel"),e.href=t,e.setAttribute("alt",n),o?0===e.children.length&&(e.textContent=""):e.textContent=n},createAnchor:function(e,t){if(0===e.linkValue.length)return null;const n=e.linkValue,i=e.anchorText,o=0===i.value.length?n:i.value,l=e.linkAnchor||this.util.createElement("A");return this.plugins.anchor.updateAnchor.call(this,l,n,o,e,t),e.linkValue=e.preview.textContent=e.urlInput.value=e.anchorText.value="",l},onClick_bookmarkButton:function(e){let t=e.urlInput.value;this.plugins.anchor.selfPathBookmark.call(this,t)?(t=t.substr(1),e.bookmark.style.display="none",this.util.removeClass(e.bookmarkButton,"active"),this.plugins.selectMenu.close.call(this,this.context.selectMenu.callerContext)):(t="#"+t,e.bookmark.style.display="block",this.util.addClass(e.bookmarkButton,"active"),e.downloadCheck.checked=!1,e.download.style.display="none",this.plugins.anchor.createHeaderList.call(this,e,this.context.selectMenu.callerContext,t)),e.urlInput.value=t,this.plugins.anchor.setLinkPreview.call(this,e,t),e.urlInput.focus()},onChange_newWindowCheck:function(e,t){"string"==typeof e.linkDefaultRel.check_new_window&&(t.target.checked?this.plugins.anchor.setRel.call(this,e,this.plugins.anchor._relMerge.call(this,e,e.linkDefaultRel.check_new_window)):this.plugins.anchor.setRel.call(this,e,this.plugins.anchor._relDelete.call(this,e,e.linkDefaultRel.check_new_window)))},onChange_downloadCheck:function(e,t){t.target.checked?(e.download.style.display="block",e.bookmark.style.display="none",this.util.removeClass(e.bookmarkButton,"active"),e.linkValue=e.preview.textContent=e.urlInput.value=e.urlInput.value.replace(/^\#+/,""),"string"==typeof e.linkDefaultRel.check_bookmark&&this.plugins.anchor.setRel.call(this,e,this.plugins.anchor._relMerge.call(this,e,e.linkDefaultRel.check_bookmark))):(e.download.style.display="none","string"==typeof e.linkDefaultRel.check_bookmark&&this.plugins.anchor.setRel.call(this,e,this.plugins.anchor._relDelete.call(this,e,e.linkDefaultRel.check_bookmark)))},_relMerge:function(e,t){const n=e.currentRel;if(!t)return n.join(" ");if(/^only\:/.test(t))return t=t.replace(/^only\:/,"").trim(),e.currentRel=t.split(" "),t;const i=t.split(" ");for(let e,t=0,o=i.length;t<o;t++)e=n.indexOf(i[t]),-1===e&&n.push(i[t]);return n.join(" ")},_relDelete:function(e,t){if(!t)return e.currentRel.join(" ");/^only\:/.test(t)&&(t=t.replace(/^only\:/,"").trim());const n=e.currentRel.join(" ").replace(this._w.RegExp(t+"\\s*"),"");return e.currentRel=n.split(" "),n},init:function(e){e.linkAnchor=null,e.linkValue=e.preview.textContent=e.urlInput.value="",e.anchorText.value="",e.newWindowCheck.checked=!1,e.downloadCheck.checked=!1,e._change=!1,this.plugins.anchor.setRel.call(this,e,e.defaultRel),e.relList&&this.plugins.anchor.toggleRelList.call(this,e,!1),this.context.anchor.callerContext=null,this.plugins.selectMenu.init.call(this,this.context.selectMenu.callerContext)}},d={name:"link",display:"dialog",add:function(e){e.addModule([a.a,u]);const t=e.context,n=t.link={focusElement:null,_linkAnchor:null,anchorCtx:null};let i=this.setDialog(e);n.modal=i;let o=this.setController_LinkButton(e);n.linkController=o,i.querySelector("form").addEventListener("submit",this.submit.bind(e)),o.addEventListener("click",this.onClick_linkController.bind(e)),t.dialog.modal.appendChild(i),t.element.relative.appendChild(o),e.plugins.anchor.initEvent.call(e,"link",i),n.focusElement=t.anchor.caller.link.urlInput,i=null,o=null},setDialog:function(e){const t=e.lang,n=e.util.createElement("DIV"),i=e.icons;n.className="se-dialog-content",n.style.display="none";let o='<form><div class="se-dialog-header"><button type="button" data-command="close" class="se-btn se-dialog-close" title="'+t.dialogBox.close+'" aria-label="'+t.dialogBox.close+'">'+i.cancel+'</button><span class="se-modal-title">'+t.dialogBox.linkBox.title+"</span></div>"+e.context.anchor.forms.innerHTML+'<div class="se-dialog-footer"><button type="submit" class="se-btn-primary" title="'+t.dialogBox.submitButton+'" aria-label="'+t.dialogBox.submitButton+'"><span>'+t.dialogBox.submitButton+"</span></button></div></form>";return n.innerHTML=o,n},setController_LinkButton:function(e){const t=e.lang,n=e.icons,i=e.util.createElement("DIV");return i.className="se-controller se-controller-link",i.innerHTML='<div class="se-arrow se-arrow-up"></div><div class="link-content"><span><a target="_blank" href=""></a>&nbsp;</span><div class="se-btn-group"><button type="button" data-command="update" tabindex="-1" class="se-btn se-tooltip">'+n.edit+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.edit+'</span></span></button><button type="button" data-command="unlink" tabindex="-1" class="se-btn se-tooltip">'+n.unlink+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.unlink+'</span></span></button><button type="button" data-command="delete" tabindex="-1" class="se-btn se-tooltip">'+n.delete+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.remove+"</span></span></button></div></div>",i},open:function(){this.plugins.dialog.open.call(this,"link","link"===this.currentControllerName)},submit:function(e){this.showLoading(),e.preventDefault(),e.stopPropagation();try{const e=this.plugins.anchor.createAnchor.call(this,this.context.anchor.caller.link,!1);if(null===e)return;if(this.context.dialog.updateModal){const e=this.context.link._linkAnchor.childNodes[0];this.setRange(e,0,e,e.textContent.length)}else{const t=this.getSelectedElements();if(t.length>1){const n=this.util.createElement(t[0].nodeName);if(n.appendChild(e),!this.insertNode(n,null,!0))return}else if(!this.insertNode(e,null,!0))return;this.setRange(e.childNodes[0],0,e.childNodes[0],e.textContent.length)}}finally{this.plugins.dialog.close.call(this),this.closeLoading(),this.history.push(!1)}return!1},active:function(e){if(e){if(this.util.isAnchor(e)&&null===e.getAttribute("data-image-link"))return this.controllerArray.indexOf(this.context.link.linkController)<0&&this.plugins.link.call_controller.call(this,e),!0}else this.controllerArray.indexOf(this.context.link.linkController)>-1&&this.controllersOff();return!1},on:function(e){this.plugins.anchor.on.call(this,this.context.anchor.caller.link,e)},call_controller:function(e){this.editLink=this.context.link._linkAnchor=this.context.anchor.caller.link.linkAnchor=e;const t=this.context.link.linkController,n=t.querySelector("a");n.href=e.href,n.title=e.textContent,n.textContent=e.textContent,this.util.addClass(e,"on"),this.setControllerPosition(t,e,"bottom",{left:0,top:0}),this.controllersOn(t,e,"link",this.util.removeClass.bind(this.util,this.context.link._linkAnchor,"on"))},onClick_linkController:function(e){e.stopPropagation();const t=e.target.getAttribute("data-command")||e.target.parentNode.getAttribute("data-command");if(t){if(e.preventDefault(),/update/.test(t))this.plugins.dialog.open.call(this,"link",!0);else if(/unlink/.test(t)){const e=this.util.getChildElement(this.context.link._linkAnchor,(function(e){return 0===e.childNodes.length||3===e.nodeType}),!1),t=this.util.getChildElement(this.context.link._linkAnchor,(function(e){return 0===e.childNodes.length||3===e.nodeType}),!0);this.setRange(e,0,t,t.textContent.length),this.nodeChange(null,null,["A"],!1)}else this.util.removeItem(this.context.link._linkAnchor),this.context.anchor.caller.link.linkAnchor=null,this.focus(),this.history.push(!1);this.controllersOff()}},init:function(){this.context.link.linkController.style.display="none",this.plugins.anchor.init.call(this,this.context.anchor.caller.link)}},h=n("ZED3"),p=n.n(h),f=n("ee5k"),g=n.n(f),m=n("gjS+"),v=n.n(m),y={name:"image",display:"dialog",add:function(e){e.addModule([a.a,u,p.a,g.a,v.a]);const t=e.options,n=e.context,i=n.image={_infoList:[],_infoIndex:0,_uploadFileLength:0,focusElement:null,sizeUnit:t._imageSizeUnit,_linkElement:"",_altText:"",_align:"none",_floatClassRegExp:"__se__float\\-[a-z]+",_v_src:{_linkValue:""},svgDefaultSize:"30%",base64RenderIndex:0,_element:null,_cover:null,_container:null,inputX:null,inputY:null,_element_w:1,_element_h:1,_element_l:0,_element_t:0,_defaultSizeX:"auto",_defaultSizeY:"auto",_origin_w:"auto"===t.imageWidth?"":t.imageWidth,_origin_h:"auto"===t.imageHeight?"":t.imageHeight,_proportionChecked:!0,_resizing:t.imageResizing,_resizeDotHide:!t.imageHeightShow,_rotation:t.imageRotation,_alignHide:!t.imageAlignShow,_onlyPercentage:t.imageSizeOnlyPercentage,_ratio:!1,_ratioX:1,_ratioY:1,_captionShow:!0,_captionChecked:!1,_caption:null,captionCheckEl:null};let o=this.setDialog(e);i.modal=o,i.imgInputFile=o.querySelector("._se_image_file"),i.imgUrlFile=o.querySelector("._se_image_url"),i.focusElement=i.imgInputFile||i.imgUrlFile,i.altText=o.querySelector("._se_image_alt"),i.captionCheckEl=o.querySelector("._se_image_check_caption"),i.previewSrc=o.querySelector("._se_tab_content_image .se-link-preview"),o.querySelector(".se-dialog-tabs").addEventListener("click",this.openTab.bind(e)),o.querySelector("form").addEventListener("submit",this.submit.bind(e)),i.imgInputFile&&o.querySelector(".se-file-remove").addEventListener("click",this._removeSelectedFiles.bind(i.imgInputFile,i.imgUrlFile,i.previewSrc)),i.imgUrlFile&&i.imgUrlFile.addEventListener("input",this._onLinkPreview.bind(i.previewSrc,i._v_src,t.linkProtocol)),i.imgInputFile&&i.imgUrlFile&&i.imgInputFile.addEventListener("change",this._fileInputChange.bind(i));const l=o.querySelector(".__se__gallery");l&&l.addEventListener("click",this._openGallery.bind(e)),i.proportion={},i.inputX={},i.inputY={},t.imageResizing&&(i.proportion=o.querySelector("._se_image_check_proportion"),i.inputX=o.querySelector("._se_image_size_x"),i.inputY=o.querySelector("._se_image_size_y"),i.inputX.value=t.imageWidth,i.inputY.value=t.imageHeight,i.inputX.addEventListener("keyup",this.setInputSize.bind(e,"x")),i.inputY.addEventListener("keyup",this.setInputSize.bind(e,"y")),i.inputX.addEventListener("change",this.setRatio.bind(e)),i.inputY.addEventListener("change",this.setRatio.bind(e)),i.proportion.addEventListener("change",this.setRatio.bind(e)),o.querySelector(".se-dialog-btn-revert").addEventListener("click",this.sizeRevert.bind(e))),n.dialog.modal.appendChild(o),e.plugins.anchor.initEvent.call(e,"image",o.querySelector("._se_tab_content_url")),i.anchorCtx=e.context.anchor.caller.image,o=null},setDialog:function(e){const t=e.options,n=e.lang,i=e.util.createElement("DIV");i.className="se-dialog-content se-dialog-image",i.style.display="none";let o='<div class="se-dialog-header"><button type="button" data-command="close" class="se-btn se-dialog-close" class="close" title="'+n.dialogBox.close+'" aria-label="'+n.dialogBox.close+'">'+e.icons.cancel+'</button><span class="se-modal-title">'+n.dialogBox.imageBox.title+'</span></div><div class="se-dialog-tabs"><button type="button" class="_se_tab_link active" data-tab-link="image">'+n.toolbar.image+'</button><button type="button" class="_se_tab_link" data-tab-link="url">'+n.toolbar.link+'</button></div><form method="post" enctype="multipart/form-data"><div class="_se_tab_content _se_tab_content_image"><div class="se-dialog-body"><div style="border-bottom: 1px dashed #ccc;">';if(t.imageFileInput&&(o+='<div class="se-dialog-form"><label>'+n.dialogBox.imageBox.file+'</label><div class="se-dialog-form-files"><input class="se-input-form _se_image_file" type="file" accept="'+t.imageAccept+'"'+(t.imageMultipleFile?' multiple="multiple"':"")+'/><button type="button" class="se-btn se-dialog-files-edge-button se-file-remove" title="'+n.controller.remove+'" aria-label="'+n.controller.remove+'">'+e.icons.cancel+"</button></div></div>"),t.imageUrlInput&&(o+='<div class="se-dialog-form"><label>'+n.dialogBox.imageBox.url+'</label><div class="se-dialog-form-files"><input class="se-input-form se-input-url _se_image_url" type="text" />'+(t.imageGalleryUrl&&e.plugins.imageGallery?'<button type="button" class="se-btn se-dialog-files-edge-button __se__gallery" title="'+n.toolbar.imageGallery+'" aria-label="'+n.toolbar.imageGallery+'">'+e.icons.image_gallery+"</button>":"")+'</div><pre class="se-link-preview"></pre></div>'),o+='</div><div class="se-dialog-form"><label>'+n.dialogBox.imageBox.altText+'</label><input class="se-input-form _se_image_alt" type="text" /></div>',t.imageResizing){const i=t.imageSizeOnlyPercentage,l=i?' style="display: none !important;"':"",s=t.imageHeightShow?"":' style="display: none !important;"';o+='<div class="se-dialog-form">',i||!t.imageHeightShow?o+='<div class="se-dialog-size-text"><label class="size-w">'+n.dialogBox.size+"</label></div>":o+='<div class="se-dialog-size-text"><label class="size-w">'+n.dialogBox.width+'</label><label class="se-dialog-size-x">&nbsp;</label><label class="size-h">'+n.dialogBox.height+"</label></div>",o+='<input class="se-input-control _se_image_size_x" placeholder="auto"'+(i?' type="number" min="1"':'type="text"')+(i?' max="100"':"")+' /><label class="se-dialog-size-x"'+s+">"+(i?"%":"x")+'</label><input type="text" class="se-input-control _se_image_size_y" placeholder="auto"'+l+(i?' max="100"':"")+s+"/><label"+l+s+'><input type="checkbox" class="se-dialog-btn-check _se_image_check_proportion" checked/>&nbsp;'+n.dialogBox.proportion+'</label><button type="button" title="'+n.dialogBox.revertButton+'" aria-label="'+n.dialogBox.revertButton+'" class="se-btn se-dialog-btn-revert" style="float: right;">'+e.icons.revert+"</button></div>"}return o+='<div class="se-dialog-form se-dialog-form-footer"><label><input type="checkbox" class="se-dialog-btn-check _se_image_check_caption" />&nbsp;'+n.dialogBox.caption+'</label></div></div></div><div class="_se_tab_content _se_tab_content_url" style="display: none">'+e.context.anchor.forms.innerHTML+'</div><div class="se-dialog-footer"><div'+(t.imageAlignShow?"":' style="display: none"')+'><label><input type="radio" name="suneditor_image_radio" class="se-dialog-btn-radio" value="none" checked>'+n.dialogBox.basic+'</label><label><input type="radio" name="suneditor_image_radio" class="se-dialog-btn-radio" value="left">'+n.dialogBox.left+'</label><label><input type="radio" name="suneditor_image_radio" class="se-dialog-btn-radio" value="center">'+n.dialogBox.center+'</label><label><input type="radio" name="suneditor_image_radio" class="se-dialog-btn-radio" value="right">'+n.dialogBox.right+'</label></div><button type="submit" class="se-btn-primary" title="'+n.dialogBox.submitButton+'" aria-label="'+n.dialogBox.submitButton+'"><span>'+n.dialogBox.submitButton+"</span></button></div></form>",i.innerHTML=o,i},_fileInputChange:function(){this.imgInputFile.value?(this.imgUrlFile.setAttribute("disabled",!0),this.previewSrc.style.textDecoration="line-through"):(this.imgUrlFile.removeAttribute("disabled"),this.previewSrc.style.textDecoration="")},_removeSelectedFiles:function(e,t){this.value="",e&&(e.removeAttribute("disabled"),t.style.textDecoration="")},_openGallery:function(){this.callPlugin("imageGallery",this.plugins.imageGallery.open.bind(this,this.plugins.image._setUrlInput.bind(this.context.image)),null)},_setUrlInput:function(e){this.altText.value=e.alt,this._v_src._linkValue=this.previewSrc.textContent=this.imgUrlFile.value=e.src,this.imgUrlFile.focus()},_onLinkPreview:function(e,t,n){const i=n.target.value.trim();e._linkValue=this.textContent=i?t&&-1===i.indexOf("://")&&0!==i.indexOf("#")?t+i:-1===i.indexOf("://")?"/"+i:i:""},fileTags:["img"],select:function(e){this.plugins.image.onModifyMode.call(this,e,this.plugins.resizing.call_controller_resize.call(this,e,"image"))},destroy:function(e){const t=e||this.context.image._element,n=this.util.getParentElement(t,this.util.isMediaComponent)||t,i=1*t.getAttribute("data-index");let o=n.previousElementSibling||n.nextElementSibling;const l=n.parentNode;this.util.removeItem(n),this.plugins.image.init.call(this),this.controllersOff(),l!==this.context.element.wysiwyg&&this.util.removeItemAllParents(l,(function(e){return 0===e.childNodes.length}),null),this.focusEdge(o),this.plugins.fileManager.deleteInfo.call(this,"image",i,this.functions.onImageUpload),this.history.push(!1)},on:function(e){const t=this.context.image;e?t.imgInputFile&&this.options.imageMultipleFile&&t.imgInputFile.removeAttribute("multiple"):(t.inputX.value=t._origin_w=this.options.imageWidth===t._defaultSizeX?"":this.options.imageWidth,t.inputY.value=t._origin_h=this.options.imageHeight===t._defaultSizeY?"":this.options.imageHeight,t.imgInputFile&&this.options.imageMultipleFile&&t.imgInputFile.setAttribute("multiple","multiple")),this.plugins.anchor.on.call(this,t.anchorCtx,e)},open:function(){this.plugins.dialog.open.call(this,"image","image"===this.currentControllerName)},openTab:function(e){const t=this.context.image.modal,n="init"===e?t.querySelector("._se_tab_link"):e.target;if(!/^BUTTON$/i.test(n.tagName))return!1;const i=n.getAttribute("data-tab-link");let o,l,s;for(l=t.getElementsByClassName("_se_tab_content"),o=0;o<l.length;o++)l[o].style.display="none";for(s=t.getElementsByClassName("_se_tab_link"),o=0;o<s.length;o++)this.util.removeClass(s[o],"active");return t.querySelector("._se_tab_content_"+i).style.display="block",this.util.addClass(n,"active"),"image"===i&&this.context.image.focusElement?this.context.image.focusElement.focus():"url"===i&&this.context.anchor.caller.image.urlInput.focus(),!1},submit:function(e){const t=this.context.image,n=this.plugins.image;e.preventDefault(),e.stopPropagation(),t._altText=t.altText.value,t._align=t.modal.querySelector('input[name="suneditor_image_radio"]:checked').value,t._captionChecked=t.captionCheckEl.checked,t._resizing&&(t._proportionChecked=t.proportion.checked);try{this.context.dialog.updateModal&&n.update_image.call(this,!1,!0,!1),t.imgInputFile&&t.imgInputFile.files.length>0?(this.showLoading(),n.submitAction.call(this,this.context.image.imgInputFile.files)):t.imgUrlFile&&t._v_src._linkValue.length>0&&(this.showLoading(),n.onRender_imgUrl.call(this,t._v_src._linkValue))}catch(e){throw this.closeLoading(),Error('[SUNEDITOR.image.submit.fail] cause : "'+e.message+'"')}finally{this.plugins.dialog.close.call(this)}return!1},submitAction:function(e){if(0===e.length)return;let t=0,n=[];for(let i=0,o=e.length;i<o;i++)/image/i.test(e[i].type)&&(n.push(e[i]),t+=e[i].size);const i=this.options.imageUploadSizeLimit;if(i>0){let e=0;const n=this.context.image._infoList;for(let t=0,i=n.length;t<i;t++)e+=1*n[t].size;if(t+e>i){this.closeLoading();const n="[SUNEDITOR.imageUpload.fail] Size of uploadable total images: "+i/1e3+"KB";return void(("function"!=typeof this.functions.onImageUploadError||this.functions.onImageUploadError(n,{limitSize:i,currentSize:e,uploadSize:t},this))&&this.functions.noticeOpen(n))}}const o=this.context.image;o._uploadFileLength=n.length;const l={anchor:this.plugins.anchor.createAnchor.call(this,o.anchorCtx,!0),inputWidth:o.inputX.value,inputHeight:o.inputY.value,align:o._align,isUpdate:this.context.dialog.updateModal,alt:o._altText,element:o._element};if("function"==typeof this.functions.onImageUploadBefore){const e=this.functions.onImageUploadBefore(n,l,this,function(e){e&&this._w.Array.isArray(e.result)?this.plugins.image.register.call(this,l,e):this.plugins.image.upload.call(this,l,e)}.bind(this));if(void 0===e)return;if(!e)return void this.closeLoading();this._w.Array.isArray(e)&&e.length>0&&(n=e)}this.plugins.image.upload.call(this,l,n)},error:function(e,t){if(this.closeLoading(),"function"!=typeof this.functions.onImageUploadError||this.functions.onImageUploadError(e,t,this))throw this.functions.noticeOpen(e),Error("[SUNEDITOR.plugin.image.error] response: "+e)},upload:function(e,t){if(!t)return void this.closeLoading();if("string"==typeof t)return void this.plugins.image.error.call(this,t,null);const n=this.options.imageUploadUrl,i=this.context.dialog.updateModal?1:t.length;if("string"==typeof n&&n.length>0){const o=new FormData;for(let e=0;e<i;e++)o.append("file-"+e,t[e]);this.plugins.fileManager.upload.call(this,n,this.options.imageUploadHeader,o,this.plugins.image.callBack_imgUpload.bind(this,e),this.functions.onImageUploadError)}else this.plugins.image.setup_reader.call(this,t,e.anchor,e.inputWidth,e.inputHeight,e.align,e.alt,i,e.isUpdate)},callBack_imgUpload:function(e,t){if("function"==typeof this.functions.imageUploadHandler)this.functions.imageUploadHandler(t,e,this);else{const n=JSON.parse(t.responseText);n.errorMessage?this.plugins.image.error.call(this,n.errorMessage,n):this.plugins.image.register.call(this,e,n)}},register:function(e,t){const n=t.result;for(let t,i=0,o=n.length;i<o;i++){if(t={name:n[i].name,size:n[i].size},e.isUpdate){this.plugins.image.update_src.call(this,n[i].url,e.element,t);break}this.plugins.image.create_image.call(this,n[i].url,e.anchor,e.inputWidth,e.inputHeight,e.align,t,e.alt)}this.closeLoading()},setup_reader:function(e,t,n,i,o,l,s,r){try{this.context.image.base64RenderIndex=s;const a=this._w.FileReader,c=[s];this.context.image.inputX.value=n,this.context.image.inputY.value=i;for(let u,d,h=0;h<s;h++)u=new a,d=e[h],u.onload=function(e,s,r,a,u){c[u]={result:e.result,file:a},0==--this.context.image.base64RenderIndex&&(this.plugins.image.onRender_imgBase64.call(this,s,c,r,t,n,i,o,l),this.closeLoading())}.bind(this,u,r,this.context.image._element,d,h),u.readAsDataURL(d)}catch(e){throw this.closeLoading(),Error('[SUNEDITOR.image.setup_reader.fail] cause : "'+e.message+'"')}},onRender_imgBase64:function(e,t,n,i,o,l,s,r){const a=this.plugins.image.update_src,c=this.plugins.image.create_image;for(let u=0,d=t.length;u<d;u++)e?(this.context.image._element.setAttribute("data-file-name",t[u].file.name),this.context.image._element.setAttribute("data-file-size",t[u].file.size),a.call(this,t[u].result,n,t[u].file)):c.call(this,t[u].result,i,o,l,s,t[u].file,r)},onRender_imgUrl:function(e){if(e||(e=this.context.image._v_src._linkValue),!e)return!1;const t=this.context.image;try{const n={name:e.split("/").pop(),size:0};this.context.dialog.updateModal?this.plugins.image.update_src.call(this,e,t._element,n):this.plugins.image.create_image.call(this,e,this.plugins.anchor.createAnchor.call(this,t.anchorCtx,!0),t.inputX.value,t.inputY.value,t._align,n,t._altText)}catch(e){throw Error('[SUNEDITOR.image.URLRendering.fail] cause : "'+e.message+'"')}finally{this.closeLoading()}},onRender_link:function(e,t){return t?(t.setAttribute("data-image-link","image"),e.setAttribute("data-image-link",t.href),t.appendChild(e),t):e},setInputSize:function(e,t){t&&32===t.keyCode?t.preventDefault():this.plugins.resizing._module_setInputSize.call(this,this.context.image,e)},setRatio:function(){this.plugins.resizing._module_setRatio.call(this,this.context.image)},checkFileInfo:function(){const e=this.plugins.image,t=this.context.image,n=function(n){e.onModifyMode.call(this,n,null),e.openModify.call(this,!0),t.inputX.value=t._origin_w,t.inputY.value=t._origin_h;const i=this.util.getFormatElement(n);i&&(t._align=i.style.textAlign||i.style.float);this.util.getParentElement(n,this.util.isAnchor)&&!t.anchorCtx.linkValue&&(t.anchorCtx.linkValue=" "),e.update_image.call(this,!0,!1,!0),e.init.call(this)}.bind(this);this.plugins.fileManager.checkInfo.call(this,"image",["img"],this.functions.onImageUpload,n,!0)},resetFileInfo:function(){this.plugins.fileManager.resetInfo.call(this,"image",this.functions.onImageUpload)},create_image:function(e,t,n,i,o,l,s){const r=this.plugins.image,a=this.context.image;this.context.resizing._resize_plugin="image";let c=this.util.createElement("IMG");c.src=e,c.alt=s,c.setAttribute("data-rotate","0"),t=r.onRender_link.call(this,c,t?t.cloneNode(!1):null),a._resizing&&c.setAttribute("data-proportion",a._proportionChecked);const u=this.plugins.component.set_cover.call(this,t),d=this.plugins.component.set_container.call(this,u,"se-image-container");a._captionChecked&&(a._caption=this.plugins.component.create_caption.call(this),a._caption.setAttribute("contenteditable",!1),u.appendChild(a._caption)),a._element=c,a._cover=u,a._container=d,r.applySize.call(this,n,i),r.setAlign.call(this,o,c,u,d),c.onload=r._image_create_onload.bind(this,c,a.svgDefaultSize,d),this.insertComponent(d,!0,!0,!0)&&this.plugins.fileManager.setInfo.call(this,"image",c,this.functions.onImageUpload,l,!0),this.context.resizing._resize_plugin=""},_image_create_onload:function(e,t,n){if(0===e.offsetWidth&&this.plugins.image.applySize.call(this,t,""),this.options.mediaAutoSelect)this.selectComponent(e,"image");else{const e=this.appendFormatTag(n,null);e&&this.setRange(e,0,e,0)}},update_image:function(e,t,n){const i=this.context.image;let o,l=i._element,s=i._cover,r=i._container,a=!1;null===s&&(a=!0,l=i._element.cloneNode(!0),s=this.plugins.component.set_cover.call(this,l)),null===r?(s=s.cloneNode(!0),l=s.querySelector("img"),a=!0,r=this.plugins.component.set_container.call(this,s,"se-image-container")):a&&(r.innerHTML="",r.appendChild(s),i._cover=s,i._element=l,a=!1);const c=this.util.isNumber(i.inputX.value)?i.inputX.value+i.sizeUnit:i.inputX.value,u=this.util.isNumber(i.inputY.value)?i.inputY.value+i.sizeUnit:i.inputY.value;o=/%$/.test(l.style.width)?c!==r.style.width||u!==r.style.height:c!==l.style.width||u!==l.style.height,l.alt=i._altText;let d=!1;i._captionChecked?i._caption||(i._caption=this.plugins.component.create_caption.call(this),s.appendChild(i._caption),d=!0):i._caption&&(this.util.removeItem(i._caption),i._caption=null,d=!0);const h=this.plugins.anchor.createAnchor.call(this,i.anchorCtx,!0);if(h)i._linkElement!==h?(i._linkElement=h.cloneNode(!1),s.insertBefore(this.plugins.image.onRender_link.call(this,l,i._linkElement),i._caption),this.util.removeItem(h)):i._linkElement.setAttribute("data-image-link","image");else if(null!==i._linkElement){const e=l;if(e.setAttribute("data-image-link",""),s.contains(i._linkElement)){const t=e.cloneNode(!0);s.removeChild(i._linkElement),s.insertBefore(t,i._caption),i._element=l=t}}if(a){let e=this.util.isRangeFormatElement(i._element.parentNode)||this.util.isWysiwygDiv(i._element.parentNode)?i._element:/^A$/i.test(i._element.parentNode.nodeName)?i._element.parentNode:this.util.getFormatElement(i._element)||i._element;if(this.util.isListCell(e)){const t=this.util.getParentElement(i._element,(function(t){return t.parentNode===e}));e.insertBefore(r,t),this.util.removeItem(i._element),this.util.removeEmptyNode(t,null)}else if(this.util.isFormatElement(e)){const t=this.util.getParentElement(i._element,(function(t){return t.parentNode===e}));e=this.util.splitElement(e,t),e.parentNode.insertBefore(r,e),this.util.removeItem(i._element),this.util.removeEmptyNode(e,null),0===e.children.length&&(e.innerHTML=this.util.htmlRemoveWhiteSpace(e.innerHTML))}else if(this.util.isFormatElement(e.parentNode)){const t=e.parentNode;t.parentNode.insertBefore(r,e.previousSibling?t.nextElementSibling:t),this.util.removeItem(e)}else e.parentNode.replaceChild(r,e);l=r.querySelector("img"),i._element=l,i._cover=s,i._container=r}(d||!i._onlyPercentage&&o)&&!e&&(/\d+/.test(l.style.height)||this.context.resizing._rotateVertical&&i._captionChecked)&&(/%$/.test(i.inputX.value)||/%$/.test(i.inputY.value)?this.plugins.resizing.resetTransform.call(this,l):this.plugins.resizing.setTransformSize.call(this,l,this.util.getNumber(i.inputX.value,0),this.util.getNumber(i.inputY.value,0))),i._resizing&&(l.setAttribute("data-proportion",i._proportionChecked),o&&this.plugins.image.applySize.call(this)),this.plugins.image.setAlign.call(this,null,l,null,null),e&&this.plugins.fileManager.setInfo.call(this,"image",l,this.functions.onImageUpload,null,!0),t&&this.selectComponent(l,"image"),n||this.history.push(!1)},update_src:function(e,t,n){t.src=e,this._w.setTimeout(this.plugins.fileManager.setInfo.bind(this,"image",t,this.functions.onImageUpload,n,!0)),this.selectComponent(t,"image")},onModifyMode:function(e,t){if(!e)return;const n=this.context.image;n._linkElement=n.anchorCtx.linkAnchor=/^A$/i.test(e.parentNode.nodeName)?e.parentNode:null,n._element=e,n._cover=this.util.getParentElement(e,"FIGURE"),n._container=this.util.getParentElement(e,this.util.isMediaComponent),n._caption=this.util.getChildElement(n._cover,"FIGCAPTION"),n._align=e.style.float||e.getAttribute("data-align")||"none",e.style.float="",this.plugins.anchor.setCtx(n._linkElement,n.anchorCtx),t&&(n._element_w=t.w,n._element_h=t.h,n._element_t=t.t,n._element_l=t.l);let i,o,l=n._element.getAttribute("data-size")||n._element.getAttribute("data-origin");l?(l=l.split(","),i=l[0],o=l[1]):t&&(i=t.w,o=t.h),n._origin_w=i||e.style.width||e.width||"",n._origin_h=o||e.style.height||e.height||""},openModify:function(e){const t=this.context.image;t.imgUrlFile&&(t._v_src._linkValue=t.previewSrc.textContent=t.imgUrlFile.value=t._element.src),t._altText=t.altText.value=t._element.alt,(t.modal.querySelector('input[name="suneditor_image_radio"][value="'+t._align+'"]')||t.modal.querySelector('input[name="suneditor_image_radio"][value="none"]')).checked=!0,t._align=t.modal.querySelector('input[name="suneditor_image_radio"]:checked').value,t._captionChecked=t.captionCheckEl.checked=!!t._caption,t._resizing&&this.plugins.resizing._module_setModifyInputSize.call(this,t,this.plugins.image),e||this.plugins.dialog.open.call(this,"image",!0)},applySize:function(e,t){const n=this.context.image;return e||(e=n.inputX.value||this.options.imageWidth),t||(t=n.inputY.value||this.options.imageHeight),n._onlyPercentage&&e||/%$/.test(e)?(this.plugins.image.setPercentSize.call(this,e,t),!0):(e&&"auto"!==e||t&&"auto"!==t?this.plugins.image.setSize.call(this,e,t,!1):this.plugins.image.setAutoSize.call(this),!1)},sizeRevert:function(){this.plugins.resizing._module_sizeRevert.call(this,this.context.image)},setSize:function(e,t,n,i){const o=this.context.image,l=/^(rw|lw)$/.test(i)&&/\d+/.test(o._element.style.height);/^(th|bh)$/.test(i)&&/\d+/.test(o._element.style.width)||(o._element.style.width=this.util.isNumber(e)?e+o.sizeUnit:e,this.plugins.image.cancelPercentAttr.call(this)),l||(o._element.style.height=this.util.isNumber(t)?t+o.sizeUnit:/%$/.test(t)?"":t),"center"===o._align&&this.plugins.image.setAlign.call(this,null,null,null,null),n||o._element.removeAttribute("data-percentage"),this.plugins.resizing._module_saveCurrentSize.call(this,o)},setAutoSize:function(){const e=this.context.image;e._caption&&(e._caption.style.marginTop=""),this.plugins.resizing.resetTransform.call(this,e._element),this.plugins.image.cancelPercentAttr.call(this),e._element.style.maxWidth="",e._element.style.width="",e._element.style.height="",e._cover.style.width="",e._cover.style.height="",this.plugins.image.setAlign.call(this,null,null,null,null),e._element.setAttribute("data-percentage","auto,auto"),this.plugins.resizing._module_saveCurrentSize.call(this,e)},setOriginSize:function(){const e=this.context.image;e._element.removeAttribute("data-percentage"),this.plugins.resizing.resetTransform.call(this,e._element),this.plugins.image.cancelPercentAttr.call(this);const t=(e._element.getAttribute("data-origin")||"").split(","),n=t[0],i=t[1];t&&(e._onlyPercentage||/%$/.test(n)&&(/%$/.test(i)||!/\d/.test(i))?this.plugins.image.setPercentSize.call(this,n,i):this.plugins.image.setSize.call(this,n,i),this.plugins.resizing._module_saveCurrentSize.call(this,e))},setPercentSize:function(e,t){const n=this.context.image;t=!t||/%$/.test(t)||this.util.getNumber(t,0)?this.util.isNumber(t)?t+n.sizeUnit:t||"":this.util.isNumber(t)?t+"%":t;const i=/%$/.test(t);n._container.style.width=this.util.isNumber(e)?e+"%":e,n._container.style.height="",n._cover.style.width="100%",n._cover.style.height=i?t:"",n._element.style.width="100%",n._element.style.height=i?"":t,n._element.style.maxWidth="","center"===n._align&&this.plugins.image.setAlign.call(this,null,null,null,null),n._element.setAttribute("data-percentage",e+","+t),this.plugins.resizing.setCaptionPosition.call(this,n._element),this.plugins.resizing._module_saveCurrentSize.call(this,n)},cancelPercentAttr:function(){const e=this.context.image;e._cover.style.width="",e._cover.style.height="",e._container.style.width="",e._container.style.height="",this.util.removeClass(e._container,this.context.image._floatClassRegExp),this.util.addClass(e._container,"__se__float-"+e._align),"center"===e._align&&this.plugins.image.setAlign.call(this,null,null,null,null)},setAlign:function(e,t,n,i){const o=this.context.image;e||(e=o._align),t||(t=o._element),n||(n=o._cover),i||(i=o._container),n.style.margin=e&&"none"!==e?"auto":"0",/%$/.test(t.style.width)&&"center"===e?(i.style.minWidth="100%",n.style.width=i.style.width):(i.style.minWidth="",n.style.width=this.context.resizing._rotateVertical?t.style.height||t.offsetHeight:t.style.width&&"auto"!==t.style.width?t.style.width||"100%":""),this.util.hasClass(i,"__se__float-"+e)||(this.util.removeClass(i,o._floatClassRegExp),this.util.addClass(i,"__se__float-"+e)),t.setAttribute("data-align",e)},init:function(){const e=this.context.image;e.imgInputFile&&(e.imgInputFile.value=""),e.imgUrlFile&&(e._v_src._linkValue=e.previewSrc.textContent=e.imgUrlFile.value=""),e.imgInputFile&&e.imgUrlFile&&(e.imgUrlFile.removeAttribute("disabled"),e.previewSrc.style.textDecoration=""),e.altText.value="",e.modal.querySelector('input[name="suneditor_image_radio"][value="none"]').checked=!0,e.captionCheckEl.checked=!1,e._element=null,this.plugins.image.openTab.call(this,"init"),e._resizing&&(e.inputX.value=this.options.imageWidth===e._defaultSizeX?"":this.options.imageWidth,e.inputY.value=this.options.imageHeight===e._defaultSizeY?"":this.options.imageHeight,e.proportion.checked=!0,e._ratio=!1,e._ratioX=1,e._ratioY=1),this.plugins.anchor.init.call(this,e.anchorCtx)}},b={name:"video",display:"dialog",add:function(e){e.addModule([a.a,p.a,g.a,v.a]);const t=e.options,n=e.context,i=n.video={_infoList:[],_infoIndex:0,_uploadFileLength:0,focusElement:null,sizeUnit:t._videoSizeUnit,_align:"none",_floatClassRegExp:"__se__float\\-[a-z]+",_youtubeQuery:t.youtubeQuery,_videoRatio:100*t.videoRatio+"%",_defaultRatio:100*t.videoRatio+"%",_linkValue:"",_element:null,_cover:null,_container:null,inputX:null,inputY:null,_element_w:1,_element_h:1,_element_l:0,_element_t:0,_defaultSizeX:"100%",_defaultSizeY:100*t.videoRatio+"%",_origin_w:"100%"===t.videoWidth?"":t.videoWidth,_origin_h:"56.25%"===t.videoHeight?"":t.videoHeight,_proportionChecked:!0,_resizing:t.videoResizing,_resizeDotHide:!t.videoHeightShow,_rotation:t.videoRotation,_alignHide:!t.videoAlignShow,_onlyPercentage:t.videoSizeOnlyPercentage,_ratio:!1,_ratioX:1,_ratioY:1,_captionShow:!1};let o=this.setDialog(e);i.modal=o,i.videoInputFile=o.querySelector("._se_video_file"),i.videoUrlFile=o.querySelector(".se-input-url"),i.focusElement=i.videoUrlFile||i.videoInputFile,i.preview=o.querySelector(".se-link-preview"),o.querySelector("form").addEventListener("submit",this.submit.bind(e)),i.videoInputFile&&o.querySelector(".se-dialog-files-edge-button").addEventListener("click",this._removeSelectedFiles.bind(i.videoInputFile,i.videoUrlFile,i.preview)),i.videoInputFile&&i.videoUrlFile&&i.videoInputFile.addEventListener("change",this._fileInputChange.bind(i)),i.videoUrlFile&&i.videoUrlFile.addEventListener("input",this._onLinkPreview.bind(i.preview,i,t.linkProtocol)),i.proportion={},i.videoRatioOption={},i.inputX={},i.inputY={},t.videoResizing&&(i.proportion=o.querySelector("._se_video_check_proportion"),i.videoRatioOption=o.querySelector(".se-video-ratio"),i.inputX=o.querySelector("._se_video_size_x"),i.inputY=o.querySelector("._se_video_size_y"),i.inputX.value=t.videoWidth,i.inputY.value=t.videoHeight,i.inputX.addEventListener("keyup",this.setInputSize.bind(e,"x")),i.inputY.addEventListener("keyup",this.setInputSize.bind(e,"y")),i.inputX.addEventListener("change",this.setRatio.bind(e)),i.inputY.addEventListener("change",this.setRatio.bind(e)),i.proportion.addEventListener("change",this.setRatio.bind(e)),i.videoRatioOption.addEventListener("change",this.setVideoRatio.bind(e)),o.querySelector(".se-dialog-btn-revert").addEventListener("click",this.sizeRevert.bind(e))),n.dialog.modal.appendChild(o),o=null},setDialog:function(e){const t=e.options,n=e.lang,i=e.util.createElement("DIV");i.className="se-dialog-content",i.style.display="none";let o='<form method="post" enctype="multipart/form-data"><div class="se-dialog-header"><button type="button" data-command="close" class="se-btn se-dialog-close" title="'+n.dialogBox.close+'" aria-label="'+n.dialogBox.close+'">'+e.icons.cancel+'</button><span class="se-modal-title">'+n.dialogBox.videoBox.title+'</span></div><div class="se-dialog-body">';if(t.videoFileInput&&(o+='<div class="se-dialog-form"><label>'+n.dialogBox.videoBox.file+'</label><div class="se-dialog-form-files"><input class="se-input-form _se_video_file" type="file" accept="'+t.videoAccept+'"'+(t.videoMultipleFile?' multiple="multiple"':"")+'/><button type="button" data-command="filesRemove" class="se-btn se-dialog-files-edge-button se-file-remove" title="'+n.controller.remove+'" aria-label="'+n.controller.remove+'">'+e.icons.cancel+"</button></div></div>"),t.videoUrlInput&&(o+='<div class="se-dialog-form"><label>'+n.dialogBox.videoBox.url+'</label><input class="se-input-form se-input-url" type="text" /><pre class="se-link-preview"></pre></div>'),t.videoResizing){const i=t.videoRatioList||[{name:"16:9",value:.5625},{name:"4:3",value:.75},{name:"21:9",value:.4285}],l=t.videoRatio,s=t.videoSizeOnlyPercentage,r=s?' style="display: none !important;"':"",a=t.videoHeightShow?"":' style="display: none !important;"',c=t.videoRatioShow?"":' style="display: none !important;"',u=s||t.videoHeightShow||t.videoRatioShow?"":' style="display: none !important;"';o+='<div class="se-dialog-form"><div class="se-dialog-size-text"><label class="size-w">'+n.dialogBox.width+'</label><label class="se-dialog-size-x">&nbsp;</label><label class="size-h"'+a+">"+n.dialogBox.height+'</label><label class="size-h"'+c+">("+n.dialogBox.ratio+')</label></div><input class="se-input-control _se_video_size_x" placeholder="100%"'+(s?' type="number" min="1"':'type="text"')+(s?' max="100"':"")+'/><label class="se-dialog-size-x"'+u+">"+(s?"%":"x")+'</label><input class="se-input-control _se_video_size_y" placeholder="'+100*t.videoRatio+'%"'+(s?' type="number" min="1"':'type="text"')+(s?' max="100"':"")+a+'/><select class="se-input-select se-video-ratio" title="'+n.dialogBox.ratio+'" aria-label="'+n.dialogBox.ratio+'"'+c+">",a||(o+='<option value=""> - </option>');for(let e=0,t=i.length;e<t;e++)o+='<option value="'+i[e].value+'"'+(l.toString()===i[e].value.toString()?" selected":"")+">"+i[e].name+"</option>";o+='</select><button type="button" title="'+n.dialogBox.revertButton+'" aria-label="'+n.dialogBox.revertButton+'" class="se-btn se-dialog-btn-revert" style="float: right;">'+e.icons.revert+'</button></div><div class="se-dialog-form se-dialog-form-footer"'+r+u+'><label><input type="checkbox" class="se-dialog-btn-check _se_video_check_proportion" checked/>&nbsp;'+n.dialogBox.proportion+"</label></div>"}return o+='</div><div class="se-dialog-footer"><div'+(t.videoAlignShow?"":' style="display: none"')+'><label><input type="radio" name="suneditor_video_radio" class="se-dialog-btn-radio" value="none" checked>'+n.dialogBox.basic+'</label><label><input type="radio" name="suneditor_video_radio" class="se-dialog-btn-radio" value="left">'+n.dialogBox.left+'</label><label><input type="radio" name="suneditor_video_radio" class="se-dialog-btn-radio" value="center">'+n.dialogBox.center+'</label><label><input type="radio" name="suneditor_video_radio" class="se-dialog-btn-radio" value="right">'+n.dialogBox.right+'</label></div><button type="submit" class="se-btn-primary" title="'+n.dialogBox.submitButton+'" aria-label="'+n.dialogBox.submitButton+'"><span>'+n.dialogBox.submitButton+"</span></button></div></form>",i.innerHTML=o,i},_fileInputChange:function(){this.videoInputFile.value?(this.videoUrlFile.setAttribute("disabled",!0),this.preview.style.textDecoration="line-through"):(this.videoUrlFile.removeAttribute("disabled"),this.preview.style.textDecoration="")},_removeSelectedFiles:function(e,t){this.value="",e&&(e.removeAttribute("disabled"),t.style.textDecoration="")},_onLinkPreview:function(e,t,n){const i=n.target.value.trim();/^<iframe.*\/iframe>$/.test(i)?(e._linkValue=i,this.textContent='<IFrame :src=".."></IFrame>'):e._linkValue=this.textContent=i?t&&-1===i.indexOf("://")&&0!==i.indexOf("#")?t+i:-1===i.indexOf("://")?"/"+i:i:""},_setTagAttrs:function(e){e.setAttribute("controls",!0);const t=this.options.videoTagAttrs;if(t)for(let n in t)this.util.hasOwn(t,n)&&e.setAttribute(n,t[n])},createVideoTag:function(){const e=this.util.createElement("VIDEO");return this.plugins.video._setTagAttrs.call(this,e),e},_setIframeAttrs:function(e){e.frameBorder="0",e.allowFullscreen=!0;const t=this.options.videoIframeAttrs;if(t)for(let n in t)this.util.hasOwn(t,n)&&e.setAttribute(n,t[n])},createIframeTag:function(){const e=this.util.createElement("IFRAME");return this.plugins.video._setIframeAttrs.call(this,e),e},fileTags:["iframe","video"],select:function(e){this.plugins.video.onModifyMode.call(this,e,this.plugins.resizing.call_controller_resize.call(this,e,"video"))},destroy:function(e){const t=e||this.context.video._element,n=this.context.video._container,i=1*t.getAttribute("data-index");let o=n.previousElementSibling||n.nextElementSibling;const l=n.parentNode;this.util.removeItem(n),this.plugins.video.init.call(this),this.controllersOff(),l!==this.context.element.wysiwyg&&this.util.removeItemAllParents(l,(function(e){return 0===e.childNodes.length}),null),this.focusEdge(o),this.plugins.fileManager.deleteInfo.call(this,"video",i,this.functions.onVideoUpload),this.history.push(!1)},on:function(e){const t=this.context.video;e?t.videoInputFile&&this.options.videoMultipleFile&&t.videoInputFile.removeAttribute("multiple"):(t.inputX.value=t._origin_w=this.options.videoWidth===t._defaultSizeX?"":this.options.videoWidth,t.inputY.value=t._origin_h=this.options.videoHeight===t._defaultSizeY?"":this.options.videoHeight,t.proportion.disabled=!0,t.videoInputFile&&this.options.videoMultipleFile&&t.videoInputFile.setAttribute("multiple","multiple")),t._resizing&&this.plugins.video.setVideoRatioSelect.call(this,t._origin_h||t._defaultRatio)},open:function(){this.plugins.dialog.open.call(this,"video","video"===this.currentControllerName)},setVideoRatio:function(e){const t=this.context.video,n=e.target.options[e.target.selectedIndex].value;t._defaultSizeY=t._videoRatio=n?100*n+"%":t._defaultSizeY,t.inputY.placeholder=n?100*n+"%":"",t.inputY.value=""},setInputSize:function(e,t){if(t&&32===t.keyCode)return void t.preventDefault();const n=this.context.video;this.plugins.resizing._module_setInputSize.call(this,n,e),"y"===e&&this.plugins.video.setVideoRatioSelect.call(this,t.target.value||n._defaultRatio)},setRatio:function(){this.plugins.resizing._module_setRatio.call(this,this.context.video)},submit:function(e){const t=this.context.video,n=this.plugins.video;e.preventDefault(),e.stopPropagation(),t._align=t.modal.querySelector('input[name="suneditor_video_radio"]:checked').value;try{t.videoInputFile&&t.videoInputFile.files.length>0?(this.showLoading(),n.submitAction.call(this,this.context.video.videoInputFile.files)):t.videoUrlFile&&t._linkValue.length>0&&(this.showLoading(),n.setup_url.call(this,t._linkValue))}catch(e){throw this.closeLoading(),Error('[SUNEDITOR.video.submit.fail] cause : "'+e.message+'"')}finally{this.plugins.dialog.close.call(this)}return!1},submitAction:function(e){if(0===e.length)return;let t=0,n=[];for(let i=0,o=e.length;i<o;i++)/video/i.test(e[i].type)&&(n.push(e[i]),t+=e[i].size);const i=this.options.videoUploadSizeLimit;if(i>0){let e=0;const n=this.context.video._infoList;for(let t=0,i=n.length;t<i;t++)e+=1*n[t].size;if(t+e>i){this.closeLoading();const n="[SUNEDITOR.videoUpload.fail] Size of uploadable total videos: "+i/1e3+"KB";return void(("function"!=typeof this.functions.onVideoUploadError||this.functions.onVideoUploadError(n,{limitSize:i,currentSize:e,uploadSize:t},this))&&this.functions.noticeOpen(n))}}const o=this.context.video;o._uploadFileLength=n.length;const l={inputWidth:o.inputX.value,inputHeight:o.inputY.value,align:o._align,isUpdate:this.context.dialog.updateModal,element:o._element};if("function"==typeof this.functions.onVideoUploadBefore){const e=this.functions.onVideoUploadBefore(n,l,this,function(e){e&&this._w.Array.isArray(e.result)?this.plugins.video.register.call(this,l,e):this.plugins.video.upload.call(this,l,e)}.bind(this));if(void 0===e)return;if(!e)return void this.closeLoading();"object"==typeof e&&e.length>0&&(n=e)}this.plugins.video.upload.call(this,l,n)},error:function(e,t){if(this.closeLoading(),"function"!=typeof this.functions.onVideoUploadError||this.functions.onVideoUploadError(e,t,this))throw this.functions.noticeOpen(e),Error("[SUNEDITOR.plugin.video.error] response: "+e)},upload:function(e,t){if(!t)return void this.closeLoading();if("string"==typeof t)return void this.plugins.video.error.call(this,t,null);const n=this.options.videoUploadUrl,i=this.context.dialog.updateModal?1:t.length;if(!("string"==typeof n&&n.length>0))throw Error('[SUNEDITOR.videoUpload.fail] cause : There is no "videoUploadUrl" option.');{const o=new FormData;for(let e=0;e<i;e++)o.append("file-"+e,t[e]);this.plugins.fileManager.upload.call(this,n,this.options.videoUploadHeader,o,this.plugins.video.callBack_videoUpload.bind(this,e),this.functions.onVideoUploadError)}},callBack_videoUpload:function(e,t){if("function"==typeof this.functions.videoUploadHandler)this.functions.videoUploadHandler(t,e,this);else{const n=JSON.parse(t.responseText);n.errorMessage?this.plugins.video.error.call(this,n.errorMessage,n):this.plugins.video.register.call(this,e,n)}},register:function(e,t){const n=t.result,i=this.plugins.video.createVideoTag.call(this);for(let t,o=0,l=n.length;o<l;o++)t={name:n[o].name,size:n[o].size},this.plugins.video.create_video.call(this,e.isUpdate?e.element:i.cloneNode(!1),n[o].url,e.inputWidth,e.inputHeight,e.align,t,e.isUpdate);this.closeLoading()},setup_url:function(e){try{const t=this.context.video;if(e||(e=t._linkValue),!e)return!1;if(/^<iframe.*\/iframe>$/.test(e)){if(0===(e=(new this._w.DOMParser).parseFromString(e,"text/html").querySelector("iframe").src).length)return!1}if(/youtu\.?be/.test(e)){if(/^http/.test(e)||(e="https://"+e),e=e.replace("watch?v=",""),/^\/\/.+\/embed\//.test(e)||(e=e.replace(e.match(/\/\/.+\//)[0],"//www.youtube.com/embed/").replace("&","?&")),t._youtubeQuery.length>0)if(/\?/.test(e)){const n=e.split("?");e=n[0]+"?"+t._youtubeQuery+"&"+n[1]}else e+="?"+t._youtubeQuery}else/vimeo\.com/.test(e)&&(e.endsWith("/")&&(e=e.slice(0,-1)),e="https://player.vimeo.com/video/"+e.slice(e.lastIndexOf("/")+1));this.plugins.video.create_video.call(this,this.plugins.video[/embed|iframe|player|\/e\/|\.php|\.html?/.test(e)||/vimeo\.com/.test(e)?"createIframeTag":"createVideoTag"].call(this),e,t.inputX.value,t.inputY.value,t._align,null,this.context.dialog.updateModal)}catch(e){throw Error('[SUNEDITOR.video.upload.fail] cause : "'+e.message+'"')}finally{this.closeLoading()}},create_video:function(e,t,n,i,o,l,s){this.context.resizing._resize_plugin="video";const r=this.context.video;let a=null,c=null,u=!1;if(s){if((e=r._element).src!==t){u=!0;const n=/youtu\.?be/.test(t),i=/vimeo\.com/.test(t);if(!n&&!i||/^iframe$/i.test(e.nodeName))if(n||i||/^videoo$/i.test(e.nodeName))e.src=t;else{const n=this.plugins.video.createVideoTag.call(this);n.src=t,e.parentNode.replaceChild(n,e),r._element=e=n}else{const n=this.plugins.video.createIframeTag.call(this);n.src=t,e.parentNode.replaceChild(n,e),r._element=e=n}}c=r._container,a=this.util.getParentElement(e,"FIGURE")}else u=!0,e.src=t,r._element=e,a=this.plugins.component.set_cover.call(this,e),c=this.plugins.component.set_container.call(this,a,"se-video-container");r._cover=a,r._container=c;const d=this.plugins.resizing._module_getSizeX.call(this,r)!==(n||r._defaultSizeX)||this.plugins.resizing._module_getSizeY.call(this,r)!==(i||r._videoRatio),h=!s||d;r._resizing&&(this.context.video._proportionChecked=r.proportion.checked,e.setAttribute("data-proportion",r._proportionChecked));let p=!1;h&&(p=this.plugins.video.applySize.call(this)),p&&"center"===o||this.plugins.video.setAlign.call(this,null,e,a,c);let f=!0;if(s)r._resizing&&this.context.resizing._rotateVertical&&h&&this.plugins.resizing.setTransformSize.call(this,e,null,null);else if(f=this.insertComponent(c,!1,!0,!this.options.mediaAutoSelect),!this.options.mediaAutoSelect){const e=this.appendFormatTag(c,null);e&&this.setRange(e,0,e,0)}f&&(u&&this.plugins.fileManager.setInfo.call(this,"video",e,this.functions.onVideoUpload,l,!0),s&&(this.selectComponent(e,"video"),this.history.push(!1))),this.context.resizing._resize_plugin=""},_update_videoCover:function(e){if(!e)return;const t=this.context.video;/^video$/i.test(e.nodeName)?this.plugins.video._setTagAttrs.call(this,e):this.plugins.video._setIframeAttrs.call(this,e);let n=this.util.isRangeFormatElement(e.parentNode)||this.util.isWysiwygDiv(e.parentNode)?e:this.util.getFormatElement(e)||e;const i=e;t._element=e=e.cloneNode(!0);const o=t._cover=this.plugins.component.set_cover.call(this,e),l=t._container=this.plugins.component.set_container.call(this,o,"se-video-container");try{const s=n.querySelector("figcaption");let r=null;s&&(r=this.util.createElement("DIV"),r.innerHTML=s.innerHTML,this.util.removeItem(s));const a=(e.getAttribute("data-size")||e.getAttribute("data-origin")||"").split(",");this.plugins.video.applySize.call(this,a[0]||i.style.width||i.width||"",a[1]||i.style.height||i.height||"");const c=this.util.getFormatElement(i);if(c&&(t._align=c.style.textAlign||c.style.float),this.plugins.video.setAlign.call(this,null,e,o,l),this.util.isListCell(n)){const e=this.util.getParentElement(i,(function(e){return e.parentNode===n}));n.insertBefore(l,e),this.util.removeItem(i),this.util.removeEmptyNode(e,null)}else if(this.util.isFormatElement(n)){const e=this.util.getParentElement(i,(function(e){return e.parentNode===n}));n=this.util.splitElement(n,e),n.parentNode.insertBefore(l,n),this.util.removeItem(i),this.util.removeEmptyNode(n,null),0===n.children.length&&(n.innerHTML=this.util.htmlRemoveWhiteSpace(n.innerHTML))}else n.parentNode.replaceChild(l,n);r&&n.parentNode.insertBefore(r,l.nextElementSibling)}catch(e){console.warn("[SUNEDITOR.video.error] Maybe the video tag is nested.",e)}this.plugins.fileManager.setInfo.call(this,"video",e,this.functions.onVideoUpload,null,!0),this.plugins.video.init.call(this)},onModifyMode:function(e,t){const n=this.context.video;n._element=e,n._cover=this.util.getParentElement(e,"FIGURE"),n._container=this.util.getParentElement(e,this.util.isMediaComponent),n._align=e.style.float||e.getAttribute("data-align")||"none",e.style.float="",t&&(n._element_w=t.w,n._element_h=t.h,n._element_t=t.t,n._element_l=t.l);let i,o,l=n._element.getAttribute("data-size")||n._element.getAttribute("data-origin");l?(l=l.split(","),i=l[0],o=l[1]):t&&(i=t.w,o=t.h),n._origin_w=i||e.style.width||e.width||"",n._origin_h=o||e.style.height||e.height||""},openModify:function(e){const t=this.context.video;if(t.videoUrlFile&&(t._linkValue=t.preview.textContent=t.videoUrlFile.value=t._element.src||(t._element.querySelector("source")||"").src||""),(t.modal.querySelector('input[name="suneditor_video_radio"][value="'+t._align+'"]')||t.modal.querySelector('input[name="suneditor_video_radio"][value="none"]')).checked=!0,t._resizing){this.plugins.resizing._module_setModifyInputSize.call(this,t,this.plugins.video);const e=t._videoRatio=this.plugins.resizing._module_getSizeY.call(this,t);this.plugins.video.setVideoRatioSelect.call(this,e)||(t.inputY.value=t._onlyPercentage?this.util.getNumber(e,2):e)}e||this.plugins.dialog.open.call(this,"video",!0)},setVideoRatioSelect:function(e){let t=!1;const n=this.context.video,i=n.videoRatioOption.options;/%$/.test(e)||n._onlyPercentage?e=this.util.getNumber(e,2)/100+"":(!this.util.isNumber(e)||1*e>=1)&&(e=""),n.inputY.placeholder="";for(let o=0,l=i.length;o<l;o++)i[o].value===e?(t=i[o].selected=!0,n.inputY.placeholder=e?100*e+"%":""):i[o].selected=!1;return t},checkFileInfo:function(){this.plugins.fileManager.checkInfo.call(this,"video",["iframe","video"],this.functions.onVideoUpload,this.plugins.video._update_videoCover.bind(this),!0)},resetFileInfo:function(){this.plugins.fileManager.resetInfo.call(this,"video",this.functions.onVideoUpload)},applySize:function(e,t){const n=this.context.video;return e||(e=n.inputX.value||this.options.videoWidth),t||(t=n.inputY.value||this.options.videoHeight),n._onlyPercentage||/%$/.test(e)||!e?(this.plugins.video.setPercentSize.call(this,e||"100%",t||(/%$/.test(n._videoRatio)?n._videoRatio:n._defaultRatio)),!0):(e&&"auto"!==e||t&&"auto"!==t?this.plugins.video.setSize.call(this,e,t||n._videoRatio||n._defaultRatio,!1):this.plugins.video.setAutoSize.call(this),!1)},sizeRevert:function(){this.plugins.resizing._module_sizeRevert.call(this,this.context.video)},setSize:function(e,t,n,i){const o=this.context.video,l=/^(rw|lw)$/.test(i),s=/^(th|bh)$/.test(i);s||(e=this.util.getNumber(e,0)),l||(t=this.util.isNumber(t)?t+o.sizeUnit:t||""),e=e?e+o.sizeUnit:"",s||(o._element.style.width=e),l||(o._cover.style.paddingBottom=o._cover.style.height=t),s||/%$/.test(e)||(o._cover.style.width=e,o._container.style.width=""),l||/%$/.test(t)?o._element.style.height="":o._element.style.height=t,n||o._element.removeAttribute("data-percentage"),this.plugins.resizing._module_saveCurrentSize.call(this,o)},setAutoSize:function(){this.plugins.video.setPercentSize.call(this,100,this.context.video._defaultRatio)},setOriginSize:function(e){const t=this.context.video;t._element.removeAttribute("data-percentage"),this.plugins.resizing.resetTransform.call(this,t._element),this.plugins.video.cancelPercentAttr.call(this);const n=((e?t._element.getAttribute("data-size"):"")||t._element.getAttribute("data-origin")||"").split(",");if(n){const e=n[0],i=n[1];t._onlyPercentage||/%$/.test(e)&&(/%$/.test(i)||!/\d/.test(i))?this.plugins.video.setPercentSize.call(this,e,i):this.plugins.video.setSize.call(this,e,i),this.plugins.resizing._module_saveCurrentSize.call(this,t)}},setPercentSize:function(e,t){const n=this.context.video;t=!t||/%$/.test(t)||this.util.getNumber(t,0)?this.util.isNumber(t)?t+n.sizeUnit:t||n._defaultRatio:this.util.isNumber(t)?t+"%":t,n._container.style.width=this.util.isNumber(e)?e+"%":e,n._container.style.height="",n._cover.style.width="100%",n._cover.style.height=t,n._cover.style.paddingBottom=t,n._element.style.width="100%",n._element.style.height="100%",n._element.style.maxWidth="","center"===n._align&&this.plugins.video.setAlign.call(this,null,null,null,null),n._element.setAttribute("data-percentage",e+","+t),this.plugins.resizing._module_saveCurrentSize.call(this,n)},cancelPercentAttr:function(){const e=this.context.video;e._cover.style.width="",e._cover.style.height="",e._cover.style.paddingBottom="",e._container.style.width="",e._container.style.height="",this.util.removeClass(e._container,this.context.video._floatClassRegExp),this.util.addClass(e._container,"__se__float-"+e._align),"center"===e._align&&this.plugins.video.setAlign.call(this,null,null,null,null)},setAlign:function(e,t,n,i){const o=this.context.video;e||(e=o._align),t||(t=o._element),n||(n=o._cover),i||(i=o._container),n.style.margin=e&&"none"!==e?"auto":"0",/%$/.test(t.style.width)&&"center"===e?(i.style.minWidth="100%",n.style.width=i.style.width,n.style.height=n.style.height,n.style.paddingBottom=/%$/.test(n.style.height)?this.util.getNumber(this.util.getNumber(n.style.height,2)/100*this.util.getNumber(n.style.width,2),2)+"%":n.style.height):(i.style.minWidth="",n.style.width=this.context.resizing._rotateVertical?t.style.height||t.offsetHeight:t.style.width||"100%",n.style.paddingBottom=n.style.height),this.util.hasClass(i,"__se__float-"+e)||(this.util.removeClass(i,o._floatClassRegExp),this.util.addClass(i,"__se__float-"+e)),t.setAttribute("data-align",e)},init:function(){const e=this.context.video;e.videoInputFile&&(e.videoInputFile.value=""),e.videoUrlFile&&(e._linkValue=e.preview.textContent=e.videoUrlFile.value=""),e.videoInputFile&&e.videoUrlFile&&(e.videoUrlFile.removeAttribute("disabled"),e.preview.style.textDecoration=""),e._origin_w=this.options.videoWidth,e._origin_h=this.options.videoHeight,e.modal.querySelector('input[name="suneditor_video_radio"][value="none"]').checked=!0,e._resizing&&(e.inputX.value=this.options.videoWidth===e._defaultSizeX?"":this.options.videoWidth,e.inputY.value=this.options.videoHeight===e._defaultSizeY?"":this.options.videoHeight,e.proportion.checked=!0,e.proportion.disabled=!0,this.plugins.video.setVideoRatioSelect.call(this,e._defaultRatio))}},_={name:"audio",display:"dialog",add:function(e){e.addModule([a.a,p.a,v.a]);const t=e.context,n=t.audio={_infoList:[],_infoIndex:0,_uploadFileLength:0,focusElement:null,targetSelect:null,_origin_w:e.options.audioWidth,_origin_h:e.options.audioHeight,_linkValue:"",_element:null,_cover:null,_container:null};let i=this.setDialog(e);n.modal=i,n.audioInputFile=i.querySelector("._se_audio_files"),n.audioUrlFile=i.querySelector(".se-input-url"),n.focusElement=n.audioInputFile||n.audioUrlFile,n.preview=i.querySelector(".se-link-preview");let o=this.setController(e);n.controller=o,i.querySelector("form").addEventListener("submit",this.submit.bind(e)),n.audioInputFile&&i.querySelector(".se-dialog-files-edge-button").addEventListener("click",this._removeSelectedFiles.bind(n.audioInputFile,n.audioUrlFile,n.preview)),n.audioInputFile&&n.audioUrlFile&&n.audioInputFile.addEventListener("change",this._fileInputChange.bind(n)),o.addEventListener("click",this.onClick_controller.bind(e)),n.audioUrlFile&&n.audioUrlFile.addEventListener("input",this._onLinkPreview.bind(n.preview,n,e.options.linkProtocol)),t.dialog.modal.appendChild(i),t.element.relative.appendChild(o),i=null,o=null},setDialog:function(e){const t=e.options,n=e.lang,i=e.util.createElement("DIV");i.className="se-dialog-content",i.style.display="none";let o='<form method="post" enctype="multipart/form-data"><div class="se-dialog-header"><button type="button" data-command="close" class="se-btn se-dialog-close" title="'+n.dialogBox.close+'" aria-label="'+n.dialogBox.close+'">'+e.icons.cancel+'</button><span class="se-modal-title">'+n.dialogBox.audioBox.title+'</span></div><div class="se-dialog-body">';return t.audioFileInput&&(o+='<div class="se-dialog-form"><label>'+n.dialogBox.audioBox.file+'</label><div class="se-dialog-form-files"><input class="se-input-form _se_audio_files" type="file" accept="'+t.audioAccept+'"'+(t.audioMultipleFile?' multiple="multiple"':"")+'/><button type="button" data-command="filesRemove" class="se-btn se-dialog-files-edge-button se-file-remove" title="'+n.controller.remove+'" aria-label="'+n.controller.remove+'">'+e.icons.cancel+"</button></div></div>"),t.audioUrlInput&&(o+='<div class="se-dialog-form"><label>'+n.dialogBox.audioBox.url+'</label><input class="se-input-form se-input-url" type="text" /><pre class="se-link-preview"></pre></div>'),o+='</div><div class="se-dialog-footer"><button type="submit" class="se-btn-primary" title="'+n.dialogBox.submitButton+'" aria-label="'+n.dialogBox.submitButton+'"><span>'+n.dialogBox.submitButton+"</span></button></div></form>",i.innerHTML=o,i},setController:function(e){const t=e.lang,n=e.icons,i=e.util.createElement("DIV");return i.className="se-controller se-controller-link",i.innerHTML='<div class="se-arrow se-arrow-up"></div><div class="link-content"><div class="se-btn-group"><button type="button" data-command="update" tabindex="-1" class="se-tooltip">'+n.edit+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.edit+'</span></span></button><button type="button" data-command="delete" tabindex="-1" class="se-tooltip">'+n.delete+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.remove+"</span></span></button></div></div>",i},_fileInputChange:function(){this.audioInputFile.value?(this.audioUrlFile.setAttribute("disabled",!0),this.preview.style.textDecoration="line-through"):(this.audioUrlFile.removeAttribute("disabled"),this.preview.style.textDecoration="")},_removeSelectedFiles:function(e,t){this.value="",e&&(e.removeAttribute("disabled"),t.style.textDecoration="")},_createAudioTag:function(){const e=this.util.createElement("AUDIO");this.plugins.audio._setTagAttrs.call(this,e);const t=this.context.audio._origin_w,n=this.context.audio._origin_h;return e.setAttribute("origin-size",t+","+n),e.style.cssText=(t?"width:"+t+"; ":"")+(n?"height:"+n+";":""),e},_setTagAttrs:function(e){e.setAttribute("controls",!0);const t=this.options.audioTagAttrs;if(t)for(let n in t)this.util.hasOwn(t,n)&&e.setAttribute(n,t[n])},_onLinkPreview:function(e,t,n){const i=n.target.value.trim();e._linkValue=this.textContent=i?t&&-1===i.indexOf("://")&&0!==i.indexOf("#")?t+i:-1===i.indexOf("://")?"/"+i:i:""},fileTags:["audio"],select:function(e){this.plugins.audio.onModifyMode.call(this,e)},destroy:function(e){e=e||this.context.audio._element;const t=this.util.getParentElement(e,this.util.isComponent)||e,n=1*e.getAttribute("data-index"),i=t.previousElementSibling||t.nextElementSibling,o=t.parentNode;this.util.removeItem(t),this.plugins.audio.init.call(this),this.controllersOff(),o!==this.context.element.wysiwyg&&this.util.removeItemAllParents(o,(function(e){return 0===e.childNodes.length}),null),this.focusEdge(i),this.plugins.fileManager.deleteInfo.call(this,"audio",n,this.functions.onAudioUpload),this.history.push(!1)},checkFileInfo:function(){this.plugins.fileManager.checkInfo.call(this,"audio",["audio"],this.functions.onAudioUpload,this.plugins.audio.updateCover.bind(this),!1)},resetFileInfo:function(){this.plugins.fileManager.resetInfo.call(this,"audio",this.functions.onAudioUpload)},on:function(e){const t=this.context.audio;e?t._element?(this.context.dialog.updateModal=!0,t._linkValue=t.preview.textContent=t.audioUrlFile.value=t._element.src,t.audioInputFile&&this.options.audioMultipleFile&&t.audioInputFile.removeAttribute("multiple")):t.audioInputFile&&this.options.audioMultipleFile&&t.audioInputFile.removeAttribute("multiple"):(this.plugins.audio.init.call(this),t.audioInputFile&&this.options.audioMultipleFile&&t.audioInputFile.setAttribute("multiple","multiple"))},open:function(){this.plugins.dialog.open.call(this,"audio","audio"===this.currentControllerName)},submit:function(e){const t=this.context.audio;e.preventDefault(),e.stopPropagation();try{t.audioInputFile&&t.audioInputFile.files.length>0?(this.showLoading(),this.plugins.audio.submitAction.call(this,t.audioInputFile.files)):t.audioUrlFile&&t._linkValue.length>0&&(this.showLoading(),this.plugins.audio.setupUrl.call(this,t._linkValue))}catch(e){throw this.closeLoading(),Error('[SUNEDITOR.audio.submit.fail] cause : "'+e.message+'"')}finally{this.plugins.dialog.close.call(this)}return!1},submitAction:function(e){if(0===e.length)return;let t=0,n=[];for(let i=0,o=e.length;i<o;i++)/audio/i.test(e[i].type)&&(n.push(e[i]),t+=e[i].size);const i=this.options.audioUploadSizeLimit;if(i>0){let e=0;const n=this.context.audio._infoList;for(let t=0,i=n.length;t<i;t++)e+=1*n[t].size;if(t+e>i){this.closeLoading();const n="[SUNEDITOR.audioUpload.fail] Size of uploadable total audios: "+i/1e3+"KB";return void(("function"!=typeof this.functions.onAudioUploadError||this.functions.onAudioUploadError(n,{limitSize:i,currentSize:e,uploadSize:t},this))&&this.functions.noticeOpen(n))}}const o=this.context.audio;o._uploadFileLength=n.length;const l={isUpdate:this.context.dialog.updateModal,element:o._element};if("function"==typeof this.functions.onAudioUploadBefore){const e=this.functions.onAudioUploadBefore(n,l,this,function(e){e&&this._w.Array.isArray(e.result)?this.plugins.audio.register.call(this,l,e):this.plugins.audio.upload.call(this,l,e)}.bind(this));if(void 0===e)return;if(!e)return void this.closeLoading();"object"==typeof e&&e.length>0&&(n=e)}this.plugins.audio.upload.call(this,l,n)},error:function(e,t){if(this.closeLoading(),"function"!=typeof this.functions.onAudioUploadError||this.functions.onAudioUploadError(e,t,this))throw this.functions.noticeOpen(e),Error("[SUNEDITOR.plugin.audio.exception] response: "+e)},upload:function(e,t){if(!t)return void this.closeLoading();if("string"==typeof t)return void this.plugins.audio.error.call(this,t,null);const n=this.options.audioUploadUrl,i=this.context.dialog.updateModal?1:t.length,o=new FormData;for(let e=0;e<i;e++)o.append("file-"+e,t[e]);this.plugins.fileManager.upload.call(this,n,this.options.audioUploadHeader,o,this.plugins.audio.callBack_upload.bind(this,e),this.functions.onAudioUploadError)},callBack_upload:function(e,t){if("function"==typeof this.functions.audioUploadHandler)this.functions.audioUploadHandler(t,e,this);else{const n=JSON.parse(t.responseText);n.errorMessage?this.plugins.audio.error.call(this,n.errorMessage,n):this.plugins.audio.register.call(this,e,n)}},register:function(e,t){const n=t.result;for(let t,i,o=0,l=n.length;o<l;o++)i=e.isUpdate?e.element:this.plugins.audio._createAudioTag.call(this),t={name:n[o].name,size:n[o].size},this.plugins.audio.create_audio.call(this,i,n[o].url,t,e.isUpdate);this.closeLoading()},setupUrl:function(e){try{if(0===e.length)return!1;this.plugins.audio.create_audio.call(this,this.plugins.audio._createAudioTag.call(this),e,null,this.context.dialog.updateModal)}catch(e){throw Error('[SUNEDITOR.audio.audio.fail] cause : "'+e.message+'"')}finally{this.closeLoading()}},create_audio:function(e,t,n,i){const o=this.context.audio;if(i){if(o._element&&(e=o._element),!e||e.src===t)return void this.selectComponent(e,"audio");e.src=t,this.selectComponent(e,"audio")}else{e.src=t;const n=this.plugins.component.set_cover.call(this,e),i=this.plugins.component.set_container.call(this,n,"");if(!this.insertComponent(i,!1,!0,!this.options.mediaAutoSelect))return void this.focus();if(!this.options.mediaAutoSelect){const e=this.appendFormatTag(i,null);e&&this.setRange(e,0,e,0)}}this.plugins.fileManager.setInfo.call(this,"audio",e,this.functions.onAudioUpload,n,!1),i&&this.history.push(!1)},updateCover:function(e){const t=this.context.audio;this.plugins.audio._setTagAttrs.call(this,e);let n=this.util.isRangeFormatElement(e.parentNode)||this.util.isWysiwygDiv(e.parentNode)?e:this.util.getFormatElement(e)||e;const i=e;t._element=e=e.cloneNode(!1);const o=this.plugins.component.set_cover.call(this,e),l=this.plugins.component.set_container.call(this,o,"se-audio-container");try{if(this.util.isListCell(n)){const e=this.util.getParentElement(i,(function(e){return e.parentNode===n}));n.insertBefore(l,e),this.util.removeItem(i),this.util.removeEmptyNode(e,null)}else if(this.util.isFormatElement(n)){const e=this.util.getParentElement(i,(function(e){return e.parentNode===n}));n=this.util.splitElement(n,e),n.parentNode.insertBefore(l,n),this.util.removeItem(i),this.util.removeEmptyNode(n,null),0===n.children.length&&(n.innerHTML=this.util.htmlRemoveWhiteSpace(n.innerHTML))}else n.parentNode.replaceChild(l,n)}catch(e){console.warn("[SUNEDITOR.audio.error] Maybe the audio tag is nested.",e)}this.plugins.fileManager.setInfo.call(this,"audio",e,this.functions.onAudioUpload,null,!1),this.plugins.audio.init.call(this)},onModifyMode:function(e){const t=this.context.audio;this.setControllerPosition(t.controller,e,"bottom",{left:0,top:0}),this.controllersOn(t.controller,e,this.plugins.audio.onControllerOff.bind(this,e),"audio"),this.util.addClass(e,"active"),t._element=e,t._cover=this.util.getParentElement(e,"FIGURE"),t._container=this.util.getParentElement(e,this.util.isComponent)},openModify:function(e){if(this.context.audio.audioUrlFile){const e=this.context.audio;e._linkValue=e.preview.textContent=e.audioUrlFile.value=e._element.src}e||this.plugins.dialog.open.call(this,"audio",!0)},onClick_controller:function(e){e.stopPropagation();const t=e.target.getAttribute("data-command");t&&(e.preventDefault(),/update/.test(t)?this.plugins.audio.openModify.call(this,!1):this.plugins.audio.destroy.call(this,this.context.audio._element),this.controllersOff())},onControllerOff:function(e){this.util.removeClass(e,"active"),this.context.audio.controller.style.display="none"},init:function(){if(this.context.dialog.updateModal)return;const e=this.context.audio;e.audioInputFile&&(e.audioInputFile.value=""),e.audioUrlFile&&(e._linkValue=e.preview.textContent=e.audioUrlFile.value=""),e.audioInputFile&&e.audioUrlFile&&(e.audioUrlFile.removeAttribute("disabled"),e.preview.style.textDecoration=""),e._element=null}};var w={name:"math",display:"dialog",add:function(e){e.addModule([a.a]);const t=e.context;t.math={focusElement:null,previewElement:null,fontSizeElement:null,defaultFontSize:"",_mathExp:null};let n=this.setDialog(e);t.math.modal=n,t.math.focusElement=n.querySelector(".se-math-exp"),t.math.previewElement=n.querySelector(".se-math-preview"),t.math.fontSizeElement=n.querySelector(".se-math-size"),t.math.focusElement.addEventListener(e.util.isIE?"textinput":"input",this._renderMathExp.bind(e,t.math),!1),t.math.fontSizeElement.addEventListener("change",function(e){this.fontSize=e.target.value}.bind(t.math.previewElement.style),!1);let i=this.setController_MathButton(e);t.math.mathController=i,t.math._mathExp=null,n.querySelector("form").addEventListener("submit",this.submit.bind(e),!1),i.addEventListener("click",this.onClick_mathController.bind(e)),t.math.previewElement.style.fontSize=t.math.defaultFontSize,t.dialog.modal.appendChild(n),t.element.relative.appendChild(i),n=null,i=null},setDialog:function(e){const t=e.lang,n=e.util.createElement("DIV"),i=e.options.mathFontSize;let o=i[0].value;n.className="se-dialog-content",n.style.display="none";let l='<form><div class="se-dialog-header"><button type="button" data-command="close" class="se-btn se-dialog-close" title="'+t.dialogBox.close+'" aria-label="'+t.dialogBox.close+'">'+e.icons.cancel+'</button><span class="se-modal-title">'+t.dialogBox.mathBox.title+'</span></div><div class="se-dialog-body"><div class="se-dialog-form"><label>'+t.dialogBox.mathBox.inputLabel+' (<a href="https://katex.org/docs/supported.html" target="_blank">KaTeX</a>)</label><textarea class="se-input-form se-math-exp" type="text"></textarea></div><div class="se-dialog-form"><label>'+t.dialogBox.mathBox.fontSizeLabel+'</label><select class="se-input-select se-math-size">';for(let e,t=0,n=i.length;t<n;t++)e=i[t],e.default&&(o=e.value),l+='<option value="'+e.value+'"'+(e.default?" selected":"")+">"+e.text+"</option>";return l+='</select></div><div class="se-dialog-form"><label>'+t.dialogBox.mathBox.previewLabel+'</label><p class="se-math-preview"></p></div></div><div class="se-dialog-footer"><button type="submit" class="se-btn-primary" title="'+t.dialogBox.submitButton+'" aria-label="'+t.dialogBox.submitButton+'"><span>'+t.dialogBox.submitButton+"</span></button></div></form>",e.context.math.defaultFontSize=o,n.innerHTML=l,n},setController_MathButton:function(e){const t=e.lang,n=e.util.createElement("DIV");return n.className="se-controller se-controller-link",n.innerHTML='<div class="se-arrow se-arrow-up"></div><div class="link-content"><div class="se-btn-group"><button type="button" data-command="update" tabindex="-1" class="se-btn se-tooltip">'+e.icons.edit+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.edit+'</span></span></button><button type="button" data-command="delete" tabindex="-1" class="se-btn se-tooltip">'+e.icons.delete+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.remove+"</span></span></button></div></div>",n},open:function(){this.plugins.dialog.open.call(this,"math","math"===this.currentControllerName)},managedTags:function(){return{className:"katex",method:function(e){if(!e.getAttribute("data-exp")||!this.options.katex)return;const t=this._d.createRange().createContextualFragment(this.plugins.math._renderer.call(this,this.util.HTMLDecoder(e.getAttribute("data-exp"))));e.innerHTML=t.querySelector(".katex").innerHTML}}},_renderer:function(e){let t="";try{this.util.removeClass(this.context.math.focusElement,"se-error"),t=this.options.katex.src.renderToString(e,{throwOnError:!0,displayMode:!0})}catch(e){this.util.addClass(this.context.math.focusElement,"se-error"),t='<span class="se-math-katex-error">Katex syntax error. (Refer <a href="https://katex.org/docs/supported.html" target="_blank">KaTeX</a>)</span>',console.warn("[SUNEDITOR.math.Katex.error] ",e)}return t},_renderMathExp:function(e,t){e.previewElement.innerHTML=this.plugins.math._renderer.call(this,t.target.value)},submit:function(e){this.showLoading(),e.preventDefault(),e.stopPropagation();const t=function(){if(0===this.context.math.focusElement.value.trim().length)return!1;const e=this.context.math,t=e.focusElement.value,n=e.previewElement.querySelector(".katex");if(!n)return!1;if(n.className="__se__katex "+n.className,n.setAttribute("contenteditable",!1),n.setAttribute("data-exp",this.util.HTMLEncoder(t)),n.setAttribute("data-font-size",e.fontSizeElement.value),n.style.fontSize=e.fontSizeElement.value,this.context.dialog.updateModal){const t=this.util.getParentElement(e._mathExp,".katex");t.parentNode.replaceChild(n,t),this.setRange(n,0,n,1)}else{const e=this.getSelectedElements();if(e.length>1){const t=this.util.createElement(e[0].nodeName);if(t.appendChild(n),!this.insertNode(t,null,!0))return!1}else if(!this.insertNode(n,null,!0))return!1;const t=this.util.createTextNode(this.util.zeroWidthSpace);n.parentNode.insertBefore(t,n.nextSibling),this.setRange(n,0,n,1)}return e.focusElement.value="",e.fontSizeElement.value="1em",e.previewElement.style.fontSize="1em",e.previewElement.innerHTML="",!0}.bind(this);try{t()&&(this.plugins.dialog.close.call(this),this.history.push(!1))}catch(e){this.plugins.dialog.close.call(this)}finally{this.closeLoading()}return!1},active:function(e){if(e){if(e.getAttribute("data-exp"))return this.controllerArray.indexOf(this.context.math.mathController)<0&&(this.setRange(e,0,e,1),this.plugins.math.call_controller.call(this,e)),!0}else this.controllerArray.indexOf(this.context.math.mathController)>-1&&this.controllersOff();return!1},on:function(e){if(e){const e=this.context.math;if(e._mathExp){const t=this.util.HTMLDecoder(e._mathExp.getAttribute("data-exp")),n=e._mathExp.getAttribute("data-font-size")||"1em";this.context.dialog.updateModal=!0,e.focusElement.value=t,e.fontSizeElement.value=n,e.previewElement.innerHTML=this.plugins.math._renderer.call(this,t),e.previewElement.style.fontSize=n}}else this.plugins.math.init.call(this)},call_controller:function(e){this.context.math._mathExp=e;const t=this.context.math.mathController;this.setControllerPosition(t,e,"bottom",{left:0,top:0}),this.controllersOn(t,e,"math")},onClick_mathController:function(e){e.stopPropagation();const t=e.target.getAttribute("data-command")||e.target.parentNode.getAttribute("data-command");t&&(e.preventDefault(),/update/.test(t)?(this.context.math.focusElement.value=this.util.HTMLDecoder(this.context.math._mathExp.getAttribute("data-exp")),this.plugins.dialog.open.call(this,"math",!0)):(this.util.removeItem(this.context.math._mathExp),this.context.math._mathExp=null,this.focus(),this.history.push(!1)),this.controllersOff())},init:function(){const e=this.context.math;e.mathController.style.display="none",e._mathExp=null,e.focusElement.value="",e.previewElement.innerHTML=""}},C=n("JhlZ"),x=n.n(C),E={blockquote:{name:"blockquote",display:"command",add:function(e,t){e.context.blockquote={targetButton:t,tag:e.util.createElement("BLOCKQUOTE")}},active:function(e){if(e){if(/blockquote/i.test(e.nodeName))return this.util.addClass(this.context.blockquote.targetButton,"active"),!0}else this.util.removeClass(this.context.blockquote.targetButton,"active");return!1},action:function(){const e=this.util.getParentElement(this.getSelectionNode(),"blockquote");e?this.detachRangeFormatElement(e,null,null,!1,!1):this.applyRangeFormatElement(this.context.blockquote.tag.cloneNode(!1))}},align:{name:"align",display:"submenu",add:function(e,t){const n=e.icons,i=e.context;i.align={targetButton:t,_itemMenu:null,_alignList:null,currentAlign:"",defaultDir:e.options.rtl?"right":"left",icons:{justify:n.align_justify,left:n.align_left,right:n.align_right,center:n.align_center}};let o=this.setSubmenu(e),l=i.align._itemMenu=o.querySelector("ul");l.addEventListener("click",this.pickup.bind(e)),i.align._alignList=l.querySelectorAll("li button"),e.initMenuTarget(this.name,t,o),o=null,l=null},setSubmenu:function(e){const t=e.lang,n=e.icons,i=e.util.createElement("DIV"),o=e.options.alignItems;let l="";for(let e,i,s=0;s<o.length;s++)e=o[s],i=t.toolbar["align"+e.charAt(0).toUpperCase()+e.slice(1)],l+='<li><button type="button" class="se-btn-list se-btn-align" data-value="'+e+'" title="'+i+'" aria-label="'+i+'"><span class="se-list-icon">'+n["align_"+e]+"</span>"+i+"</button></li>";return i.className="se-submenu se-list-layer se-list-align",i.innerHTML='<div class="se-list-inner"><ul class="se-list-basic">'+l+"</ul></div>",i},active:function(e){const t=this.context.align,n=t.targetButton,i=n.firstElementChild;if(e){if(this.util.isFormatElement(e)){const o=e.style.textAlign;if(o)return this.util.changeElement(i,t.icons[o]||t.icons[t.defaultDir]),n.setAttribute("data-focus",o),!0}}else this.util.changeElement(i,t.icons[t.defaultDir]),n.removeAttribute("data-focus");return!1},on:function(){const e=this.context.align,t=e._alignList,n=e.targetButton.getAttribute("data-focus")||e.defaultDir;if(n!==e.currentAlign){for(let e=0,i=t.length;e<i;e++)n===t[e].getAttribute("data-value")?this.util.addClass(t[e],"active"):this.util.removeClass(t[e],"active");e.currentAlign=n}},exchangeDir:function(){const e=this.options.rtl?"right":"left";if(!this.context.align||this.context.align.defaultDir===e)return;this.context.align.defaultDir=e;let t=this.context.align._itemMenu,n=t.querySelector('[data-value="left"]'),i=t.querySelector('[data-value="right"]');if(n&&i){const e=n.parentElement,t=i.parentElement;e.appendChild(i),t.appendChild(n)}},pickup:function(e){e.preventDefault(),e.stopPropagation();let t=e.target,n=null;for(;!n&&!/UL/i.test(t.tagName);)n=t.getAttribute("data-value"),t=t.parentNode;if(!n)return;const i=this.context.align.defaultDir,o=this.getSelectedElements();for(let e=0,t=o.length;e<t;e++)this.util.setStyle(o[e],"textAlign",n===i?"":n);this.effectNode=null,this.submenuOff(),this.focus(),this.history.push(!1)}},font:{name:"font",display:"submenu",add:function(e,t){const n=e.context;n.font={targetText:t.querySelector(".txt"),targetTooltip:t.parentNode.querySelector(".se-tooltip-text"),_fontList:null,currentFont:""};let i=this.setSubmenu(e);i.querySelector(".se-list-inner").addEventListener("click",this.pickup.bind(e)),n.font._fontList=i.querySelectorAll("ul li button"),e.initMenuTarget(this.name,t,i),i=null},setSubmenu:function(e){const t=e.lang,n=e.util.createElement("DIV");let i,o,l,s;n.className="se-submenu se-list-layer se-list-font-family";let r=e.options.font,a='<div class="se-list-inner"><ul class="se-list-basic"><li><button type="button" class="default_value se-btn-list" title="'+t.toolbar.default+'" aria-label="'+t.toolbar.default+'">('+t.toolbar.default+")</button></li>";for(l=0,s=r.length;l<s;l++)i=r[l],o=i.split(",")[0],a+='<li><button type="button" class="se-btn-list" data-value="'+i+'" data-txt="'+o+'" title="'+o+'" aria-label="'+o+'" style="font-family:'+i+';">'+o+"</button></li>";return a+="</ul></div>",n.innerHTML=a,n},active:function(e){const t=this.context.font.targetText,n=this.context.font.targetTooltip;if(e){if(e.style&&e.style.fontFamily.length>0){const i=e.style.fontFamily.replace(/["']/g,"");return this.util.changeTxt(t,i),this.util.changeTxt(n,this.lang.toolbar.font+" ("+i+")"),!0}}else{const e=this.hasFocus?this.wwComputedStyle.fontFamily:this.lang.toolbar.font;this.util.changeTxt(t,e),this.util.changeTxt(n,this.hasFocus?this.lang.toolbar.font+(e?" ("+e+")":""):e)}return!1},on:function(){const e=this.context.font,t=e._fontList,n=e.targetText.textContent;if(n!==e.currentFont){for(let e=0,i=t.length;e<i;e++)n===t[e].getAttribute("data-value")?this.util.addClass(t[e],"active"):this.util.removeClass(t[e],"active");e.currentFont=n}},pickup:function(e){if(!/^BUTTON$/i.test(e.target.tagName))return!1;e.preventDefault(),e.stopPropagation();const t=e.target.getAttribute("data-value");if(t){const e=this.util.createElement("SPAN");e.style.fontFamily=t,this.nodeChange(e,["font-family"],null,null)}else this.nodeChange(null,["font-family"],["span"],!0);this.submenuOff()}},fontSize:{name:"fontSize",display:"submenu",add:function(e,t){const n=e.context;n.fontSize={targetText:t.querySelector(".txt"),_sizeList:null,currentSize:""};let i=this.setSubmenu(e),o=i.querySelector("ul");o.addEventListener("click",this.pickup.bind(e)),n.fontSize._sizeList=o.querySelectorAll("li button"),e.initMenuTarget(this.name,t,i),i=null,o=null},setSubmenu:function(e){const t=e.options,n=e.lang,i=e.util.createElement("DIV");i.className="se-submenu se-list-layer se-list-font-size";const o=t.fontSize?t.fontSize:[8,9,10,11,12,14,16,18,20,22,24,26,28,36,48,72];let l='<div class="se-list-inner"><ul class="se-list-basic"><li><button type="button" class="default_value se-btn-list" title="'+n.toolbar.default+'" aria-label="'+n.toolbar.default+'">('+n.toolbar.default+")</button></li>";for(let e,n=0,i=t.fontSizeUnit,s=o.length;n<s;n++)e=o[n],l+='<li><button type="button" class="se-btn-list" data-value="'+e+i+'" title="'+e+i+'" aria-label="'+e+i+'" style="font-size:'+e+i+';">'+e+"</button></li>";return l+="</ul></div>",i.innerHTML=l,i},active:function(e){if(e){if(e.style&&e.style.fontSize.length>0)return this.util.changeTxt(this.context.fontSize.targetText,e.style.fontSize),!0}else this.util.changeTxt(this.context.fontSize.targetText,this.hasFocus?this.options.__defaultFontSize||this.wwComputedStyle.fontSize:this.lang.toolbar.fontSize);return!1},on:function(){const e=this.context.fontSize,t=e._sizeList,n=e.targetText.textContent;if(n!==e.currentSize){for(let e=0,i=t.length;e<i;e++)n===t[e].getAttribute("data-value")?this.util.addClass(t[e],"active"):this.util.removeClass(t[e],"active");e.currentSize=n}},pickup:function(e){if(!/^BUTTON$/i.test(e.target.tagName))return!1;e.preventDefault(),e.stopPropagation();const t=e.target.getAttribute("data-value");if(t){const e=this.util.createElement("SPAN");e.style.fontSize=t,this.nodeChange(e,["font-size"],null,null)}else this.nodeChange(null,["font-size"],["span"],!0);this.submenuOff()}},fontColor:o,hiliteColor:l,horizontalRule:{name:"horizontalRule",display:"submenu",add:function(e,t){e.context.horizontalRule={currentHR:null};let n=this.setSubmenu(e);n.querySelector("ul").addEventListener("click",this.horizontalRulePick.bind(e)),e.initMenuTarget(this.name,t,n),n=null},setSubmenu:function(e){const t=e.lang,n=e.util.createElement("DIV"),i=e.options.hrItems||[{name:t.toolbar.hr_solid,class:"__se__solid"},{name:t.toolbar.hr_dashed,class:"__se__dashed"},{name:t.toolbar.hr_dotted,class:"__se__dotted"}];let o="";for(let e=0,t=i.length;e<t;e++)o+='<li><button type="button" class="se-btn-list btn_line" data-command="horizontalRule" data-value="'+i[e].class+'" title="'+i[e].name+'" aria-label="'+i[e].name+'"><hr'+(i[e].class?' class="'+i[e].class+'"':"")+(i[e].style?' style="'+i[e].style+'"':"")+"/></button></li>";return n.className="se-submenu se-list-layer se-list-line",n.innerHTML='<div class="se-list-inner"><ul class="se-list-basic">'+o+"</ul></div>",n},active:function(e){if(e){if(/HR/i.test(e.nodeName))return this.context.horizontalRule.currentHR=e,this.util.hasClass(e,"on")||(this.util.addClass(e,"on"),this.controllersOn("hr",this.util.removeClass.bind(this.util,e,"on"))),!0}else this.util.hasClass(this.context.horizontalRule.currentHR,"on")&&this.controllersOff();return!1},appendHr:function(e){return this.focus(),this.insertComponent(e.cloneNode(!1),!1,!0,!1)},horizontalRulePick:function(e){e.preventDefault(),e.stopPropagation();let t=e.target,n=t.getAttribute("data-command");for(;!n&&!/UL/i.test(t.tagName);)t=t.parentNode,n=t.getAttribute("data-command");if(!n)return;const i=this.plugins.horizontalRule.appendHr.call(this,t.firstElementChild);i&&(this.setRange(i,0,i,0),this.submenuOff())}},list:{name:"list",display:"submenu",add:function(e,t){const n=e.context;n.list={targetButton:t,_list:null,currentList:"",icons:{bullets:e.icons.list_bullets,number:e.icons.list_number}};let i=this.setSubmenu(e),o=i.querySelector("ul");o.addEventListener("click",this.pickup.bind(e)),n.list._list=o.querySelectorAll("li button"),e.initMenuTarget(this.name,t,i),i=null,o=null},setSubmenu:function(e){const t=e.lang,n=e.util.createElement("DIV");return n.className="se-submenu se-list-layer",n.innerHTML='<div class="se-list-inner"><ul class="se-list-basic"><li><button type="button" class="se-btn-list se-tooltip" data-command="OL" title="'+t.toolbar.orderList+'" aria-label="'+t.toolbar.orderList+'">'+e.icons.list_number+'</button></li><li><button type="button" class="se-btn-list se-tooltip" data-command="UL" title="'+t.toolbar.unorderList+'" aria-label="'+t.toolbar.unorderList+'">'+e.icons.list_bullets+"</button></li></ul></div>",n},active:function(e){const t=this.context.list.targetButton,n=t.firstElementChild,i=this.util;if(i.isList(e)){const o=e.nodeName;return t.setAttribute("data-focus",o),i.addClass(t,"active"),/UL/i.test(o)?i.changeElement(n,this.context.list.icons.bullets):i.changeElement(n,this.context.list.icons.number),!0}return t.removeAttribute("data-focus"),i.changeElement(n,this.context.list.icons.number),i.removeClass(t,"active"),!1},on:function(){const e=this.context.list,t=e._list,n=e.targetButton.getAttribute("data-focus")||"";if(n!==e.currentList){for(let e=0,i=t.length;e<i;e++)n===t[e].getAttribute("data-command")?this.util.addClass(t[e],"active"):this.util.removeClass(t[e],"active");e.currentList=n}},editList:function(e,t,n){let i=this.getRange(),o=t||this.getSelectedElementsAndComponents(!1);if(0===o.length){if(t)return;if(i=this.getRange_addLine(i,null),o=this.getSelectedElementsAndComponents(!1),0===o.length)return}const l=this.util;l.sortByDepth(o,!0);let s=o[0],r=o[o.length-1],a=!l.isListCell(s)&&!l.isComponent(s)||s.previousElementSibling?s.previousElementSibling:s.parentNode.previousElementSibling,c=!l.isListCell(r)&&!l.isComponent(r)||r.nextElementSibling?r.nextElementSibling:r.parentNode.nextElementSibling;const u={sc:i.startContainer,so:i.startContainer===i.endContainer&&l.onlyZeroWidthSpace(i.startContainer)&&0===i.startOffset&&1===i.endOffset?i.endOffset:i.startOffset,ec:i.endContainer,eo:i.endOffset};let d=!0;for(let e=0,t=o.length;e<t;e++)if(!l.isList(l.getRangeFormatElement(o[e],function(t){return this.getRangeFormatElement(t)&&t!==o[e]}.bind(l)))){d=!1;break}if(!d||a&&s.tagName===a.tagName&&e===a.tagName.toUpperCase()||c&&r.tagName===c.tagName&&e===c.tagName.toUpperCase()){const t=a?a.parentNode:a,n=c?c.parentNode:c;a=t&&!l.isWysiwygDiv(t)&&t.nodeName===e?t:a,c=n&&!l.isWysiwygDiv(n)&&n.nodeName===e?n:c;const i=a&&a.tagName===e,s=c&&c.tagName===e;let r=i?a:l.createElement(e),d=null,h=null,p=null,f=null;const g=function(e){return!this.isComponent(e)&&!this.isList(e)}.bind(l);for(let t,n,s,a,c,f,m,v,y,b=0,_=o.length;b<_;b++)if(n=o[b],0!==n.childNodes.length||l._isIgnoreNodeChange(n)){if(a=o[b+1],c=n.parentNode,f=a?a.parentNode:null,s=l.isListCell(n),y=l.isRangeFormatElement(c)?c:null,m=s&&!l.isWysiwygDiv(c)?c.parentNode:c,v=s&&!l.isWysiwygDiv(c)?!a||l.isListCell(m)?c:c.nextSibling:n.nextSibling,t=l.createElement("LI"),l.copyFormatAttributes(t,n),0===b&&u.sc===n&&(u.sc=t),b===_-1&&u.ec===n&&(u.ec=t),l.isComponent(n)){const e=/^HR$/i.test(n.nodeName);e||(t.innerHTML="<br>"),t.innerHTML+=n.outerHTML,e&&(t.innerHTML+="<br>")}else{const e=n.childNodes;for(;e[0];)t.appendChild(e[0])}r.appendChild(t),a||(h=r),a&&m===f&&!l.isRangeFormatElement(v)||(d||(d=r),i&&a&&m===f||a&&l.isList(f)&&f===c||r.parentNode!==m&&m.insertBefore(r,v)),l.removeItem(n),i&&null===p&&(p=r.children.length-1),a&&(l.getRangeFormatElement(f,g)!==l.getRangeFormatElement(c,g)||l.isList(f)&&l.isList(c)&&l.getElementDepth(f)!==l.getElementDepth(c))&&(r=l.createElement(e)),y&&0===y.children.length&&l.removeItem(y)}else l.removeItem(n);p&&(d=d.children[p]),s&&(f=r.children.length-1,r.innerHTML+=c.innerHTML,h=r.children[f],l.removeItem(c))}else{if(n)for(let e=0,t=o.length;e<t;e++)for(let n=e-1;n>=0;n--)if(o[n].contains(o[e])){o.splice(e,1),e--,t--;break}const t=l.getRangeFormatElement(s),i=t&&t.tagName===e;let r,a;const c=function(e){return!this.isComponent(e)}.bind(l);i||(a=l.createElement(e));for(let t,s,u=0,d=o.length;u<d;u++)s=l.getRangeFormatElement(o[u],c),s&&l.isList(s)&&(t?t!==s?(n&&l.isListCell(s.parentNode)?this.plugins.list._detachNested.call(this,r.f):this.detachRangeFormatElement(r.f[0].parentNode,r.f,a,!1,!0),s=o[u].parentNode,i||(a=l.createElement(e)),t=s,r={r:t,f:[l.getParentElement(o[u],"LI")]}):r.f.push(l.getParentElement(o[u],"LI")):(t=s,r={r:t,f:[l.getParentElement(o[u],"LI")]}),u===d-1&&(n&&l.isListCell(s.parentNode)?this.plugins.list._detachNested.call(this,r.f):this.detachRangeFormatElement(r.f[0].parentNode,r.f,a,!1,!0)))}return this.effectNode=null,u},_detachNested:function(e){const t=e[0],n=e[e.length-1],i=n.nextElementSibling,o=t.parentNode,l=o.parentNode.nextElementSibling,s=o.parentNode.parentNode;for(let t=0,n=e.length;t<n;t++)s.insertBefore(e[t],l);if(i&&o.children.length>0){const e=o.cloneNode(!1),t=o.childNodes,l=this.util.getPositionIndex(i);for(;t[l];)e.appendChild(t[l]);n.appendChild(e)}0===o.children.length&&this.util.removeItem(o),this.util.mergeSameTags(s);const r=this.util.getEdgeChildNodes(t,n);return{cc:t.parentNode,sc:r.sc,ec:r.ec}},editInsideList:function(e,t){const n=(t=t||this.getSelectedElements().filter(function(e){return this.isListCell(e)}.bind(this.util))).length;if(0===n||!e&&!this.util.isListCell(t[0].previousElementSibling)&&!this.util.isListCell(t[n-1].nextElementSibling))return{sc:t[0],so:0,ec:t[n-1],eo:1};let i=t[0].parentNode,o=t[n-1],l=null;if(e){if(i!==o.parentNode&&this.util.isList(o.parentNode.parentNode)&&o.nextElementSibling)for(o=o.nextElementSibling;o;)t.push(o),o=o.nextElementSibling;l=this.plugins.list.editList.call(this,i.nodeName.toUpperCase(),t,!0)}else{let e=this.util.createElement(i.nodeName),s=t[0].previousElementSibling,r=o.nextElementSibling;const a={s:null,e:null,sl:i,el:i};for(let o,l=0,c=n;l<c;l++)o=t[l],o.parentNode!==i&&(this.plugins.list._insiedList.call(this,i,e,s,r,a),i=o.parentNode,e=this.util.createElement(i.nodeName)),s=o.previousElementSibling,r=o.nextElementSibling,e.appendChild(o);this.plugins.list._insiedList.call(this,i,e,s,r,a);const c=this.util.getNodeFromPath(a.s,a.sl),u=this.util.getNodeFromPath(a.e,a.el);l={sc:c,so:0,ec:u,eo:u.textContent.length}}return l},_insiedList:function(e,t,n,i,o){let l=!1;if(n&&t.tagName===n.tagName){const e=t.children;for(;e[0];)n.appendChild(e[0]);t=n,l=!0}if(i&&t.tagName===i.tagName){const e=i.children;for(;e[0];)t.appendChild(e[0]);const n=i.nextElementSibling;i.parentNode.removeChild(i),i=n}if(!l){this.util.isListCell(n)&&(e=n,i=null),e.insertBefore(t,i),o.s||(o.s=this.util.getNodePath(t.firstElementChild.firstChild,e,null),o.sl=e);const l=e.contains(o.sl)?this.util.getNodePath(o.sl,e):null;o.e=this.util.getNodePath(t.lastElementChild.firstChild,e,null),o.el=e,this.util.mergeSameTags(e,[o.s,o.e,l],!1),this.util.mergeNestedTags(e),l&&(o.sl=this.util.getNodeFromPath(l,e))}return t},pickup:function(e){e.preventDefault(),e.stopPropagation();let t=e.target,n="";for(;!n&&!/^UL$/i.test(t.tagName);)n=t.getAttribute("data-command"),t=t.parentNode;if(!n)return;const i=this.plugins.list.editList.call(this,n,null,!1);i&&this.setRange(i.sc,i.so,i.ec,i.eo),this.submenuOff(),this.history.push(!1)}},table:{name:"table",display:"submenu",add:function(e,t){const n=e.context;let i=n.table={_element:null,_tdElement:null,_trElement:null,_trElements:null,_tableXY:[],_maxWidth:!0,_fixedColumn:!1,_rtl:e.options.rtl,cellControllerTop:"top"===e.options.tableCellControllerPosition,resizeText:null,headerButton:null,mergeButton:null,splitButton:null,splitMenu:null,maxText:e.lang.controller.maxSize,minText:e.lang.controller.minSize,_physical_cellCnt:0,_logical_cellCnt:0,_rowCnt:0,_rowIndex:0,_physical_cellIndex:0,_logical_cellIndex:0,_current_colSpan:0,_current_rowSpan:0,icons:{expansion:e.icons.expansion,reduction:e.icons.reduction}},o=this.setSubmenu(e),l=o.querySelector(".se-controller-table-picker");i.tableHighlight=o.querySelector(".se-table-size-highlighted"),i.tableUnHighlight=o.querySelector(".se-table-size-unhighlighted"),i.tableDisplay=o.querySelector(".se-table-size-display"),e.options.rtl&&(i.tableHighlight.style.left="167px");let s=this.setController_table(e);i.tableController=s,i.resizeButton=s.querySelector("._se_table_resize"),i.resizeText=s.querySelector("._se_table_resize > span > span"),i.columnFixedButton=s.querySelector("._se_table_fixed_column"),i.headerButton=s.querySelector("._se_table_header");let r=this.setController_tableEditor(e,i.cellControllerTop);i.resizeDiv=r,i.splitMenu=r.querySelector(".se-btn-group-sub"),i.mergeButton=r.querySelector("._se_table_merge_button"),i.splitButton=r.querySelector("._se_table_split_button"),i.insertRowAboveButton=r.querySelector("._se_table_insert_row_a"),i.insertRowBelowButton=r.querySelector("._se_table_insert_row_b"),l.addEventListener("mousemove",this.onMouseMove_tablePicker.bind(e,i)),l.addEventListener("click",this.appendTable.bind(e)),r.addEventListener("click",this.onClick_tableController.bind(e)),s.addEventListener("click",this.onClick_tableController.bind(e)),e.initMenuTarget(this.name,t,o),n.element.relative.appendChild(r),n.element.relative.appendChild(s),o=null,l=null,r=null,s=null,i=null},setSubmenu:function(e){const t=e.util.createElement("DIV");return t.className="se-submenu se-selector-table",t.innerHTML='<div class="se-table-size"><div class="se-table-size-picker se-controller-table-picker"></div><div class="se-table-size-highlighted"></div><div class="se-table-size-unhighlighted"></div></div><div class="se-table-size-display">1 x 1</div>',t},setController_table:function(e){const t=e.lang,n=e.icons,i=e.util.createElement("DIV");return i.className="se-controller se-controller-table",i.innerHTML='<div><div class="se-btn-group"><button type="button" data-command="resize" class="se-btn se-tooltip _se_table_resize">'+n.expansion+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.maxSize+'</span></span></button><button type="button" data-command="layout" class="se-btn se-tooltip _se_table_fixed_column">'+n.fixed_column_width+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.fixedColumnWidth+'</span></span></button><button type="button" data-command="header" class="se-btn se-tooltip _se_table_header">'+n.table_header+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.tableHeader+'</span></span></button><button type="button" data-command="remove" class="se-btn se-tooltip">'+n.delete+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.remove+"</span></span></button></div></div>",i},setController_tableEditor:function(e,t){const n=e.lang,i=e.icons,o=e.util.createElement("DIV");return o.className="se-controller se-controller-table-cell",o.innerHTML=(t?"":'<div class="se-arrow se-arrow-up"></div>')+'<div class="se-btn-group"><button type="button" data-command="insert" data-value="row" data-option="up" class="se-btn se-tooltip _se_table_insert_row_a">'+i.insert_row_above+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+n.controller.insertRowAbove+'</span></span></button><button type="button" data-command="insert" data-value="row" data-option="down" class="se-btn se-tooltip _se_table_insert_row_b">'+i.insert_row_below+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+n.controller.insertRowBelow+'</span></span></button><button type="button" data-command="delete" data-value="row" class="se-btn se-tooltip">'+i.delete_row+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+n.controller.deleteRow+'</span></span></button><button type="button" data-command="merge" class="_se_table_merge_button se-btn se-tooltip" disabled>'+i.merge_cell+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+n.controller.mergeCells+'</span></span></button></div><div class="se-btn-group" style="padding-top: 0;"><button type="button" data-command="insert" data-value="cell" data-option="left" class="se-btn se-tooltip">'+i.insert_column_left+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+n.controller.insertColumnBefore+'</span></span></button><button type="button" data-command="insert" data-value="cell" data-option="right" class="se-btn se-tooltip">'+i.insert_column_right+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+n.controller.insertColumnAfter+'</span></span></button><button type="button" data-command="delete" data-value="cell" class="se-btn se-tooltip">'+i.delete_column+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+n.controller.deleteColumn+'</span></span></button><button type="button" data-command="onsplit" class="_se_table_split_button se-btn se-tooltip">'+i.split_cell+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+n.controller.splitCells+'</span></span></button><div class="se-btn-group-sub sun-editor-common se-list-layer se-table-split"><div class="se-list-inner"><ul class="se-list-basic"><li class="se-btn-list" data-command="split" data-value="vertical" style="line-height:32px;" title="'+n.controller.VerticalSplit+'" aria-label="'+n.controller.VerticalSplit+'">'+n.controller.VerticalSplit+'</li><li class="se-btn-list" data-command="split" data-value="horizontal" style="line-height:32px;" title="'+n.controller.HorizontalSplit+'" aria-label="'+n.controller.HorizontalSplit+'">'+n.controller.HorizontalSplit+"</li></ul></div></div></div>",o},appendTable:function(){const e=this.util.createElement("TABLE"),t=this.plugins.table.createCells,n=this.context.table._tableXY[0];let i=this.context.table._tableXY[1],o="<tbody>";for(;i>0;)o+="<tr>"+t.call(this,"td",n)+"</tr>",--i;o+="</tbody>",e.innerHTML=o;if(this.insertComponent(e,!1,!0,!1)){const t=e.querySelector("td div");this.setRange(t,0,t,0),this.plugins.table.reset_table_picker.call(this)}},createCells:function(e,t,n){if(e=e.toLowerCase(),n){const t=this.util.createElement(e);return t.innerHTML="<div><br></div>",t}{let n="";for(;t>0;)n+="<"+e+"><div><br></div></"+e+">",t--;return n}},onMouseMove_tablePicker:function(e,t){t.stopPropagation();let n=this._w.Math.ceil(t.offsetX/18),i=this._w.Math.ceil(t.offsetY/18);n=n<1?1:n,i=i<1?1:i,e._rtl&&(e.tableHighlight.style.left=18*n-13+"px",n=11-n),e.tableHighlight.style.width=n+"em",e.tableHighlight.style.height=i+"em",this.util.changeTxt(e.tableDisplay,n+" x "+i),e._tableXY=[n,i]},reset_table_picker:function(){if(!this.context.table.tableHighlight)return;const e=this.context.table.tableHighlight.style,t=this.context.table.tableUnHighlight.style;e.width="1em",e.height="1em",t.width="10em",t.height="10em",this.util.changeTxt(this.context.table.tableDisplay,"1 x 1"),this.submenuOff()},init:function(){const e=this.context.table,t=this.plugins.table;if(t._removeEvents.call(this),t._selectedTable){const e=t._selectedTable.querySelectorAll(".se-table-selected-cell");for(let t=0,n=e.length;t<n;t++)this.util.removeClass(e[t],"se-table-selected-cell")}t._toggleEditor.call(this,!0),e._element=null,e._tdElement=null,e._trElement=null,e._trElements=null,e._tableXY=[],e._maxWidth=!0,e._fixedColumn=!1,e._physical_cellCnt=0,e._logical_cellCnt=0,e._rowCnt=0,e._rowIndex=0,e._physical_cellIndex=0,e._logical_cellIndex=0,e._current_colSpan=0,e._current_rowSpan=0,t._shift=!1,t._selectedCells=null,t._selectedTable=null,t._ref=null,t._fixedCell=null,t._selectedCell=null,t._fixedCellName=null},call_controller_tableEdit:function(e){const t=this.plugins.table,n=this.context.table;if(!this.getSelection().isCollapsed&&!t._selectedCell)return this.controllersOff(),void this.util.removeClass(e,"se-table-selected-cell");const i=n._element||this.plugins.table._selectedTable||this.util.getParentElement(e,"TABLE");n._maxWidth=this.util.hasClass(i,"se-table-size-100")||"100%"===i.style.width||!i.style.width&&!this.util.hasClass(i,"se-table-size-auto"),n._fixedColumn=this.util.hasClass(i,"se-table-layout-fixed")||"fixed"===i.style.tableLayout,t.setTableStyle.call(this,n._maxWidth?"width|column":"width"),t.setPositionControllerTop.call(this,i),t.setPositionControllerDiv.call(this,e,t._shift),t._shift||this.controllersOn(n.resizeDiv,n.tableController,t.init.bind(this),e,"table")},setPositionControllerTop:function(e){this.setControllerPosition(this.context.table.tableController,e,"top",{left:0,top:0})},setPositionControllerDiv:function(e,t){const n=this.context.table,i=n.resizeDiv;this.plugins.table.setCellInfo.call(this,e,t),n.cellControllerTop?this.setControllerPosition(i,n._element,"top",{left:n.tableController.offsetWidth,top:0}):this.setControllerPosition(i,e,"bottom",{left:0,top:0})},setCellInfo:function(e,t){const n=this.context.table,i=n._element=this.plugins.table._selectedTable||this.util.getParentElement(e,"TABLE");if(/THEAD/i.test(i.firstElementChild.nodeName)?this.util.addClass(n.headerButton,"active"):this.util.removeClass(n.headerButton,"active"),t||0===n._physical_cellCnt){n._tdElement!==e&&(n._tdElement=e,n._trElement=e.parentNode);const t=n._trElements=i.rows,o=e.cellIndex;let l=0;for(let e=0,n=t[0].cells,i=t[0].cells.length;e<i;e++)l+=n[e].colSpan;const s=n._rowIndex=n._trElement.rowIndex;n._rowCnt=t.length,n._physical_cellCnt=n._trElement.cells.length,n._logical_cellCnt=l,n._physical_cellIndex=o,n._current_colSpan=n._tdElement.colSpan-1,n._current_rowSpan,n._trElement.cells[o].rowSpan;let r=[],a=[];for(let e,i,l=0;l<=s;l++){e=t[l].cells,i=0;for(let t,c,u,d,h=0,p=e.length;h<p;h++){if(t=e[h],c=t.colSpan-1,u=t.rowSpan-1,d=h+i,a.length>0)for(let e,t=0;t<a.length;t++)e=a[t],e.row>l||(d>=e.index?(i+=e.cs,d+=e.cs,e.rs-=1,e.row=l+1,e.rs<1&&(a.splice(t,1),t--)):h===p-1&&(e.rs-=1,e.row=l+1,e.rs<1&&(a.splice(t,1),t--)));if(l===s&&h===o){n._logical_cellIndex=d;break}u>0&&r.push({index:d,cs:c+1,rs:u,row:-1}),i+=c}a=a.concat(r).sort((function(e,t){return e.index-t.index})),r=[]}r=null,a=null}},editTable:function(e,t){const n=this.plugins.table,i=this.context.table,o=i._element,l="row"===e;if(l){const e=i._trElement.parentNode;if(/^THEAD$/i.test(e.nodeName)){if("up"===t)return;if(!e.nextElementSibling||!/^TBODY$/i.test(e.nextElementSibling.nodeName))return void(o.innerHTML+="<tbody><tr>"+n.createCells.call(this,"td",i._logical_cellCnt,!1)+"</tr></tbody>")}}if(n._ref){const e=i._tdElement,o=n._selectedCells;if(l)if(t)n.setCellInfo.call(this,"up"===t?o[0]:o[o.length-1],!0),n.editRow.call(this,t,e);else{let e=o[0].parentNode;const i=[o[0]];for(let t,n=1,l=o.length;n<l;n++)t=o[n],e!==t.parentNode&&(i.push(t),e=t.parentNode);for(let e=0,o=i.length;e<o;e++)n.setCellInfo.call(this,i[e],!0),n.editRow.call(this,t)}else{const i=o[0].parentNode;if(t){let l=null;for(let e=0,t=o.length-1;e<t;e++)if(i!==o[e+1].parentNode){l=o[e];break}n.setCellInfo.call(this,"left"===t?o[0]:l||o[0],!0),n.editCell.call(this,t,e)}else{const e=[o[0]];for(let t,n=1,l=o.length;n<l&&(t=o[n],i===t.parentNode);n++)e.push(t);for(let i=0,o=e.length;i<o;i++)n.setCellInfo.call(this,e[i],!0),n.editCell.call(this,t)}}t||n.init.call(this)}else n[l?"editRow":"editCell"].call(this,t);if(!t){const e=o.children;for(let t=0;t<e.length;t++)0===e[t].children.length&&(this.util.removeItem(e[t]),t--);0===o.children.length&&this.util.removeItem(o)}},editRow:function(e,t){const n=this.context.table,i=!e,o="up"===e,l=n._rowIndex,s=i||o?l:l+n._current_rowSpan+1,r=i?-1:1,a=n._trElements;let c=n._logical_cellCnt;for(let e,t=0,n=l+(i?-1:0);t<=n;t++){if(e=a[t].cells,0===e.length)return;for(let n,i,o=0,l=e.length;o<l;o++)n=e[o].rowSpan,i=e[o].colSpan,n<2&&i<2||n+t>s&&s>t&&(e[o].rowSpan=n+r,c-=i)}if(i){const e=a[l+1];if(e){const t=[];let n=a[l].cells,i=0;for(let e,o,l=0,s=n.length;l<s;l++)e=n[l],o=l+i,i+=e.colSpan-1,e.rowSpan>1&&(e.rowSpan-=1,t.push({cell:e.cloneNode(!1),index:o}));if(t.length>0){let o=t.shift();n=e.cells,i=0;for(let l,s,r=0,a=n.length;r<a&&(l=n[r],s=r+i,i+=l.colSpan-1,!(s>=o.index)||(r--,i--,i+=o.cell.colSpan-1,e.insertBefore(o.cell,l),o=t.shift(),o));r++);if(o){e.appendChild(o.cell);for(let n=0,i=t.length;n<i;n++)e.appendChild(t[n].cell)}}}n._element.deleteRow(s)}else{n._element.insertRow(s).innerHTML=this.plugins.table.createCells.call(this,"td",c,!1)}i?this.controllersOff():this.plugins.table.setPositionControllerDiv.call(this,t||n._tdElement,!0)},editCell:function(e,t){const n=this.context.table,i=this.util,o=!e,l="left"===e,s=n._current_colSpan,r=o||l?n._logical_cellIndex:n._logical_cellIndex+s+1,a=n._trElements;let c=[],u=[],d=0;const h=[],p=[];for(let e,t,l,f,g,m,v=0,y=n._rowCnt;v<y;v++){e=a[v],t=r,g=!1,l=e.cells,m=0;for(let e,n,a,f,y=0,b=l.length;y<b&&(e=l[y],e);y++)if(n=e.rowSpan-1,a=e.colSpan-1,o){if(f=y+m,u.length>0){const e=!l[y+1];for(let t,n=0;n<u.length;n++)t=u[n],t.row>v||(f>=t.index?(m+=t.cs,f=y+m,t.rs-=1,t.row=v+1,t.rs<1&&(u.splice(n,1),n--)):e&&(t.rs-=1,t.row=v+1,t.rs<1&&(u.splice(n,1),n--)))}n>0&&c.push({rs:n,cs:a+1,index:f,row:-1}),f>=t&&f+a<=t+s?h.push(e):f<=t+s&&f+a>=t?e.colSpan-=i.getOverlapRangeAtIndex(r,r+s,f,f+a):n>0&&(f<t||f+a>t+s)&&p.push({cell:e,i:v,rs:v+n}),m+=a}else{if(y>=t)break;if(a>0){if(d<1&&a+y>=t){e.colSpan+=1,t=null,d=n+1;break}t-=a}if(!g){for(let e,n=0;n<u.length;n++)e=u[n],t-=e.cs,e.rs-=1,e.rs<1&&(u.splice(n,1),n--);g=!0}}if(u=u.concat(c).sort((function(e,t){return e.index-t.index})),c=[],!o){if(d>0){d-=1;continue}null!==t&&l.length>0&&(f=this.plugins.table.createCells.call(this,l[0].nodeName,0,!0),f=e.insertBefore(f,l[t]))}}if(o){let e,t;for(let n,o=0,l=h.length;o<l;o++)n=h[o].parentNode,i.removeItem(h[o]),0===n.cells.length&&(e||(e=i.getArrayIndex(a,n)),t=i.getArrayIndex(a,n),i.removeItem(n));for(let n,o=0,l=p.length;o<l;o++)n=p[o],n.cell.rowSpan=i.getOverlapRangeAtIndex(e,t,n.i,n.rs);this.controllersOff()}else this.plugins.table.setPositionControllerDiv.call(this,t||n._tdElement,!0)},_closeSplitMenu:null,openSplitMenu:function(){this.util.addClass(this.context.table.splitButton,"on"),this.context.table.splitMenu.style.display="inline-table",this.plugins.table._closeSplitMenu=function(){this.util.removeClass(this.context.table.splitButton,"on"),this.context.table.splitMenu.style.display="none",this.removeDocEvent("click",this.plugins.table._closeSplitMenu),this.plugins.table._closeSplitMenu=null}.bind(this),this.addDocEvent("click",this.plugins.table._closeSplitMenu)},splitCells:function(e){const t=this.util,n="vertical"===e,i=this.context.table,o=i._tdElement,l=i._trElements,s=i._trElement,r=i._logical_cellIndex,a=i._rowIndex,c=this.plugins.table.createCells.call(this,o.nodeName,0,!0);if(n){const e=o.colSpan;if(c.rowSpan=o.rowSpan,e>1)c.colSpan=this._w.Math.floor(e/2),o.colSpan=e-c.colSpan,s.insertBefore(c,o.nextElementSibling);else{let t=[],n=[];for(let s,a,c=0,u=i._rowCnt;c<u;c++){s=l[c].cells,a=0;for(let i,l,u,d,h=0,p=s.length;h<p;h++){if(i=s[h],l=i.colSpan-1,u=i.rowSpan-1,d=h+a,n.length>0)for(let e,t=0;t<n.length;t++)e=n[t],e.row>c||(d>=e.index?(a+=e.cs,d+=e.cs,e.rs-=1,e.row=c+1,e.rs<1&&(n.splice(t,1),t--)):h===p-1&&(e.rs-=1,e.row=c+1,e.rs<1&&(n.splice(t,1),t--)));if(d<=r&&u>0&&t.push({index:d,cs:l+1,rs:u,row:-1}),i!==o&&d<=r&&d+l>=r+e-1){i.colSpan+=1;break}if(d>r)break;a+=l}n=n.concat(t).sort((function(e,t){return e.index-t.index})),t=[]}s.insertBefore(c,o.nextElementSibling)}}else{const e=o.rowSpan;if(c.colSpan=o.colSpan,e>1){c.rowSpan=this._w.Math.floor(e/2);const n=e-c.rowSpan,i=[],a=t.getArrayIndex(l,s)+n;for(let e,t,n=0;n<a;n++){e=l[n].cells,t=0;for(let o,l,s,c=0,u=e.length;c<u&&(s=c+t,!(s>=r));c++)o=e[c],l=o.rowSpan-1,l>0&&l+n>=a&&s<r&&i.push({index:s,cs:o.colSpan}),t+=o.colSpan-1}const u=l[a],d=u.cells;let h=i.shift();for(let e,t,n,o,l=0,s=d.length,a=0;l<s;l++){if(n=l+a,e=d[l],t=e.colSpan-1,o=n+t+1,h&&o>=h.index&&(a+=h.cs,o+=h.cs,h=i.shift()),o>=r||l===s-1){u.insertBefore(c,e.nextElementSibling);break}a+=t}o.rowSpan=n}else{c.rowSpan=o.rowSpan;const e=t.createElement("TR");e.appendChild(c);for(let e,t=0;t<a;t++){if(e=l[t].cells,0===e.length)return;for(let n=0,i=e.length;n<i;n++)t+e[n].rowSpan-1>=a&&(e[n].rowSpan+=1)}const n=i._physical_cellIndex,r=s.cells;for(let e=0,t=r.length;e<t;e++)e!==n&&(r[e].rowSpan+=1);s.parentNode.insertBefore(e,s.nextElementSibling)}}this.focusEdge(o),this.plugins.table.setPositionControllerDiv.call(this,o,!0)},mergeCells:function(){const e=this.plugins.table,t=this.context.table,n=this.util,i=e._ref,o=e._selectedCells,l=o[0];let s=null,r=null,a=i.ce-i.cs+1,c=i.re-i.rs+1,u="",d=null;for(let e,t,i=1,l=o.length;i<l;i++){e=o[i],d!==e.parentNode&&(d=e.parentNode),t=e.children;for(let e=0,i=t.length;e<i;e++)n.isFormatElement(t[e])&&n.onlyZeroWidthSpace(t[e].textContent)&&n.removeItem(t[e]);u+=e.innerHTML,n.removeItem(e),0===d.cells.length&&(s?r=d:s=d,c-=1)}if(s){const e=t._trElements,i=n.getArrayIndex(e,s),o=n.getArrayIndex(e,r||s),l=[];for(let t,s=0;s<=o;s++)if(t=e[s].cells,0!==t.length)for(let e,l,r=0,a=t.length;r<a;r++)e=t[r],l=e.rowSpan-1,l>0&&s+l>=i&&(e.rowSpan-=n.getOverlapRangeAtIndex(i,o,s,s+l));else l.push(e[s]);for(let e=0,t=l.length;e<t;e++)n.removeItem(l[e])}l.innerHTML+=u,l.colSpan=a,l.rowSpan=c,this.controllersOff(),e.setActiveButton.call(this,!0,!1),e.call_controller_tableEdit.call(this,l),n.addClass(l,"se-table-selected-cell"),this.focusEdge(l)},toggleHeader:function(){const e=this.util,t=this.context.table.headerButton,n=e.hasClass(t,"active"),i=this.context.table._element;if(n)e.removeItem(i.querySelector("thead"));else{const t=e.createElement("THEAD");t.innerHTML="<tr>"+this.plugins.table.createCells.call(this,"th",this.context.table._logical_cellCnt,!1)+"</tr>",i.insertBefore(t,i.firstElementChild)}e.toggleClass(t,"active"),/TH/i.test(this.context.table._tdElement.nodeName)?this.controllersOff():this.plugins.table.setPositionControllerDiv.call(this,this.context.table._tdElement,!1)},setTableStyle:function(e){const t=this.context.table,n=t._element;let i,o,l,s;e.indexOf("width")>-1&&(i=t.resizeButton.firstElementChild,o=t.resizeText,t._maxWidth?(l=t.icons.reduction,s=t.minText,t.columnFixedButton.style.display="block",this.util.removeClass(n,"se-table-size-auto"),this.util.addClass(n,"se-table-size-100")):(l=t.icons.expansion,s=t.maxText,t.columnFixedButton.style.display="none",this.util.removeClass(n,"se-table-size-100"),this.util.addClass(n,"se-table-size-auto")),this.util.changeElement(i,l),this.util.changeTxt(o,s)),e.indexOf("column")>-1&&(t._fixedColumn?(this.util.removeClass(n,"se-table-layout-auto"),this.util.addClass(n,"se-table-layout-fixed"),this.util.addClass(t.columnFixedButton,"active")):(this.util.removeClass(n,"se-table-layout-fixed"),this.util.addClass(n,"se-table-layout-auto"),this.util.removeClass(t.columnFixedButton,"active")))},setActiveButton:function(e,t){const n=this.context.table;/^TH$/i.test(e.nodeName)?(n.insertRowAboveButton.setAttribute("disabled",!0),n.insertRowBelowButton.setAttribute("disabled",!0)):(n.insertRowAboveButton.removeAttribute("disabled"),n.insertRowBelowButton.removeAttribute("disabled")),t&&e!==t?(n.splitButton.setAttribute("disabled",!0),n.mergeButton.removeAttribute("disabled")):(n.splitButton.removeAttribute("disabled"),n.mergeButton.setAttribute("disabled",!0))},_bindOnSelect:null,_bindOffSelect:null,_bindOffShift:null,_selectedCells:null,_shift:!1,_fixedCell:null,_fixedCellName:null,_selectedCell:null,_selectedTable:null,_ref:null,_toggleEditor:function(e){this.context.element.wysiwyg.setAttribute("contenteditable",e),e?this.util.removeClass(this.context.element.wysiwyg,"se-disabled"):this.util.addClass(this.context.element.wysiwyg,"se-disabled")},_offCellMultiSelect:function(e){e.stopPropagation();const t=this.plugins.table;t._shift?t._initBind&&(this._wd.removeEventListener("touchmove",t._initBind),t._initBind=null):(t._removeEvents.call(this),t._toggleEditor.call(this,!0)),t._fixedCell&&t._selectedTable&&(t.setActiveButton.call(this,t._fixedCell,t._selectedCell),t.call_controller_tableEdit.call(this,t._selectedCell||t._fixedCell),t._selectedCells=t._selectedTable.querySelectorAll(".se-table-selected-cell"),t._selectedCell&&t._fixedCell&&this.focusEdge(t._selectedCell),t._shift||(t._fixedCell=null,t._selectedCell=null,t._fixedCellName=null))},_onCellMultiSelect:function(e){this._antiBlur=!0;const t=this.plugins.table,n=this.util.getParentElement(e.target,this.util.isCell);if(t._shift)n===t._fixedCell?t._toggleEditor.call(this,!0):t._toggleEditor.call(this,!1);else if(!t._ref){if(n===t._fixedCell)return;t._toggleEditor.call(this,!1)}n&&n!==t._selectedCell&&t._fixedCellName===n.nodeName&&t._selectedTable===this.util.getParentElement(n,"TABLE")&&(t._selectedCell=n,t._setMultiCells.call(this,t._fixedCell,n))},_setMultiCells:function(e,t){const n=this.plugins.table,i=n._selectedTable.rows,o=this.util,l=n._selectedTable.querySelectorAll(".se-table-selected-cell");for(let e=0,t=l.length;e<t;e++)o.removeClass(l[e],"se-table-selected-cell");if(e===t&&(o.addClass(e,"se-table-selected-cell"),!n._shift))return;let s=!0,r=[],a=[];const c=n._ref={_i:0,cs:null,ce:null,rs:null,re:null};for(let n,l,u=0,d=i.length;u<d;u++){n=i[u].cells,l=0;for(let i,d,h,p,f=0,g=n.length;f<g;f++){if(i=n[f],h=i.colSpan-1,p=i.rowSpan-1,d=f+l,r.length>0)for(let e,t=0;t<r.length;t++)e=r[t],e.row>u||(d>=e.index?(l+=e.cs,d+=e.cs,e.rs-=1,e.row=u+1,e.rs<1&&(r.splice(t,1),t--)):f===g-1&&(e.rs-=1,e.row=u+1,e.rs<1&&(r.splice(t,1),t--)));if(s){if(i!==e&&i!==t||(c.cs=null!==c.cs&&c.cs<d?c.cs:d,c.ce=null!==c.ce&&c.ce>d+h?c.ce:d+h,c.rs=null!==c.rs&&c.rs<u?c.rs:u,c.re=null!==c.re&&c.re>u+p?c.re:u+p,c._i+=1),2===c._i){s=!1,r=[],a=[],u=-1;break}}else if(o.getOverlapRangeAtIndex(c.cs,c.ce,d,d+h)&&o.getOverlapRangeAtIndex(c.rs,c.re,u,u+p)){const e=c.cs<d?c.cs:d,t=c.ce>d+h?c.ce:d+h,n=c.rs<u?c.rs:u,l=c.re>u+p?c.re:u+p;if(c.cs!==e||c.ce!==t||c.rs!==n||c.re!==l){c.cs=e,c.ce=t,c.rs=n,c.re=l,u=-1,r=[],a=[];break}o.addClass(i,"se-table-selected-cell")}p>0&&a.push({index:d,cs:h+1,rs:p,row:-1}),l+=i.colSpan-1}r=r.concat(a).sort((function(e,t){return e.index-t.index})),a=[]}},_removeEvents:function(){const e=this.plugins.table;e._initBind&&(this._wd.removeEventListener("touchmove",e._initBind),e._initBind=null),e._bindOnSelect&&(this._wd.removeEventListener("mousedown",e._bindOnSelect),this._wd.removeEventListener("mousemove",e._bindOnSelect),e._bindOnSelect=null),e._bindOffSelect&&(this._wd.removeEventListener("mouseup",e._bindOffSelect),e._bindOffSelect=null),e._bindOffShift&&(this._wd.removeEventListener("keyup",e._bindOffShift),e._bindOffShift=null)},_initBind:null,onTableCellMultiSelect:function(e,t){const n=this.plugins.table;n._removeEvents.call(this),this.controllersOff(),n._shift=t,n._fixedCell=e,n._fixedCellName=e.nodeName,n._selectedTable=this.util.getParentElement(e,"TABLE");const i=n._selectedTable.querySelectorAll(".se-table-selected-cell");for(let e=0,t=i.length;e<t;e++)this.util.removeClass(i[e],"se-table-selected-cell");this.util.addClass(e,"se-table-selected-cell"),n._bindOnSelect=n._onCellMultiSelect.bind(this),n._bindOffSelect=n._offCellMultiSelect.bind(this),t?(n._bindOffShift=function(){this.controllersOn(this.context.table.resizeDiv,this.context.table.tableController,this.plugins.table.init.bind(this),e,"table"),n._ref||this.controllersOff()}.bind(this),this._wd.addEventListener("keyup",n._bindOffShift,!1),this._wd.addEventListener("mousedown",n._bindOnSelect,!1)):this._wd.addEventListener("mousemove",n._bindOnSelect,!1),this._wd.addEventListener("mouseup",n._bindOffSelect,!1),n._initBind=n.init.bind(this),this._wd.addEventListener("touchmove",n._initBind,!1)},onClick_tableController:function(e){e.stopPropagation();const t=e.target.getAttribute("data-command")?e.target:e.target.parentNode;if(t.getAttribute("disabled"))return;const n=t.getAttribute("data-command"),i=t.getAttribute("data-value"),o=t.getAttribute("data-option"),l=this.plugins.table;if("function"==typeof l._closeSplitMenu&&(l._closeSplitMenu(),"onsplit"===n))return;if(!n)return;e.preventDefault();const s=this.context.table;switch(n){case"insert":case"delete":l.editTable.call(this,i,o);break;case"header":l.toggleHeader.call(this);break;case"onsplit":l.openSplitMenu.call(this);break;case"split":l.splitCells.call(this,i);break;case"merge":l.mergeCells.call(this);break;case"resize":s._maxWidth=!s._maxWidth,l.setTableStyle.call(this,"width"),l.setPositionControllerTop.call(this,s._element),l.setPositionControllerDiv.call(this,s._tdElement,l._shift);break;case"layout":s._fixedColumn=!s._fixedColumn,l.setTableStyle.call(this,"column"),l.setPositionControllerTop.call(this,s._element),l.setPositionControllerDiv.call(this,s._tdElement,l._shift);break;case"remove":const e=s._element.parentNode;this.util.removeItem(s._element),this.controllersOff(),e!==this.context.element.wysiwyg&&this.util.removeItemAllParents(e,(function(e){return 0===e.childNodes.length}),null),this.focus()}this.history.push(!1)}},formatBlock:{name:"formatBlock",display:"submenu",add:function(e,t){const n=e.context;n.formatBlock={targetText:t.querySelector(".txt"),targetTooltip:t.parentNode.querySelector(".se-tooltip-text"),_formatList:null,currentFormat:""};let i=this.setSubmenu(e);i.querySelector("ul").addEventListener("click",this.pickUp.bind(e)),n.formatBlock._formatList=i.querySelectorAll("li button"),e.initMenuTarget(this.name,t,i),i=null},setSubmenu:function(e){const t=e.options,n=e.lang.toolbar,i=e.util.createElement("DIV");i.className="se-submenu se-list-layer se-list-format";const o=["p","div","blockquote","pre","h1","h2","h3","h4","h5","h6"],l=t.formats&&0!==t.formats.length?t.formats:o;let s='<div class="se-list-inner"><ul class="se-list-basic">';for(let e,t,i,r,a,c,u,d=0,h=l.length;d<h;d++)e=l[d],"string"==typeof e&&o.indexOf(e)>-1?(t=e.toLowerCase(),i="blockquote"===t?"range":"pre"===t?"free":"replace",a=/^h/.test(t)?t.match(/\d+/)[0]:"",r=n["tag_"+(a?"h":t)]+a,u="",c=""):(t=e.tag.toLowerCase(),i=e.command,r=e.name||t,u=e.class,c=u?' class="'+u+'"':""),s+='<li><button type="button" class="se-btn-list" data-command="'+i+'" data-value="'+t+'" data-class="'+u+'" title="'+r+'" aria-label="'+r+'"><'+t+c+">"+r+"</"+t+"></button></li>";return s+="</ul></div>",i.innerHTML=s,i},active:function(e){let t=this.lang.toolbar.formats;const n=this.context.formatBlock.targetText;if(e){if(this.util.isFormatElement(e)){const i=this.context.formatBlock._formatList,o=e.nodeName.toLowerCase(),l=(e.className.match(/(\s|^)__se__format__[^\s]+/)||[""])[0].trim();for(let e,n=0,s=i.length;n<s;n++)if(e=i[n],o===e.getAttribute("data-value")&&l===e.getAttribute("data-class")){t=e.title;break}return this.util.changeTxt(n,t),n.setAttribute("data-value",o),n.setAttribute("data-class",l),!0}}else this.util.changeTxt(n,t);return!1},on:function(){const e=this.context.formatBlock,t=e._formatList,n=e.targetText,i=(n.getAttribute("data-value")||"")+(n.getAttribute("data-class")||"");if(i!==e.currentFormat){for(let e,n=0,o=t.length;n<o;n++)e=t[n],i===e.getAttribute("data-value")+e.getAttribute("data-class")?this.util.addClass(e,"active"):this.util.removeClass(e,"active");e.currentFormat=i}},pickUp:function(e){e.preventDefault(),e.stopPropagation();let t=e.target,n=null,i=null,o=null,l="";for(;!n&&!/UL/i.test(t.tagName);){if(n=t.getAttribute("data-command"),i=t.getAttribute("data-value"),l=t.getAttribute("data-class"),n){o=t.firstChild;break}t=t.parentNode}if(n){if("range"===n){const e=o.cloneNode(!1);this.applyRangeFormatElement(e)}else{let e=this.getRange(),t=this.getSelectedElementsAndComponents(!1);if(0===t.length&&(e=this.getRange_addLine(e,null),t=this.getSelectedElementsAndComponents(!1),0===t.length))return;const s=e.startOffset,r=e.endOffset,a=this.util;let c=t[0],u=t[t.length-1];const d=a.getNodePath(e.startContainer,c,null,null),h=a.getNodePath(e.endContainer,u,null,null),p=this.detachList(t,!1);p.sc&&(c=p.sc),p.ec&&(u=p.ec),this.setRange(a.getNodeFromPath(d,c),s,a.getNodeFromPath(h,u),r);const f=this.getSelectedElementsAndComponents(!1);if("free"===n){const e=f.length-1;let t=f[e].parentNode,n=o.cloneNode(!1);const i=n;for(let i,l,s,r,c,u,d=e,h=!0;d>=0;d--)if(i=f[d],i!==(f[d+1]?f[d+1].parentNode:null)){if(u=a.isComponent(i),l=u?"":i.innerHTML.replace(/(?!>)\s+(?=<)|\n/g," "),s=a.getParentElement(i,(function(e){return e.parentNode===t})),(t!==i.parentNode||u)&&(a.isFormatElement(t)?(t.parentNode.insertBefore(n,t.nextSibling),t=t.parentNode):(t.insertBefore(n,s?s.nextSibling:null),t=i.parentNode),r=n.nextSibling,r&&n.nodeName===r.nodeName&&a.isSameAttributes(n,r)&&(n.innerHTML+="<BR>"+r.innerHTML,a.removeItem(r)),n=o.cloneNode(!1),h=!0),c=n.innerHTML,n.innerHTML=(h||!l||!c||/<br>$/i.test(l)?l:l+"<BR>")+c,0===d){t.insertBefore(n,i),r=i.nextSibling,r&&n.nodeName===r.nodeName&&a.isSameAttributes(n,r)&&(n.innerHTML+="<BR>"+r.innerHTML,a.removeItem(r));const e=n.previousSibling;e&&n.nodeName===e.nodeName&&a.isSameAttributes(n,e)&&(e.innerHTML+="<BR>"+n.innerHTML,a.removeItem(n))}u||a.removeItem(i),l&&(h=!1)}this.setRange(i,0,i,0)}else{for(let e,t,n=0,s=f.length;n<s;n++)e=f[n],e.nodeName.toLowerCase()===i.toLowerCase()&&(e.className.match(/(\s|^)__se__format__[^\s]+/)||[""])[0].trim()===l||a.isComponent(e)||(t=o.cloneNode(!1),a.copyFormatAttributes(t,e),t.innerHTML=e.innerHTML,e.parentNode.replaceChild(t,e)),0===n&&(c=t||e),n===s-1&&(u=t||e),t=null;this.setRange(a.getNodeFromPath(d,c),s,a.getNodeFromPath(h,u),r)}this.history.push(!1)}this.submenuOff()}}},lineHeight:{name:"lineHeight",display:"submenu",add:function(e,t){const n=e.context;n.lineHeight={_sizeList:null,currentSize:-1};let i=this.setSubmenu(e),o=i.querySelector("ul");o.addEventListener("click",this.pickup.bind(e)),n.lineHeight._sizeList=o.querySelectorAll("li button"),e.initMenuTarget(this.name,t,i),i=null,o=null},setSubmenu:function(e){const t=e.options,n=e.lang,i=e.util.createElement("DIV");i.className="se-submenu se-list-layer";const o=t.lineHeights?t.lineHeights:[{text:"1",value:1},{text:"1.15",value:1.15},{text:"1.5",value:1.5},{text:"2",value:2}];let l='<div class="se-list-inner"><ul class="se-list-basic"><li><button type="button" class="default_value se-btn-list" title="'+n.toolbar.default+'" aria-label="'+n.toolbar.default+'">('+n.toolbar.default+")</button></li>";for(let e,t=0,n=o.length;t<n;t++)e=o[t],l+='<li><button type="button" class="se-btn-list" data-value="'+e.value+'" title="'+e.text+'" aria-label="'+e.text+'">'+e.text+"</button></li>";return l+="</ul></div>",i.innerHTML=l,i},on:function(){const e=this.context.lineHeight,t=e._sizeList,n=this.util.getFormatElement(this.getSelectionNode()),i=n?n.style.lineHeight+"":"";if(i!==e.currentSize){for(let e=0,n=t.length;e<n;e++)i===t[e].getAttribute("data-value")?this.util.addClass(t[e],"active"):this.util.removeClass(t[e],"active");e.currentSize=i}},pickup:function(e){if(!/^BUTTON$/i.test(e.target.tagName))return!1;e.preventDefault(),e.stopPropagation();const t=e.target.getAttribute("data-value")||"",n=this.getSelectedElements();for(let e=0,i=n.length;e<i;e++)n[e].style.lineHeight=t;this.submenuOff(),this.history.push(!1)}},template:s,paragraphStyle:{name:"paragraphStyle",display:"submenu",add:function(e,t){const n=e.context;n.paragraphStyle={_classList:null};let i=this.setSubmenu(e);i.querySelector("ul").addEventListener("click",this.pickUp.bind(e)),n.paragraphStyle._classList=i.querySelectorAll("li button"),e.initMenuTarget(this.name,t,i),i=null},setSubmenu:function(e){const t=e.options,n=e.util.createElement("DIV");n.className="se-submenu se-list-layer se-list-format";const i=e.lang.menu,o={spaced:{name:i.spaced,class:"__se__p-spaced",_class:""},bordered:{name:i.bordered,class:"__se__p-bordered",_class:""},neon:{name:i.neon,class:"__se__p-neon",_class:""}},l=t.paragraphStyles&&0!==t.paragraphStyles.length?t.paragraphStyles:["spaced","bordered","neon"];let s='<div class="se-list-inner"><ul class="se-list-basic">';for(let e,t,n,i,r=0,a=l.length;r<a;r++){if(e=l[r],"string"==typeof e){const t=o[e.toLowerCase()];if(!t)continue;e=t}t=e.name,n=e.class?' class="'+e.class+'"':"",i=e._class,s+='<li><button type="button" class="se-btn-list'+(i?" "+i:"")+'" data-value="'+e.class+'" title="'+t+'" aria-label="'+t+'"><div'+n+">"+t+"</div></button></li>"}return s+="</ul></div>",n.innerHTML=s,n},on:function(){const e=this.context.paragraphStyle._classList,t=this.util.getFormatElement(this.getSelectionNode());for(let n=0,i=e.length;n<i;n++)this.util.hasClass(t,e[n].getAttribute("data-value"))?this.util.addClass(e[n],"active"):this.util.removeClass(e[n],"active")},pickUp:function(e){e.preventDefault(),e.stopPropagation();let t=e.target,n=null;for(;!/^UL$/i.test(t.tagName)&&(n=t.getAttribute("data-value"),!n);)t=t.parentNode;if(!n)return;let i=this.getSelectedElements();if(0===i.length&&(this.getRange_addLine(this.getRange(),null),i=this.getSelectedElements(),0===i.length))return;const o=this.util.hasClass(t,"active")?this.util.removeClass.bind(this.util):this.util.addClass.bind(this.util);for(let e=0,t=i.length;e<t;e++)o(i[e],n);this.submenuOff(),this.history.push(!1)}},textStyle:{name:"textStyle",display:"submenu",add:function(e,t){const n=e.context;n.textStyle={_styleList:null};let i=this.setSubmenu(e),o=i.querySelector("ul");o.addEventListener("click",this.pickup.bind(e)),n.textStyle._styleList=i.querySelectorAll("li button"),e.initMenuTarget(this.name,t,i),i=null,o=null},setSubmenu:function(e){const t=e.options,n=e.util.createElement("DIV");n.className="se-submenu se-list-layer se-list-format";const i={code:{name:e.lang.menu.code,class:"__se__t-code",tag:"code"},translucent:{name:e.lang.menu.translucent,style:"opacity: 0.5;",tag:"span"},shadow:{name:e.lang.menu.shadow,class:"__se__t-shadow",tag:"span"}},o=t.textStyles?t.textStyles:e._w.Object.keys(i);let l='<div class="se-list-inner"><ul class="se-list-basic">';for(let e,t,n,s,r,a,c,u=0,d=o.length;u<d;u++){if(e=o[u],s="",a="",r=[],"string"==typeof e){const t=i[e.toLowerCase()];if(!t)continue;e=t}n=e.name,t=e.tag||"span",c=e._class,e.style&&(s+=' style="'+e.style+'"',a+=e.style.replace(/:[^;]+(;|$)\s*/g,","),r.push("style")),e.class&&(s+=' class="'+e.class+'"',a+="."+e.class.trim().replace(/\s+/g,",."),r.push("class")),a=a.replace(/,$/,""),l+='<li><button type="button" class="se-btn-list'+(c?" "+c:"")+'" data-command="'+t+'" data-value="'+a+'" title="'+n+'" aria-label="'+n+'"><'+t+s+">"+n+"</"+t+"></button></li>"}return l+="</ul></div>",n.innerHTML=l,n},on:function(){const e=this.util,t=this.context.textStyle._styleList,n=this.getSelectionNode();for(let i,o,l,s=0,r=t.length;s<r;s++){i=t[s],o=i.getAttribute("data-value").split(",");for(let t,s,r=0;r<o.length;r++){for(t=n,l=!1;t&&!e.isFormatElement(t)&&!e.isComponent(t);){if(t.nodeName.toLowerCase()===i.getAttribute("data-command").toLowerCase()&&(s=o[r],/^\./.test(s)?e.hasClass(t,s.replace(/^\./,"")):t.style[s])){l=!0;break}t=t.parentNode}if(!l)break}l?e.addClass(i,"active"):e.removeClass(i,"active")}},pickup:function(e){e.preventDefault(),e.stopPropagation();let t=e.target,n=null,i=null;for(;!n&&!/UL/i.test(t.tagName);){if(n=t.getAttribute("data-command"),n){i=t.firstChild;break}t=t.parentNode}if(!n)return;const o=i.style.cssText.replace(/:.+(;|$)/g,",").split(",");o.pop();const l=i.classList;for(let e=0,t=l.length;e<t;e++)o.push("."+l[e]);const s=this.util.hasClass(t,"active")?null:i.cloneNode(!1),r=s?null:[i.nodeName];this.nodeChange(s,o,r,!0),this.submenuOff()}},link:d,image:y,video:b,audio:_,math:w,imageGallery:{name:"imageGallery",add:function(e){e.addModule([x.a]);e.context.imageGallery={title:e.lang.toolbar.imageGallery,url:e.options.imageGalleryUrl,header:e.options.imageGalleryHeader,listClass:"se-image-list",itemTemplateHandler:this.drawItems,selectorHandler:this.setImage.bind(e),columnSize:4}},open:function(e){this.plugins.fileBrowser.open.call(this,"imageGallery",e)},drawItems:function(e){const t=e.src.split("/").pop();return'<div class="se-file-item-img"><img src="'+(e.thumbnail||e.src)+'" alt="'+(e.alt||t)+'" data-command="pick" data-value="'+(e.src||e.thumbnail)+'"><div class="se-file-img-name se-file-name-back"></div><div class="se-file-img-name __se__img_name">'+(e.name||t)+"</div></div>"},setImage:function(e){this.callPlugin("image",function(){const t={name:e.parentNode.querySelector(".__se__img_name").textContent,size:0};this.plugins.image.create_image.call(this,e.getAttribute("data-value"),null,this.context.image._origin_w,this.context.image._origin_h,"none",t,e.alt)}.bind(this),null)}}},S={rtl:{italic:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 10.5 15.8" xml:space="preserve"><g><path d="M0.3,0.1c0.3,0,0.5,0,0.7,0c1,0.1,1.7,0.1,2.2,0.1H4L7.2,0l0.2,1.1H7c-0.5,0-1,0.1-1.5,0.3v0.4l0.3,1.9L6,4.4L6.3,6 l0.1,0.4l0.1,0.5c0.1,0.2,0.1,0.4,0.2,0.7s0.1,0.6,0.2,0.9L7,9.1l0.6,2.8l0.3,1.4c0.1,0.4,0.2,0.7,0.4,1c0.4,0.2,0.8,0.3,1.2,0.4 l0.8,0.2l0.2,0.9l-1.1,0c-0.9-0.1-1.5-0.1-1.8-0.1h-2c-0.9,0.1-1.4,0.2-1.5,0.2c-0.1,0-0.2,0-0.3,0H3.4c-0.1,0-0.2,0-0.2,0 l-0.1-0.4c0-0.2-0.1-0.4-0.1-0.6l0.7-0.1c0.4,0,0.8-0.1,1.2-0.2c0-0.1,0-0.2,0-0.3l-0.1-0.5l-0.4-2.4L4,9.6L3.4,6.4 C3.2,5.7,3,4.7,2.7,3.3c0-0.3-0.1-0.5-0.1-0.8C2.5,2.1,2.4,1.9,2.3,1.6C2,1.4,1.6,1.3,1.3,1.2C0.9,1.2,0.5,1.1,0.2,0.9L0,0.4L0,0 L0.3,0.1L0.3,0.1z"/></g></svg>',indent:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.7 12.4" xml:space="preserve"><g><g><path d="M15.5,10.1L15.5,10.1c0.1,0,0.3,0.1,0.3,0.3v1.7c0,0.1,0,0.1-0.1,0.2c-0.1,0.1-0.1,0.1-0.2,0.1l-15.2,0 c-0.1,0-0.1,0-0.2-0.1C0,12.2,0,12.2,0,12.1l0-1.7c0-0.1,0-0.1,0.1-0.2c0.1-0.1,0.1-0.1,0.2-0.1C0.3,10.1,15.5,10.1,15.5,10.1z M9.8,6.7c0.1,0,0.1,0,0.2,0.1C10.1,6.9,10.1,7,10.1,7v1.7c0,0.1,0,0.2-0.1,0.2C10,9,9.9,9,9.8,9L0.3,9C0.2,9,0.1,9,0.1,8.9 C0,8.9,0,8.8,0,8.7V7C0,7,0,6.9,0.1,6.8c0.1-0.1,0.1-0.1,0.2-0.1C0.3,6.7,9.8,6.7,9.8,6.7z M0.3,3.4h9.6h0c0.1,0,0.3,0.1,0.3,0.3 v1.7v0c0,0.1-0.1,0.3-0.3,0.3H0.3c-0.1,0-0.1,0-0.2-0.1C0,5.5,0,5.4,0,5.3V3.6c0-0.1,0-0.1,0.1-0.2C0.1,3.4,0.2,3.4,0.3,3.4 L0.3,3.4z M0.3,0l15.2,0c0.1,0,0.1,0,0.2,0.1c0.1,0.1,0.1,0.1,0.1,0.2V2c0,0.1,0,0.2-0.1,0.2c-0.1,0.1-0.1,0.1-0.2,0.1H0.3 c-0.1,0-0.1,0-0.2-0.1C0,2.1,0,2,0,2l0-1.7c0-0.1,0-0.1,0.1-0.2C0.1,0,0.2,0,0.3,0z"/></g><path d="M13.1,3.5L15.7,6c0.1,0.1,0.1,0.3,0,0.4l-2.5,2.5C13.1,9,13,9,12.9,9c-0.1,0-0.1,0-0.2-0.1c-0.1-0.1-0.1-0.1-0.1-0.2V3.7 c0-0.1,0-0.2,0.1-0.2c0.1-0.1,0.1-0.1,0.2-0.1C13,3.4,13.1,3.4,13.1,3.5z"/></g></svg>',outdent:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.7 12.4" xml:space="preserve"><g><g><path d="M15.5,10.1L15.5,10.1c0.1,0,0.3,0.1,0.3,0.3v1.7c0,0.1,0,0.1-0.1,0.2c-0.1,0.1-0.1,0.1-0.2,0.1l-15.2,0 c-0.1,0-0.1,0-0.2-0.1C0,12.2,0,12.2,0,12.1l0-1.7c0-0.1,0-0.1,0.1-0.2c0.1-0.1,0.1-0.1,0.2-0.1C0.3,10.1,15.5,10.1,15.5,10.1z M9.8,6.7c0.1,0,0.1,0,0.2,0.1C10.1,6.9,10.1,7,10.1,7v1.7c0,0.1,0,0.2-0.1,0.2C10,9,9.9,9,9.8,9L0.3,9C0.2,9,0.1,9,0.1,8.9 C0,8.9,0,8.8,0,8.7V7C0,7,0,6.9,0.1,6.8c0.1-0.1,0.1-0.1,0.2-0.1C0.3,6.7,9.8,6.7,9.8,6.7z M0.3,3.4h9.6h0c0.1,0,0.3,0.1,0.3,0.3 v1.7v0c0,0.1-0.1,0.3-0.3,0.3H0.3c-0.1,0-0.1,0-0.2-0.1C0,5.5,0,5.4,0,5.3V3.6c0-0.1,0-0.1,0.1-0.2C0.1,3.4,0.2,3.4,0.3,3.4 L0.3,3.4z M0.3,0l15.2,0c0.1,0,0.1,0,0.2,0.1c0.1,0.1,0.1,0.1,0.1,0.2V2c0,0.1,0,0.2-0.1,0.2c-0.1,0.1-0.1,0.1-0.2,0.1H0.3 c-0.1,0-0.1,0-0.2-0.1C0,2.1,0,2,0,2l0-1.7c0-0.1,0-0.1,0.1-0.2C0.1,0,0.2,0,0.3,0z"/></g><path d="M15.5,3.4c0.1,0,0.1,0,0.2,0.1c0.1,0.1,0.1,0.1,0.1,0.2v5.1c0,0.1,0,0.1-0.1,0.2C15.6,9,15.5,9,15.5,9 c-0.1,0-0.1,0-0.2-0.1l-2.5-2.5c-0.1-0.1-0.1-0.3,0-0.4l2.5-2.5C15.3,3.4,15.4,3.4,15.5,3.4z"/></g></svg>',list_bullets:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.7 12.4" xml:space="preserve"><g><path d="M12.4,10.7c0,0.9,0.8,1.7,1.7,1.7c0.9,0,1.7-0.8,1.7-1.7C15.7,9.8,15,9,14.1,9c-0.4,0-0.9,0.2-1.2,0.5 C12.5,9.8,12.4,10.2,12.4,10.7C12.4,10.7,12.4,10.7,12.4,10.7z M12.4,6.2c0,0.9,0.8,1.7,1.7,1.7c0.4,0,0.9-0.2,1.2-0.5 c0.3-0.3,0.4-0.7,0.4-1.1c0-0.9-0.7-1.7-1.6-1.7C13.1,4.6,12.4,5.3,12.4,6.2C12.4,6.2,12.4,6.2,12.4,6.2z M0,9.8v1.7 c0,0.1,0,0.1,0.1,0.2c0.1,0.1,0.1,0.1,0.2,0.1l10.7,0c0,0,0,0,0,0c0.1,0,0.3-0.1,0.3-0.3V9.8c0-0.1,0-0.1-0.1-0.2 C11.1,9.6,11,9.6,11,9.6l-10.7,0c-0.1,0-0.1,0-0.2,0.1C0,9.7,0,9.8,0,9.8L0,9.8z M12.9,2.9c0.3,0.3,0.7,0.5,1.2,0.5 c0.4,0,0.9-0.2,1.2-0.5c0.7-0.7,0.7-1.7,0-2.4C14.9,0.2,14.5,0,14.1,0c-0.4,0-0.9,0.2-1.2,0.5c-0.3,0.3-0.5,0.7-0.5,1.2 C12.4,2.1,12.5,2.6,12.9,2.9z M0,5.3V7c0,0.1,0,0.1,0.1,0.2c0.1,0.1,0.1,0.1,0.2,0.1H11c0.1,0,0.1,0,0.2-0.1 c0.1-0.1,0.1-0.1,0.1-0.2V5.3c0,0,0,0,0,0c0-0.1-0.1-0.3-0.3-0.3H0.3c-0.1,0-0.1,0-0.2,0.1C0,5.2,0,5.3,0,5.3L0,5.3z M0,0.8v1.7 c0,0.1,0,0.1,0.1,0.2c0.1,0.1,0.1,0.1,0.2,0.1h10.7c0.1,0,0.1,0,0.2-0.1c0,0,0.1-0.1,0.1-0.2V0.8c0-0.1,0-0.1-0.1-0.2 c0-0.1-0.1-0.1-0.2-0.1H0.3c-0.1,0-0.1,0-0.2,0.1C0,0.7,0,0.8,0,0.8L0,0.8z"/></g></svg>',list_number:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.7 15.7" xml:space="preserve"><g><path d="M0,11.5l0,1.7c0,0.1,0,0.1,0.1,0.2c0.1,0.1,0.1,0.1,0.2,0.1H11c0.1,0,0.2,0,0.2-0.1c0.1-0.1,0.1-0.1,0.1-0.2v-1.7 c0-0.1,0-0.1-0.1-0.2c-0.1-0.1-0.1-0.1-0.2-0.1H0.3c-0.1,0-0.2,0-0.2,0.1C0,11.4,0,11.4,0,11.5L0,11.5z M0,8.7c0,0.1,0,0.1,0.1,0.2 C0.1,8.9,0.2,9,0.3,9H11c0.1,0,0.2,0,0.2-0.1c0.1-0.1,0.1-0.1,0.1-0.2V7c0-0.1,0-0.1-0.1-0.2c-0.1-0.1-0.1-0.1-0.2-0.1l-10.7,0 c-0.1,0-0.2,0-0.2,0.1C0,6.8,0,6.9,0,7C0,7,0,8.7,0,8.7z M0,2.5v1.7c0,0.1,0,0.1,0.1,0.2c0,0,0.1,0.1,0.2,0.1l10.7,0 c0.1,0,0.2,0,0.2-0.1c0.1-0.1,0.1-0.1,0.1-0.2V2.4c0-0.1,0-0.1-0.1-0.2c-0.1,0-0.1,0-0.2,0H0.3c-0.1,0-0.1,0-0.2,0 C0,2.3,0,2.4,0,2.5L0,2.5z"/></g><path d="M15.6,14.2c0-0.3-0.1-0.6-0.3-0.8c-0.2-0.2-0.4-0.4-0.7-0.4l0.9-1v-0.8h-2.9v1.3h0.9v-0.5h0.9l0,0c-0.1,0.1-0.2,0.2-0.3,0.3 s-0.2,0.3-0.4,0.5l-0.3,0.3l0.2,0.5c0.6,0,0.9,0.1,0.9,0.5c0,0.1-0.1,0.3-0.2,0.4c-0.1,0.1-0.3,0.1-0.4,0.1c-0.3,0-0.7-0.1-0.9-0.3 l-0.5,0.8c0.4,0.4,0.9,0.6,1.5,0.6c0.4,0,0.9-0.1,1.2-0.4C15.5,15.1,15.6,14.7,15.6,14.2z"/><path d="M15.6,8.7h-0.9v0.5h-1.1c0-0.2,0.2-0.4,0.4-0.5c0.2-0.2,0.4-0.3,0.7-0.4c0.3-0.2,0.5-0.3,0.7-0.6c0.2-0.2,0.3-0.5,0.3-0.8 c0-0.4-0.2-0.8-0.5-1c-0.6-0.4-1.4-0.5-2-0.1c-0.3,0.2-0.5,0.4-0.6,0.7L13.3,7c0.1-0.3,0.4-0.5,0.7-0.5c0.1,0,0.3,0,0.3,0.1 c0.1,0.1,0.1,0.2,0.1,0.3c0,0.2-0.1,0.3-0.2,0.4c-0.2,0.1-0.3,0.3-0.5,0.4c-0.2,0.1-0.4,0.3-0.6,0.4c-0.2,0.2-0.4,0.4-0.5,0.6 c-0.1,0.2-0.2,0.5-0.2,0.8c0,0.2,0,0.3,0,0.5h3.2L15.6,8.7L15.6,8.7z"/><path d="M15.6,3.6h-1V0h-0.9l-1.2,1.1l0.6,0.7c0.2-0.1,0.3-0.3,0.4-0.5l0,0v2.2h-0.9v0.9h3L15.6,3.6L15.6,3.6z"/></svg>',link:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.7 15.7" xml:space="preserve"><g><path d="M7.4,9.9l3.1,3.1c0.3,0.3,0.8,0.5,1.3,0.5c0.5,0,0.9-0.2,1.3-0.5c0,0,0,0,0,0c0.7-0.7,0.7-1.9,0-2.6L9.9,7.3 c0-0.1,0-0.2,0-0.3C9.9,7,10,7,10.1,7l2.2-0.2c0.1,0,0.1,0,0.2,0.1l2.1,2.1c0.4,0.4,0.7,0.8,0.9,1.3c0.2,0.5,0.3,1,0.3,1.5 c0,0.5-0.1,1-0.3,1.5c-0.8,2-3.2,3-5.2,2.2c-0.5-0.2-0.9-0.5-1.3-0.9l-2.1-2.1c-0.1,0-0.1-0.1-0.1-0.2L7,10.1C7,10,7,9.9,7.1,9.9 C7.2,9.8,7.3,9.9,7.4,9.9z M1.2,1.1C1.6,0.7,2,0.4,2.5,0.3c1-0.4,2.1-0.4,3.1,0C6,0.4,6.5,0.7,6.8,1.1L9,3.2C9,3.3,9.1,3.3,9,3.4 L8.8,5.6c0,0.1-0.1,0.2-0.2,0.2c-0.1,0.1-0.2,0.1-0.3,0L5.3,2.7C5,2.3,4.5,2.1,4,2.1c-0.5,0-0.9,0.2-1.3,0.5c0,0,0,0,0,0 C2,3.4,2,4.5,2.7,5.2l3.1,3.2c0.1,0.1,0.1,0.2,0,0.3c0,0.1-0.1,0.1-0.2,0.1L3.5,9C3.4,9,3.4,9,3.3,8.9L1.2,6.8c0,0,0,0,0,0 C-0.4,5.2-0.4,2.7,1.2,1.1L1.2,1.1z M14.3,6h-2.6c0,0,0,0,0,0c-0.1,0-0.2-0.1-0.2-0.2c0-0.1,0-0.2,0.1-0.3l2.5-0.7 c0.1,0,0.1,0,0.2,0c0.1,0,0.1,0.1,0.1,0.2l0.1,0.8c0,0.1,0,0.1-0.1,0.2C14.5,6,14.4,6,14.3,6L14.3,6z M10.2,4.1 c0,0.1-0.1,0.2-0.2,0.2l0,0c0,0,0,0,0,0C9.8,4.2,9.7,4.1,9.8,4L9.7,1.4c0-0.1,0-0.1,0.1-0.2c0.1,0,0.1,0,0.2,0h0.8 c0.1,0,0.1,0,0.2,0.1c0,0.1,0,0.1,0,0.2L10.2,4.1L10.2,4.1z M1.5,9.7h1.3h1.3c0.1,0,0.2,0.1,0.2,0.2c0,0.1,0,0.2-0.1,0.3l-2.5,0.6 H1.6c0,0-0.1,0-0.1,0c-0.1,0-0.1-0.1-0.1-0.2L1.2,9.9c0-0.1,0-0.1,0.1-0.2c0-0.1,0.1-0.1,0.2-0.1L1.5,9.7z M5.6,11.6 C5.6,11.6,5.6,11.6,5.6,11.6c0-0.1,0.1-0.2,0.3-0.1c0,0,0,0,0,0c0.1,0,0.2,0.1,0.2,0.2v2.6c0,0.1,0,0.1-0.1,0.2 c0,0-0.1,0.1-0.2,0.1L5,14.5c-0.1,0-0.1,0-0.2-0.1c0-0.1,0-0.1,0-0.2L5.6,11.6L5.6,11.6z"/></g></svg>',unlink:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.7 15.7" xml:space="preserve"><g><path d="M14.6,14.6c1.6-1.6,1.6-4.1,0-5.7l0,0l-3.1-3.1l-1.2,1.6l2.9,2.9c0.4,0.4,0.6,0.9,0.6,1.5c0,1.1-0.9,2.1-2.1,2.1l0,0 c-0.6,0-1.1-0.2-1.5-0.6l-0.4-0.4l-1.7,1l0.8,0.8C10.4,16.2,13,16.2,14.6,14.6L14.6,14.6L14.6,14.6z M3.6,6C3,5.9,2.6,5.5,2.3,5 S1.9,4,2.1,3.4C2.3,2.9,2.6,2.5,3,2.2C3.5,2,4.1,1.9,4.6,2l3.3,1.4l0.5-2L5.1,0.1C4-0.1,2.9,0,2,0.5C1.1,1.1,0.4,1.9,0.2,3 C-0.1,4,0,5.1,0.6,6C1.1,6.9,1.9,7.6,3,7.8l5.4,2l0.5-2L6.2,6.9L3.6,6z"/></g></svg>'},redo:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.59 14.18"><g><path d="M11.58,18.48a6.84,6.84,0,1,1,6.85-6.85s0,.26,0,.67a8,8,0,0,1-.22,1.44l.91-.55a.51.51,0,0,1,.36,0,.45.45,0,0,1,.29.22.47.47,0,0,1,.06.36.45.45,0,0,1-.22.29L17.42,15.3l-.12,0h-.25l-.12-.06-.09-.09-.06-.07,0-.06-.87-2.12a.43.43,0,0,1,0-.37.49.49,0,0,1,.27-.26.41.41,0,0,1,.36,0,.53.53,0,0,1,.27.26l.44,1.09a6.51,6.51,0,0,0,.24-1.36,4.58,4.58,0,0,0,0-.64,5.83,5.83,0,0,0-1.73-4.17,5.88,5.88,0,0,0-8.34,0,5.9,5.9,0,0,0,4.17,10.06.51.51,0,0,1,.33.15.48.48,0,0,1,0,.68.53.53,0,0,1-.33.12Z" transform="translate(-4.48 -4.54)"/></g></svg>',undo:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.59 14.18"><g><path d="M5,14a.43.43,0,0,1-.22-.29.46.46,0,0,1,.06-.36.43.43,0,0,1,.29-.22.56.56,0,0,1,.36,0l.91.55a8.27,8.27,0,0,1-.22-1.45,5.07,5.07,0,0,1,0-.67A6.85,6.85,0,1,1,13,18.47a.44.44,0,0,1-.33-.13.48.48,0,0,1,0-.68.51.51,0,0,1,.33-.15A5.89,5.89,0,0,0,17.15,7.45a5.88,5.88,0,0,0-8.33,0,5.84,5.84,0,0,0-1.73,4.17s0,.25,0,.65a6.49,6.49,0,0,0,.24,1.37l.44-1.09a.57.57,0,0,1,.27-.26.41.41,0,0,1,.36,0,.53.53,0,0,1,.27.26.43.43,0,0,1,0,.37L7.82,15l0,.09-.09.09-.1.07-.06,0H7.28l-.13,0-1.09-.63c-.65-.36-1-.57-1.1-.63Z" transform="translate(-4.49 -4.53)"/></g></svg>',bold:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 11.76 15.75"><g><path d="M6.4,3.76V19.5h6.76a5.55,5.55,0,0,0,2-.32,4.93,4.93,0,0,0,1.52-1,4.27,4.27,0,0,0,1.48-3.34,3.87,3.87,0,0,0-.69-2.37,5.74,5.74,0,0,0-.71-.83,3.44,3.44,0,0,0-1.1-.65,3.6,3.6,0,0,0,1.58-1.36,3.66,3.66,0,0,0,.53-1.93,3.7,3.7,0,0,0-1.21-2.87,4.65,4.65,0,0,0-3.25-1.1H6.4Zm2.46,6.65V5.57h3.52a4.91,4.91,0,0,1,1.36.15,2.3,2.3,0,0,1,.85.45,2.06,2.06,0,0,1,.74,1.71,2.3,2.3,0,0,1-.78,1.92,2.54,2.54,0,0,1-.86.46,4.7,4.7,0,0,1-1.32.15H8.86Zm0,7.27V12.15H12.7a4.56,4.56,0,0,1,1.38.17,3.43,3.43,0,0,1,.95.49,2.29,2.29,0,0,1,.92,2,2.73,2.73,0,0,1-.83,2.1,2.66,2.66,0,0,1-.83.58,3.25,3.25,0,0,1-1.26.2H8.86Z" transform="translate(-6.4 -3.75)"/></g></svg>',underline:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 9.78 15.74"><g><path d="M14.64,3.76h2.52v7.72a4.51,4.51,0,0,1-.59,2.31,3.76,3.76,0,0,1-1.71,1.53,6.12,6.12,0,0,1-2.64.53,5,5,0,0,1-3.57-1.18,4.17,4.17,0,0,1-1.27-3.24V3.76H9.9v7.3a3,3,0,0,0,.55,2,2.3,2.3,0,0,0,1.83.65,2.26,2.26,0,0,0,1.8-.65,3.09,3.09,0,0,0,.55-2V3.76Zm2.52,13.31V19.5H7.39V17.08h9.77Z" transform="translate(-7.38 -3.76)"/></g></svg>',italic:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 10.49 15.76"><g><path d="M17.16,3.79l.37,0-.06.38-.14.52A10,10,0,0,1,16.21,5a9.37,9.37,0,0,0-1,.32,6.68,6.68,0,0,0-.25.89c-.06.31-.11.59-.14.85-.3,1.36-.52,2.41-.68,3.14l-.61,3.18L13.1,15l-.43,2.4-.12.46a.62.62,0,0,0,0,.28c.44.1.85.17,1.23.22l.68.11a4.51,4.51,0,0,1-.08.6l-.09.42a.92.92,0,0,0-.23,0l-.43,0a1.37,1.37,0,0,1-.29,0c-.13,0-.63-.08-1.49-.16l-2,0c-.28,0-.87,0-1.78.12L7,19.5l.17-.88.8-.2A6.61,6.61,0,0,0,9.19,18,2.62,2.62,0,0,0,9.61,17l.28-1.41.58-2.75.12-.66c.05-.3.11-.58.17-.86s.12-.51.17-.69l.12-.48.12-.43.31-1.6.15-.65.31-1.91V5.14a3.86,3.86,0,0,0-1.48-.29l-.38,0,.2-1.06,3.24.14.75,0c.45,0,1.18,0,2.18-.09.23,0,.46,0,.71,0Z" transform="translate(-7.04 -3.76)"/></g></svg>',strike:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 14.9"><g><path d="M12.94,13a4.27,4.27,0,0,1,1.32.58,1.46,1.46,0,0,1,.55,1.2,1.87,1.87,0,0,1-.88,1.64,4.17,4.17,0,0,1-2.35.59,4.44,4.44,0,0,1-2.74-.71,2.72,2.72,0,0,1-1-2.17H5.57a4.56,4.56,0,0,0,1.55,3.7,7,7,0,0,0,4.47,1.23,6,6,0,0,0,4.07-1.3,4.24,4.24,0,0,0,1.52-3.37,4,4,0,0,0-.26-1.4h-4ZM6.37,10.24A3.27,3.27,0,0,1,6,8.68a4,4,0,0,1,1.48-3.3,5.92,5.92,0,0,1,3.88-1.21,5.58,5.58,0,0,1,3.91,1.24,4.36,4.36,0,0,1,1.45,3.17H14.44a2.12,2.12,0,0,0-.91-1.81,4.45,4.45,0,0,0-2.44-.55,3.69,3.69,0,0,0-2,.51A1.64,1.64,0,0,0,8.3,8.22a1.3,1.3,0,0,0,.48,1.11,7,7,0,0,0,2.1.78l.28.06.28.08H6.37Zm13.09.68a.73.73,0,0,1,.49.21.66.66,0,0,1,.2.48.64.64,0,0,1-.2.48.71.71,0,0,1-.49.19H5.1a.67.67,0,0,1-.49-.19.66.66,0,0,1-.2-.48.64.64,0,0,1,.2-.48.73.73,0,0,1,.49-.21H19.46Z" transform="translate(-4.41 -4.17)"/></g></svg>',subscript:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.75 14.61"><g><path d="M15.38,4.33H12.74L11.19,7c-.28.46-.51.87-.69,1.21L10.07,9h0l-.44-.8c-.22-.4-.45-.81-.71-1.23L7.34,4.33H4.68L8.26,10,4.4,16.08H7.1l1.69-2.83c.38-.63.72-1.22,1-1.78l.25-.46h0l.49.92c.24.45.48.89.74,1.32L13,16.08h2.61L11.84,10l1.77-2.84,1.77-2.85Zm4.77,13.75H17v-.15c0-.4.05-.64.16-.72a4.42,4.42,0,0,1,1.16-.31,3.3,3.3,0,0,0,1.54-.56A1.84,1.84,0,0,0,20.15,15a1.78,1.78,0,0,0-.44-1.41A2.8,2.8,0,0,0,18,13.25a2.71,2.71,0,0,0-1.69.37,1.83,1.83,0,0,0-.44,1.43v.23H17v-.23q0-.63.18-.78a1.62,1.62,0,0,1,.88-.15,1.59,1.59,0,0,1,.88.15q.18.15.18.75t-.18.75a3.58,3.58,0,0,1-1.18.33,3.33,3.33,0,0,0-1.52.51,1.57,1.57,0,0,0-.32,1.18v1.15h4.27v-.86Z" transform="translate(-4.4 -4.33)"/></g></svg>',superscript:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.75 15.42"><g><path d="M12,13.14l3.61-5.81H12.94L11.33,10c-.28.46-.51.88-.69,1.25l-.45.83h0l-.45-.85c-.22-.41-.45-.82-.71-1.24L7.4,7.33H4.68l3.66,5.81L4.4,19.33H7.14l1.74-2.87q.58-1,1-1.83l.25-.48h0l.51.94.75,1.37,1.72,2.87h2.67l-1.92-3.09c-1.12-1.8-1.76-2.83-1.92-3.1Zm4.84-4.41h0l0,.15h3.27v.86H15.77V8.58a1.66,1.66,0,0,1,.33-1.22,3.51,3.51,0,0,1,1.56-.51,3.68,3.68,0,0,0,1.21-.34c.13-.1.19-.36.19-.77S19,5.07,18.87,5A1.63,1.63,0,0,0,18,4.8a1.58,1.58,0,0,0-.91.17c-.13.11-.19.38-.19.8V6H15.78V5.76a1.87,1.87,0,0,1,.45-1.47A2.84,2.84,0,0,1,18,3.91a2.8,2.8,0,0,1,1.72.38,1.84,1.84,0,0,1,.45,1.44,1.91,1.91,0,0,1-.34,1.35,3.24,3.24,0,0,1-1.58.57A3.69,3.69,0,0,0,17,8c-.12.1-.17.35-.17.76Z" transform="translate(-4.4 -3.91)"/></g></svg>',erase:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 13.76"><g><path d="M13.69,17.2h6.46v1.31H8.56L4.41,14.37,14,4.75l6.06,6.06L16.89,14l-3.2,3.19Zm-4.61,0h2.77L14.09,15,9.88,10.75,6.25,14.38l1.41,1.41c.84.82,1.31,1.29,1.42,1.41Z" transform="translate(-4.41 -4.75)"/></g></svg>',indent:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 12.36"><g><path d="M4.68,14.45a.27.27,0,0,1-.19-.08.3.3,0,0,1-.08-.21V9.1a.27.27,0,0,1,.08-.19.28.28,0,0,1,.2-.08.25.25,0,0,1,.19.07l2.54,2.54a.29.29,0,0,1,0,.4L4.88,14.36a.24.24,0,0,1-.2.09Zm15.19,1.12a.27.27,0,0,1,.19.08.25.25,0,0,1,.08.19v1.69a.27.27,0,0,1-.08.19.25.25,0,0,1-.19.08H4.68a.27.27,0,0,1-.19-.08.25.25,0,0,1-.08-.19V15.84a.27.27,0,0,1,.27-.27H19.87Zm0-3.38a.27.27,0,0,1,.19.08.28.28,0,0,1,.08.21v1.68a.32.32,0,0,1-.08.21.25.25,0,0,1-.19.08H10.31a.27.27,0,0,1-.19-.08.3.3,0,0,1-.08-.21V12.48a.32.32,0,0,1,.08-.21.24.24,0,0,1,.19-.08h9.56Zm0-3.37a.27.27,0,0,1,.19.08.25.25,0,0,1,.08.19v1.69a.27.27,0,0,1-.08.19.25.25,0,0,1-.19.08H10.31a.27.27,0,0,1-.27-.27V9.1a.27.27,0,0,1,.27-.27h9.56Zm.2-3.29a.28.28,0,0,1,.08.2V7.41a.32.32,0,0,1-.08.21.25.25,0,0,1-.19.08H4.68a.27.27,0,0,1-.19-.08.3.3,0,0,1-.08-.21V5.73a.32.32,0,0,1,.08-.21.25.25,0,0,1,.19-.08H19.87a.28.28,0,0,1,.2.09Z" transform="translate(-4.41 -5.44)"/></g></svg>',outdent:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 12.36"><g><path d="M19.87,15.57a.27.27,0,0,1,.19.08.25.25,0,0,1,.08.19v1.69a.27.27,0,0,1-.08.19.25.25,0,0,1-.19.08H4.68a.27.27,0,0,1-.19-.08.25.25,0,0,1-.08-.19V15.84a.27.27,0,0,1,.27-.27H19.87ZM7.5,14.45a.25.25,0,0,1-.2-.09L4.76,11.84a.29.29,0,0,1,0-.4L7.3,8.9a.29.29,0,0,1,.4,0,.31.31,0,0,1,.07.2v5.06a.32.32,0,0,1-.08.21.26.26,0,0,1-.19.08ZM19.87,8.82a.27.27,0,0,1,.19.08.25.25,0,0,1,.08.19v1.69a.27.27,0,0,1-.08.19.25.25,0,0,1-.19.08H10.31a.27.27,0,0,1-.27-.27V9.1a.27.27,0,0,1,.27-.27h9.56Zm0,3.37a.27.27,0,0,1,.19.08.28.28,0,0,1,.08.21v1.68a.32.32,0,0,1-.08.21.25.25,0,0,1-.19.08H10.31a.27.27,0,0,1-.19-.08.3.3,0,0,1-.08-.21V12.48a.32.32,0,0,1,.08-.21.24.24,0,0,1,.19-.08h9.56Zm.2-6.66a.28.28,0,0,1,.08.2V7.41a.32.32,0,0,1-.08.21.25.25,0,0,1-.19.08H4.68a.27.27,0,0,1-.19-.08.3.3,0,0,1-.08-.21V5.73a.32.32,0,0,1,.08-.21.25.25,0,0,1,.19-.08H19.87a.28.28,0,0,1,.2.09Z" transform="translate(-4.41 -5.44)"/></g></svg>',expansion:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 15.74"><g><path d="M11.8,13.06l-5.1,5.1H9.51V19.5H4.41V14.4H5.75v2.81L8.3,14.66q2.25-2.23,2.55-2.55Zm8.35-9.3v5.1H18.81V6.05l-5.1,5.1-1-1,5.1-5.1H15.05V3.76Z" transform="translate(-4.41 -3.76)"/></g></svg>',reduction:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 15.74"><g><path d="M14.91,10h2.87v1.38H12.55V6.12h1.38V9l5.24-5.24.48.49.49.48ZM6.77,11.92H12v5.23H10.62V14.26L5.37,19.5l-1-1L9.63,13.3H6.77Z" transform="translate(-4.4 -3.76)"/></g></svg>',code_view:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.73 11.8"><g><path d="M8.09,7.94a.76.76,0,0,1,.53.22.72.72,0,0,1,.21.52.76.76,0,0,1-.22.54L6.18,11.63l2.43,2.44a.69.69,0,0,1,.2.51.66.66,0,0,1-.21.51.75.75,0,0,1-.51.22.63.63,0,0,1-.51-.21h0L4.63,12.15a.7.7,0,0,1-.22-.53.67.67,0,0,1,.25-.55L7.57,8.16a.82.82,0,0,1,.52-.22Zm12.05,3.69a.7.7,0,0,1-.23.52L17,15.1h0a.66.66,0,0,1-.51.21.73.73,0,0,1-.51-.22.75.75,0,0,1-.22-.51.63.63,0,0,1,.21-.51l2.43-2.44L15.92,9.22a.73.73,0,0,1-.22-.53A.74.74,0,0,1,17,8.18h0l2.91,2.91a.67.67,0,0,1,.27.54Zm-5.9-5.9a.73.73,0,0,1,.61.32.71.71,0,0,1,.07.68L11,17a1,1,0,0,1-.22.32.6.6,0,0,1-.35.16.75.75,0,0,1-.69-.26.69.69,0,0,1-.12-.72L13.56,6.23a.75.75,0,0,1,.26-.35.74.74,0,0,1,.42-.15Z" transform="translate(-4.41 -5.73)"/></g></svg>',preview:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.65 15.66"><g><path d="M16.19,14.43l2.49,2.49a.73.73,0,0,1,.21.52.67.67,0,0,1-.22.51.7.7,0,0,1-.52.22.69.69,0,0,1-.51-.21l-2.49-2.48a5.17,5.17,0,0,1-1.34.69,4.64,4.64,0,0,1-1.48.24,4.78,4.78,0,1,1,0-9.56,4.79,4.79,0,0,1,1.84.36,4.9,4.9,0,0,1,1.56,1,4.77,4.77,0,0,1,.46,6.18ZM10,14a3.3,3.3,0,0,0,2.34.93A3.37,3.37,0,0,0,14.7,14a3.3,3.3,0,0,0-1.08-5.41,3.47,3.47,0,0,0-2.56,0A3,3,0,0,0,10,9.28,3.31,3.31,0,0,0,10,14ZM16,4a3.86,3.86,0,0,1,2.77,1.14A3.9,3.9,0,0,1,20,7.85v4a.77.77,0,0,1-.22.53.7.7,0,0,1-.52.21.72.72,0,0,1-.74-.74v-4a2.46,2.46,0,0,0-.72-1.73A2.37,2.37,0,0,0,16,5.45H8.53A2.42,2.42,0,0,0,6.08,7.89v7.52a2.41,2.41,0,0,0,.71,1.73,2.46,2.46,0,0,0,1.74.72h4.08a.73.73,0,0,1,0,1.46H8.53a3.85,3.85,0,0,1-2.78-1.14A3.93,3.93,0,0,1,4.6,15.4V7.87A3.94,3.94,0,0,1,5.76,5.09,3.88,3.88,0,0,1,8.54,4H16Z" transform="translate(-4.45 -3.8)"/></g></svg>',print:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16.05 16.04"><g><path d="M19.76,15.84a1.29,1.29,0,0,0,.39-.92V8.35A2.05,2.05,0,0,0,19.57,7a1.93,1.93,0,0,0-1.38-.57H6.37a1.95,1.95,0,0,0-2,2v6.56a1.23,1.23,0,0,0,.38.92,1.35,1.35,0,0,0,.93.38h2V14.9l-2,0V8.35a.67.67,0,0,1,.18-.47.62.62,0,0,1,.48-.19H18.18a.6.6,0,0,1,.46.19.66.66,0,0,1,.18.47V14.9h-2v1.32h2A1.35,1.35,0,0,0,19.76,15.84ZM17.52,7.69V5.06a1.31,1.31,0,0,0-.38-.92,1.34,1.34,0,0,0-.94-.38H8.34A1.3,1.3,0,0,0,7,5.06V7.69H8.34V5.06h7.87V7.69h1.31ZM8.34,12.93h7.87l0,5.26H8.34V12.93Zm7.87,5.26v0Zm.65,1.31a.6.6,0,0,0,.46-.19.72.72,0,0,0,.2-.47V12.29a.74.74,0,0,0-.2-.47.6.6,0,0,0-.46-.19H7.68a.6.6,0,0,0-.46.19.72.72,0,0,0-.2.47v6.55a.74.74,0,0,0,.2.47.6.6,0,0,0,.46.19h9.18ZM16.67,9.28a.7.7,0,0,0-.94,0,.63.63,0,0,0-.18.46.67.67,0,0,0,.18.47.68.68,0,0,0,.94,0,.66.66,0,0,0,.18-.47A.58.58,0,0,0,16.67,9.28Z" transform="translate(-4.25 -3.61)"/></g></svg>',template:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 14.27 15.64"><g><path d="M18.18,19.16a1,1,0,0,0,1-1V5.73a1,1,0,0,0-1-1h-2v1h2V18.19H6.37V5.73h2v-1h-2A.94.94,0,0,0,5.68,5a1,1,0,0,0-.29.7V18.18a.94.94,0,0,0,.29.69,1,1,0,0,0,.69.29H18.18ZM9.82,10.31h4.92a.49.49,0,0,0,.35-.15.47.47,0,0,0,.15-.35.49.49,0,0,0-.15-.35.47.47,0,0,0-.35-.15H9.82a.49.49,0,0,0-.35.15.47.47,0,0,0-.15.35.49.49,0,0,0,.15.35.47.47,0,0,0,.35.15Zm5.9,4.92H8.83a.49.49,0,0,0-.35.15.47.47,0,0,0-.15.35.49.49,0,0,0,.15.35.47.47,0,0,0,.35.15h6.89a.49.49,0,0,0,.35-.15.47.47,0,0,0,.15-.35.51.51,0,0,0-.5-.5ZM7.36,12.77a.49.49,0,0,0,.15.35.47.47,0,0,0,.35.15h8.85a.49.49,0,0,0,.35-.15.47.47,0,0,0,.15-.35.49.49,0,0,0-.15-.35.47.47,0,0,0-.35-.15H7.85a.49.49,0,0,0-.35.15.52.52,0,0,0-.14.35Z" transform="translate(-5.14 -3.77)"/><path d="M14.24,6.71a1,1,0,0,0,1-1,1,1,0,0,0-1-1,1,1,0,0,0-1-1h-2a.94.94,0,0,0-.69.28,1,1,0,0,0-.29.7A.94.94,0,0,0,9.62,5a.91.91,0,0,0-.29.69,1,1,0,0,0,.29.7,1,1,0,0,0,.69.29h3.93Z" transform="translate(-5.14 -3.77)"/></g></svg>',line_height:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.76 13.56"><g><path d="M4.4,4.88V8.26a2,2,0,0,0,.5.39s.1,0,.18-.12a.62.62,0,0,0,.17-.28c.06-.19.13-.44.21-.74s.14-.52.19-.66a.58.58,0,0,1,.21-.3,2.41,2.41,0,0,1,.63-.21,3.83,3.83,0,0,1,.88-.12,9.15,9.15,0,0,1,1.31.06.16.16,0,0,1,.11,0,.26.26,0,0,1,.06.14,4,4,0,0,1,0,.49v2l.05,3.77c0,1.41,0,2.68-.05,3.81a1.79,1.79,0,0,1-.11.49,10.68,10.68,0,0,1-1.4.45,1.12,1.12,0,0,0-.69.43v.31l0,.22.61,0c.85-.08,1.54-.12,2.06-.12a19.76,19.76,0,0,1,2.09.08,15.08,15.08,0,0,0,1.64.08,1.4,1.4,0,0,0,.29,0,1.58,1.58,0,0,0,0-.26l-.05-.43a2.26,2.26,0,0,0-.43-.17l-.77-.22-.15,0a2.55,2.55,0,0,1-.78-.28,2.56,2.56,0,0,1-.11-.75l0-1.29,0-3.15V7.53a10.51,10.51,0,0,1,.06-1.2,3.83,3.83,0,0,1,.6,0l1.88,0a2.18,2.18,0,0,1,.38,0,.45.45,0,0,1,.23.17.9.9,0,0,1,.05.25c0,.16.06.35.1.58a3.33,3.33,0,0,0,.14.55A6.39,6.39,0,0,0,15,9a2.91,2.91,0,0,0,.6-.15,2.77,2.77,0,0,0,0-.46l0-.51,0-2.95-.25,0-.38,0L15,4.94a.71.71,0,0,1-.18.15.45.45,0,0,1-.25.07l-.29,0H8.75l-.15,0H7.45a17,17,0,0,1-1.86,0L5.36,5l-.25-.13ZM19.75,16.14h-.69v-9h.69A.4.4,0,0,0,20.13,7c.06-.11,0-.24-.1-.39L18.92,5.15a.52.52,0,0,0-.86,0L17,6.58c-.12.15-.16.28-.1.39s.18.16.38.16h.69v9h-.69a.4.4,0,0,0-.38.16c-.06.11,0,.24.1.39l1.11,1.43a.52.52,0,0,0,.86,0L20,16.69c.12-.15.16-.28.1-.39a.4.4,0,0,0-.38-.16Z" transform="translate(-4.4 -4.86)"/></g></svg>',paragraph_style:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 11.81 15.74"><g><path d="M18.18,3.76v2h-2V19.5h-2V5.73h-2V19.5h-2V11.63a3.94,3.94,0,0,1,0-7.87h7.87Z" transform="translate(-6.37 -3.76)"/></g></svg>',text_style:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 13.76 15.74"><g><path d="M17.68,6.71a2.22,2.22,0,0,0,1.06-.22.74.74,0,0,0,.42-.7.73.73,0,0,0-.08-.33.67.67,0,0,0-.17-.22,1,1,0,0,0-.31-.15L18.26,5l-.45-.09A15.27,15.27,0,0,0,13.26,5V4.74c0-.66-.63-1-1.92-1-.24,0-.43.15-.59.46a4,4,0,0,0-.36,1.14h0v0a26.45,26.45,0,0,1-3.5.35A2,2,0,0,0,5.77,6a.84.84,0,0,0-.37.79,2.14,2.14,0,0,0,.41,1.29,1.23,1.23,0,0,0,1.05.63,16.62,16.62,0,0,0,3.29-.45l-.34,3.35c-.16,1.61-.29,2.9-.37,3.86s-.12,1.66-.12,2.09l0,.65a5.15,5.15,0,0,0,.05.6,1.28,1.28,0,0,0,.16.54.34.34,0,0,0,.28.18,1.16,1.16,0,0,0,.79-.46,3.66,3.66,0,0,0,.68-1,22.08,22.08,0,0,0,1-4.33q.49-3.1.78-6.15a24.69,24.69,0,0,1,4.62-.84Z" transform="translate(-5.4 -3.76)"/></g></svg>',save:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 15.74"><g><path d="M18.53,19.5l.2-.05A1.78,1.78,0,0,0,20.13,18l0-.09V7.14a2,2,0,0,0-.28-.64A3.18,3.18,0,0,0,19.43,6c-.5-.52-1-1-1.55-1.54A2.59,2.59,0,0,0,17.37,4a1.83,1.83,0,0,0-.61-.25H6l-.21,0a1.78,1.78,0,0,0-1.4,1.49l0,.1V17.87a2.49,2.49,0,0,0,.09.37,1.79,1.79,0,0,0,1.44,1.23l.09,0Zm-6.25-.6H6.92a.61.61,0,0,1-.68-.48.78.78,0,0,1,0-.22V12.3a.62.62,0,0,1,.69-.68H17.64a.62.62,0,0,1,.69.69V18.2a.64.64,0,0,1-.71.69H12.28ZM12,9.81H8.15a.63.63,0,0,1-.72-.71v-4a.64.64,0,0,1,.72-.72h7.66a.64.64,0,0,1,.72.72v4a.65.65,0,0,1-.74.72ZM13.5,5V9.18h1.78V5Z" transform="translate(-4.41 -3.76)"/></g></svg>',blockquote:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 475.082 475.081"><g><path d="M164.45,219.27h-63.954c-7.614,0-14.087-2.664-19.417-7.994c-5.327-5.33-7.994-11.801-7.994-19.417v-9.132c0-20.177,7.139-37.401,21.416-51.678c14.276-14.272,31.503-21.411,51.678-21.411h18.271c4.948,0,9.229-1.809,12.847-5.424c3.616-3.617,5.424-7.898,5.424-12.847V54.819c0-4.948-1.809-9.233-5.424-12.85c-3.617-3.612-7.898-5.424-12.847-5.424h-18.271c-19.797,0-38.684,3.858-56.673,11.563c-17.987,7.71-33.545,18.132-46.68,31.267c-13.134,13.129-23.553,28.688-31.262,46.677C3.855,144.039,0,162.931,0,182.726v200.991c0,15.235,5.327,28.171,15.986,38.834c10.66,10.657,23.606,15.985,38.832,15.985h109.639c15.225,0,28.167-5.328,38.828-15.985c10.657-10.663,15.987-23.599,15.987-38.834V274.088c0-15.232-5.33-28.168-15.994-38.832C192.622,224.6,179.675,219.27,164.45,219.27z"/><path d="M459.103,235.256c-10.656-10.656-23.599-15.986-38.828-15.986h-63.953c-7.61,0-14.089-2.664-19.41-7.994c-5.332-5.33-7.994-11.801-7.994-19.417v-9.132c0-20.177,7.139-37.401,21.409-51.678c14.271-14.272,31.497-21.411,51.682-21.411h18.267c4.949,0,9.233-1.809,12.848-5.424c3.613-3.617,5.428-7.898,5.428-12.847V54.819c0-4.948-1.814-9.233-5.428-12.85c-3.614-3.612-7.898-5.424-12.848-5.424h-18.267c-19.808,0-38.691,3.858-56.685,11.563c-17.984,7.71-33.537,18.132-46.672,31.267c-13.135,13.129-23.559,28.688-31.265,46.677c-7.707,17.987-11.567,36.879-11.567,56.674v200.991c0,15.235,5.332,28.171,15.988,38.834c10.657,10.657,23.6,15.985,38.828,15.985h109.633c15.229,0,28.171-5.328,38.827-15.985c10.664-10.663,15.985-23.599,15.985-38.834V274.088C475.082,258.855,469.76,245.92,459.103,235.256z"/></g></svg>',arrow_down:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.73 8.67"><g><path d="M18.79,7.52a.8.8,0,0,1,.56-.23.82.82,0,0,1,.79.79.8.8,0,0,1-.23.56l-7.07,7.07a.79.79,0,0,1-.57.25.77.77,0,0,1-.57-.25h0L4.64,8.65a.8.8,0,0,1-.23-.57.82.82,0,0,1,.79-.79.8.8,0,0,1,.56.23L12.28,14l3.26-3.26,3.25-3.26Z" transform="translate(-4.41 -7.29)"/></g></svg>',align_justify:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 13.77"><g><path d="M4.41,4.74v2H20.15v-2H4.41Zm0,5.9H20.15v-2H4.41v2Zm0,3.94H20.15v-2H4.41v2Zm0,3.93h7.87v-2H4.41v2Z" transform="translate(-4.41 -4.74)"/></g></svg>',align_left:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 13.77"><g><path d="M4.41,4.74v2H20.15v-2H4.41Zm11.8,3.94H4.41v2H16.22v-2Zm-11.8,5.9H18.18v-2H4.41v2Zm0,3.93h9.84v-2H4.41v2Z" transform="translate(-4.41 -4.74)"/></g></svg>',align_right:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 13.77"><g><path d="M4.41,4.74v2H20.15v-2H4.41Zm3.93,5.9H20.15v-2H8.34v2Zm-2,3.94H20.14v-2H6.37v2Zm3.94,3.93h9.84v-2H10.31v2Z" transform="translate(-4.41 -4.74)"/></g></svg>',align_center:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 13.77"><g><path d="M4.41,4.74v2H20.15v-2H4.41Zm2,3.94v2H18.18v-2H6.37Zm-1,5.9H19.16v-2H5.39v2Zm2,3.93H17.2v-2H7.36v2Z" transform="translate(-4.41 -4.74)"/></g></svg>',font_color:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 14.61"><g><path d="M18.5,15.57,14.28,4.32h-3.4L6.65,15.57h3l.8-2.26h4.23l.8,2.26h3ZM14,11.07H11.14L12.54,7,13.25,9c.41,1.18.64,1.86.7,2ZM4.41,16.69v2.24H20.15V16.69H4.41Z" transform="translate(-4.41 -4.32)"/></g></svg>',highlight_color:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.66 15.74"><g><path d="M12.32,9.31,13.38,13H11.21l.52-1.83q.46-1.61.54-1.83ZM4.44,3.76H20.1V19.5H4.44V3.76ZM14.71,17.32h2.63L13.7,6H10.89L7.26,17.32H9.89l.63-2.24h3.55l.32,1.12c.18.65.29,1,.32,1.12Z" transform="translate(-4.44 -3.76)"/></g></svg>',list_bullets:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 12.37"><g><path d="M7.77,16.12a1.59,1.59,0,0,0-.49-1.18,1.62,1.62,0,0,0-1.19-.49,1.68,1.68,0,1,0,0,3.36,1.67,1.67,0,0,0,1.68-1.69Zm0-4.48A1.67,1.67,0,0,0,6.09,10,1.68,1.68,0,0,0,4.9,12.82a1.62,1.62,0,0,0,1.19.49,1.67,1.67,0,0,0,1.68-1.67Zm12.38,3.64a.27.27,0,0,0-.08-.19.28.28,0,0,0-.2-.09H9.19a.28.28,0,0,0-.2.08.29.29,0,0,0-.08.19V17a.27.27,0,0,0,.28.28H19.87a.27.27,0,0,0,.19-.08.24.24,0,0,0,.08-.2V15.28ZM7.77,7.13a1.63,1.63,0,0,0-.49-1.2,1.61,1.61,0,0,0-1.19-.49,1.61,1.61,0,0,0-1.19.49,1.71,1.71,0,0,0,0,2.4,1.62,1.62,0,0,0,1.19.49,1.61,1.61,0,0,0,1.19-.49,1.63,1.63,0,0,0,.49-1.2Zm12.38,3.66a.28.28,0,0,0-.08-.2.29.29,0,0,0-.19-.08H9.19a.27.27,0,0,0-.28.28v1.69a.27.27,0,0,0,.08.19.24.24,0,0,0,.2.08H19.87a.27.27,0,0,0,.19-.08.25.25,0,0,0,.08-.19V10.79Zm0-4.5a.27.27,0,0,0-.08-.19A.25.25,0,0,0,19.88,6H9.19A.28.28,0,0,0,9,6.1a.26.26,0,0,0-.08.19V8A.27.27,0,0,0,9,8.17a.24.24,0,0,0,.2.08H19.87a.27.27,0,0,0,.19-.08A.25.25,0,0,0,20.14,8V6.29Z" transform="translate(-4.41 -5.44)"/></g></svg>',list_number:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.69 15.74"><g><path d="M7.66,18a1.24,1.24,0,0,0-.26-.78,1.17,1.17,0,0,0-.72-.42l.85-1V15H4.58v1.34h.94v-.46l.85,0h0c-.11.11-.22.23-.32.35s-.23.27-.37.47L5.39,17l.23.51c.61-.05.92.11.92.49a.42.42,0,0,1-.18.37.79.79,0,0,1-.45.12A1.41,1.41,0,0,1,5,18.15l-.51.77A2.06,2.06,0,0,0,6,19.5a1.8,1.8,0,0,0,1.2-.41A1.38,1.38,0,0,0,7.66,18Zm0-5.54H6.75V13H5.63A.72.72,0,0,1,6,12.51a5.45,5.45,0,0,1,.66-.45,2.71,2.71,0,0,0,.67-.57,1.19,1.19,0,0,0,.31-.81,1.29,1.29,0,0,0-.45-1,1.86,1.86,0,0,0-2-.11,1.51,1.51,0,0,0-.62.7l.74.52A.87.87,0,0,1,6,10.28a.51.51,0,0,1,.35.12.42.42,0,0,1,.13.33.55.55,0,0,1-.21.4,3,3,0,0,1-.5.38c-.19.13-.39.27-.58.42a2,2,0,0,0-.5.6,1.63,1.63,0,0,0-.21.81,3.89,3.89,0,0,0,.05.48h3.2V12.44Zm12.45,2.82a.27.27,0,0,0-.08-.19.28.28,0,0,0-.21-.08H9.1a.32.32,0,0,0-.21.08.24.24,0,0,0-.08.2V17a.27.27,0,0,0,.08.19.3.3,0,0,0,.21.08H19.83a.32.32,0,0,0,.21-.08.25.25,0,0,0,.08-.19V15.26ZM7.69,7.32h-1V3.76H5.8L4.6,4.88l.63.68a1.85,1.85,0,0,0,.43-.48h0l0,2.24H4.74V8.2h3V7.32Zm12.43,3.42a.27.27,0,0,0-.08-.19.28.28,0,0,0-.21-.08H9.1a.32.32,0,0,0-.21.08.24.24,0,0,0-.08.2v1.71a.27.27,0,0,0,.08.19.3.3,0,0,0,.21.08H19.83a.32.32,0,0,0,.21-.08.25.25,0,0,0,.08-.19V10.74Zm0-4.52A.27.27,0,0,0,20,6,.28.28,0,0,0,19.83,6H9.1A.32.32,0,0,0,8.89,6a.24.24,0,0,0-.08.19V7.93a.27.27,0,0,0,.08.19.32.32,0,0,0,.21.08H19.83A.32.32,0,0,0,20,8.12a.26.26,0,0,0,.08-.2V6.22Z" transform="translate(-4.43 -3.76)"/></g></svg>',table:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 15.74"><g><path d="M4.41,8.05V3.76H8.7V8.05H4.41Zm5.71,0V3.76h4.3V8.05h-4.3Zm5.74-4.29h4.29V8.05H15.86V3.76Zm-11.45,10V9.48H8.7v4.3H4.41Zm5.71,0V9.48h4.3v4.3h-4.3Zm5.74,0V9.48h4.29v4.3H15.86ZM4.41,19.5V15.21H8.7V19.5H4.41Zm5.71,0V15.21h4.3V19.5h-4.3Zm5.74,0V15.21h4.29V19.5H15.86Z" transform="translate(-4.41 -3.76)"/></g></svg>',horizontal_rule:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 2.24"><g><path d="M20.15,12.75V10.51H4.41v2.24H20.15Z" transform="translate(-4.41 -10.51)"/></g></svg>',show_blocks:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.66 15.67"><g><path d="M19.72,5.58a1.64,1.64,0,0,0-1.64-1.64H6.23a1.62,1.62,0,0,0-1.16.48,1.63,1.63,0,0,0-.48,1.16V9.63a1.6,1.6,0,0,0,.48,1.16,1.62,1.62,0,0,0,1.16.47H18.09a1.67,1.67,0,0,0,1.16-.47,1.62,1.62,0,0,0,.48-1.16V5.58Zm-.94,4.05a.68.68,0,0,1-.7.7H6.23a.66.66,0,0,1-.48-.2.74.74,0,0,1-.21-.5V5.58a.66.66,0,0,1,.2-.48.71.71,0,0,1,.48-.21H18.08a.74.74,0,0,1,.5.21.66.66,0,0,1,.2.48ZM6.48,7.72a.21.21,0,0,0,.17-.07.22.22,0,0,0,.07-.17V7.06a1.27,1.27,0,0,1,.11-.52.37.37,0,0,1,.36-.23H8.77A.25.25,0,0,0,9,6.17a.19.19,0,0,0,0-.23.27.27,0,0,0-.2-.12H7.19a.88.88,0,0,0-.72.39,1.51,1.51,0,0,0-.23.85v.42a.24.24,0,0,0,.24.24Zm-.19.81a.21.21,0,0,0,.17-.07.26.26,0,0,0,.07-.17.24.24,0,0,0-.24-.24.2.2,0,0,0-.16.09.2.2,0,0,0-.07.16.22.22,0,0,0,.07.17.23.23,0,0,0,.16.06Zm8.46,5.1a1.63,1.63,0,0,0-.47-1.16A1.61,1.61,0,0,0,13.12,12H6.23a1.6,1.6,0,0,0-1.16.46,1.62,1.62,0,0,0-.48,1.16v4.05a1.64,1.64,0,0,0,1.64,1.64h6.89a1.6,1.6,0,0,0,1.16-.48,1.62,1.62,0,0,0,.47-1.16Zm-.94,4a.7.7,0,0,1-.2.49.65.65,0,0,1-.5.2H6.23a.66.66,0,0,1-.48-.2.75.75,0,0,1-.21-.49v-4a.74.74,0,0,1,.21-.5.66.66,0,0,1,.48-.2h6.89a.68.68,0,0,1,.7.7v4Zm6.15,0v-4a1.6,1.6,0,0,0-.48-1.16A1.67,1.67,0,0,0,18.32,12H17.1a1.63,1.63,0,0,0-1.16.47,1.61,1.61,0,0,0-.47,1.16v4a1.67,1.67,0,0,0,.47,1.16,1.62,1.62,0,0,0,1.16.48h1.22A1.64,1.64,0,0,0,20,17.68Zm-.94-4v4a.75.75,0,0,1-.21.49.62.62,0,0,1-.48.2H17.11a.69.69,0,0,1-.5-.2.7.7,0,0,1-.2-.49v-4a.68.68,0,0,1,.7-.7h1.22a.66.66,0,0,1,.48.2.72.72,0,0,1,.21.5Z" transform="translate(-4.44 -3.79)"/></g></svg>',cancel:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 15.74"><g><path d="M14.15,11.63l5.61,5.61a1.29,1.29,0,0,1,.38.93,1.27,1.27,0,0,1-.4.93,1.25,1.25,0,0,1-.92.4,1.31,1.31,0,0,1-.94-.4l-5.61-5.61L6.67,19.1a1.31,1.31,0,0,1-.94.4,1.24,1.24,0,0,1-.92-.4,1.27,1.27,0,0,1-.4-.93,1.33,1.33,0,0,1,.38-.93l5.61-5.63L4.79,6a1.26,1.26,0,0,1-.38-.93,1.22,1.22,0,0,1,.4-.92,1.28,1.28,0,0,1,.92-.39,1.38,1.38,0,0,1,.94.38l5.61,5.61,5.61-5.61a1.33,1.33,0,0,1,.94-.38,1.26,1.26,0,0,1,.92.39,1.24,1.24,0,0,1,.4.92,1.29,1.29,0,0,1-.39.93L17,8.81l-2.8,2.82Z" transform="translate(-4.41 -3.76)"/></g></svg>',image:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.75 15.77"><g><path d="M8.77,8.72a.88.88,0,0,1-.61-.27.82.82,0,0,1-.25-.61.89.89,0,0,1,.25-.62A.82.82,0,0,1,8.77,7a.81.81,0,0,1,.61.25.83.83,0,0,1,.27.62.81.81,0,0,1-.25.61.91.91,0,0,1-.63.27Zm9.62-5a1.74,1.74,0,0,1,1.76,1.76V17.76a1.74,1.74,0,0,1-1.76,1.76H6.16A1.74,1.74,0,0,1,4.4,17.76V5.51A1.74,1.74,0,0,1,6.16,3.75H18.39Zm0,1.75H6.16v8L8.53,11.8a.94.94,0,0,1,.54-.17.86.86,0,0,1,.54.2L11.09,13l3.64-4.55a.78.78,0,0,1,.34-.25.85.85,0,0,1,.42-.07.89.89,0,0,1,.39.12.78.78,0,0,1,.28.29l2.24,3.67V5.51Zm0,12.24V15.6L15.3,10.53,11.89,14.8a.89.89,0,0,1-.59.32.82.82,0,0,1-.64-.18L9,13.62,6.16,15.74v2Z" transform="translate(-4.4 -3.75)"/></g></svg>',video:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 14.55"><g><path d="M20.15,10.26V18.9l-3.94-1.57v1.2H4.41V10.66H16.22v1.23l2-.81,2-.82ZM14.64,17h0V12.54h0v-.31H6V17h8.67Zm3.94-.37v-4l-2.37,1v2l1.18.48,1.19.48ZM7.94,9.86A2.77,2.77,0,0,1,5.19,7.11a2.76,2.76,0,0,1,5.51,0A2.78,2.78,0,0,1,7.94,9.86Zm0-3.93a1.21,1.21,0,0,0-.83.35,1.15,1.15,0,0,0-.34.84A1.09,1.09,0,0,0,7.11,8,1.15,1.15,0,0,0,8,8.28,1.13,1.13,0,0,0,9.11,7.12,1.16,1.16,0,0,0,7.94,5.93Zm5.9,3.93a2.34,2.34,0,0,1-1.67-.68,2.3,2.3,0,0,1-.68-1.67,2.35,2.35,0,0,1,4-1.67,2.37,2.37,0,0,1,0,3.34,2.33,2.33,0,0,1-1.68.68Zm0-3.14a.75.75,0,1,0,.55.22.73.73,0,0,0-.55-.22Z" transform="translate(-4.41 -4.35)"/></g></svg>',link:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 15.72"><g><path d="M13.05,13.63a.24.24,0,0,1,.15.22L13.42,16a.19.19,0,0,1-.08.18l-2.12,2.14a4.08,4.08,0,0,1-1.29.85A4,4,0,0,1,4.71,17a3.92,3.92,0,0,1-.3-1.52A4,4,0,0,1,4.71,14a3.91,3.91,0,0,1,.87-1.3L7.7,10.56a.25.25,0,0,1,.2-.06l2.17.22a.21.21,0,0,1,.19.15.24.24,0,0,1,0,.25L7.12,14.23a1.81,1.81,0,0,0,0,2.58,1.78,1.78,0,0,0,1.29.52,1.74,1.74,0,0,0,1.28-.52L12.8,13.7a.24.24,0,0,1,.25-.07ZM19,4.92a4,4,0,0,1,0,5.66L16.86,12.7a.25.25,0,0,1-.17.08l-2.2-.23a.21.21,0,0,1-.19-.15.22.22,0,0,1,0-.25L17.44,9a1.81,1.81,0,0,0,0-2.58,1.78,1.78,0,0,0-1.29-.52,1.74,1.74,0,0,0-1.28.52L11.76,9.57a.21.21,0,0,1-.25,0,.24.24,0,0,1-.16-.21l-.22-2.17a.19.19,0,0,1,.08-.18l2.12-2.14a4.08,4.08,0,0,1,1.29-.85,4.05,4.05,0,0,1,3.06,0,3.85,3.85,0,0,1,1.3.85ZM5.84,9.82a.25.25,0,0,1-.18-.08.19.19,0,0,1-.07-.19l.11-.77a.2.2,0,0,1,.11-.17.24.24,0,0,1,.2,0l2.5.72a.25.25,0,0,1,.15.27.22.22,0,0,1-.23.21l-2.59,0Zm4.12-2-.73-2.5a.27.27,0,0,1,0-.2A.21.21,0,0,1,9.41,5L10.19,5a.25.25,0,0,1,.19,0,.23.23,0,0,1,.08.18l-.05,2.61a.2.2,0,0,1-.19.23h0A.22.22,0,0,1,10,7.85Zm8.76,5.58a.25.25,0,0,1,.18.08.23.23,0,0,1,.06.2l-.11.77a.25.25,0,0,1-.11.17.21.21,0,0,1-.12,0l-.08,0L16,14a.25.25,0,0,1-.15-.27.22.22,0,0,1,.22-.21l1.29,0,1.33,0Zm-4.12,2,.74,2.51a.28.28,0,0,1,0,.2.23.23,0,0,1-.18.11l-.8.11a.23.23,0,0,1-.17-.07.25.25,0,0,1-.08-.18l0-2.61a.22.22,0,0,1,.22-.22.21.21,0,0,1,.26.15Z" transform="translate(-4.41 -3.77)"/></g></svg>',math:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 11.81 15.73"><g><path d="M17.19,5.73a1,1,0,0,0,.71-.29,1,1,0,0,0,.28-.7,1,1,0,0,0-1-1H7.35a1,1,0,0,0-1,1,.77.77,0,0,0,.13.47h0l4.58,6.43L6.68,17.81a1.25,1.25,0,0,0-.29.71.94.94,0,0,0,.28.7.92.92,0,0,0,.69.28H17.2a1,1,0,0,0,.71-.28,1,1,0,0,0,0-1.39.92.92,0,0,0-.71-.29H9.26l3.87-5.43a.86.86,0,0,0,0-.95L9.26,5.73h7.93Z" transform="translate(-6.38 -3.77)"/></g></svg>',unlink:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 15.72"><g><path d="M19,18.32a4,4,0,0,0,0-5.68L15.85,9.5l-1.17,1.55L17.57,14a2,2,0,0,1,.61,1.47,2.08,2.08,0,0,1-2.09,2.09,2,2,0,0,1-1.47-.61l-.38-.37-1.74,1,.8.78a4,4,0,0,0,5.68,0ZM8,9.77a2,2,0,0,1-1.27-1,1.89,1.89,0,0,1-.21-1.57A2.1,2.1,0,0,1,7.45,6,2,2,0,0,1,9,5.76L12.27,7.2l.49-2L9.48,3.9a4,4,0,0,0-3.06.41A3.82,3.82,0,0,0,4.56,6.73a3.8,3.8,0,0,0,.4,3A3.78,3.78,0,0,0,7.39,11.6l5.38,2,.49-2-2.64-.94L8,9.77Z" transform="translate(-4.41 -3.76)"/></g></svg>',table_header:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.75 15.74"><g><path d="M17,19.5v-.78H15.5v.78H17Zm-3,0v-.78H12.5v.78H14Zm-3,0v-.78H9.53v.78H11Zm-3,0v-.78H6.53v.78H8Zm10.55,0a1.73,1.73,0,0,0,.85-.35,1.67,1.67,0,0,0,.56-.76l-.71-.31a1.21,1.21,0,0,1-.35.4,1.34,1.34,0,0,1-.53.23l.08.38c.06.24.09.38.1.41Zm-13.7-.63.55-.55A.77.77,0,0,1,5.25,18a1.31,1.31,0,0,1-.06-.38v-.38H4.41v.38a2,2,0,0,0,.12.68,1.6,1.6,0,0,0,.35.57Zm15.27-2.12V15.26h-.78v1.49h.78Zm-15-1V14.23H4.41v1.49h.78Zm15-2V12.26h-.78v1.49h.78Zm-15-1V11.22H4.41v1.51h.78Zm15-2V9.26h-.78v1.51h.78Zm-15-1V8.17H4.41V9.74h.78Zm15-2V6.28h-.78V7.77h.78Zm-15-1.11V5.33L4.48,5.1a.77.77,0,0,0-.07.27,2.72,2.72,0,0,0,0,.28v1h.79ZM19.21,5l.63-.4A1.62,1.62,0,0,0,19.16,4a1.94,1.94,0,0,0-.91-.22v.78a1.31,1.31,0,0,1,.56.12.88.88,0,0,1,.4.36ZM6,4.54H7.78V3.76H6a.82.82,0,0,0-.28.06l.12.35c.07.21.1.33.11.36Zm10.8,0V3.76H15.28v.78h1.49Zm-3,0V3.76H12.28v.78h1.49Zm-3,0V3.76H9.28v.78h1.51ZM6,10.84h12.6V6.91H6Z" transform="translate(-4.4 -3.76)"/></g></svg>',merge_cell:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.76 15.74"><g><path d="M18.92,13.5h1.23v4.15A1.84,1.84,0,0,1,18.3,19.5H14V18.27H18.3a.6.6,0,0,0,.44-.18.59.59,0,0,0,.18-.44V13.5ZM18.3,3.76a1.84,1.84,0,0,1,1.85,1.85V9.82H18.92V5.6a.6.6,0,0,0-.18-.44A.59.59,0,0,0,18.3,5H14V3.76H18.3Zm1.85,8.51H15.6L17.26,14l-.86.86-3.14-3.17L16.4,8.51l.86.86L15.62,11h4.54v1.24Zm-13.9,6h4.27V19.5H6.25A1.84,1.84,0,0,1,4.4,17.65V13.5H5.63v4.15a.61.61,0,0,0,.62.62Zm0-14.51h4.27V5H6.25a.6.6,0,0,0-.44.18.57.57,0,0,0-.17.43V9.81H4.41V5.6A1.83,1.83,0,0,1,6.25,3.76Zm5,7.9L8.15,14.83,7.3,14,9,12.27H4.41V11H8.94L7.3,9.38,7.73,9l.43-.43Z" transform="translate(-4.4 -3.76)"/></g></svg>',split_cell:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.75 15.74"><g><path d="M10.37,12.25H6.74L8.4,13.94l-.87.86L4.41,11.63,7.53,8.5l.87.86L6.74,11h3.62v1.23Zm9.78-.61L17,14.81,16.13,14l1.66-1.69H14.16V11h3.63L16.13,9.37l.43-.43A5.24,5.24,0,0,1,17,8.51ZM18.9,8.22V5.61a.57.57,0,0,0-.18-.43A.65.65,0,0,0,18.29,5H12.88V18.28h5.41a.7.7,0,0,0,.44-.18.57.57,0,0,0,.18-.43V15h1.23v2.64a1.84,1.84,0,0,1-1.85,1.83h-12A1.84,1.84,0,0,1,4.94,19a1.81,1.81,0,0,1-.54-1.29V15H5.63v2.64a.57.57,0,0,0,.18.43.67.67,0,0,0,.44.18h5.41V5H6.25a.7.7,0,0,0-.44.18.56.56,0,0,0-.17.43V8.22H4.41V5.61A1.8,1.8,0,0,1,5,4.31a1.91,1.91,0,0,1,1.31-.55h12a1.89,1.89,0,0,1,1.31.55,1.8,1.8,0,0,1,.54,1.3V8.23H18.9Z" transform="translate(-4.4 -3.76)"/></g></svg>',caption:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 13.79"><g><path d="M4.41,18.52H20.15v-2H4.41ZM20,4.73H18.07V6h.65v.65H20V4.73ZM17,6V4.73H14.55V6H17ZM13.49,6V4.73H11V6h2.47ZM10,6V4.73H7.5V6H10ZM5.79,6h.65V4.73H4.5V6.67H5.8V6ZM4.5,11.34H5.79V8.48H4.5ZM6.44,13.8H5.79v-.65H4.5v1.94H6.44ZM17,15.09V13.8H14.55v1.29H17Zm-3.52,0V13.8H11v1.29h2.47Zm-3.53,0V13.8H7.5v1.29H10ZM20,13.16H18.72v.65h-.65V15.1H20Zm-1.29-1.82H20V8.48h-1.3v2.86Z" transform="translate(-4.41 -4.73)"/></g></svg>',edit:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 15.73"><g><path d="M7.51,5.68h6l1.52-1.57H6.94a2.4,2.4,0,0,0-1.79.82A2.8,2.8,0,0,0,4.41,6.8V17a2.55,2.55,0,0,0,.75,1.8A2.48,2.48,0,0,0,7,19.5H17.22a2.57,2.57,0,0,0,1.83-.74,2.52,2.52,0,0,0,.77-1.8V8.83l-1.58,1.54v6a1.54,1.54,0,0,1-1.53,1.53H7.51A1.54,1.54,0,0,1,6,16.41V7.21A1.52,1.52,0,0,1,7.51,5.68Zm5.63,7.47h0L10.7,10.74l-1,3.38,1.71-.48,1.7-.49Zm.34-.34h0l5.36-5.32L16.4,5.08,11,10.4l1.23,1.21,1.21,1.2ZM19.93,6.4a.82.82,0,0,0,.22-.48A.54.54,0,0,0,20,5.47L18.45,4A.67.67,0,0,0,18,3.77a.7.7,0,0,0-.48.21l-.74.72,2.44,2.43.37-.37.35-.36Z" transform="translate(-4.41 -3.77)"/></g></svg>',delete:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.73 15.74"><g><path d="M19.16,6.71a.94.94,0,0,0,.69-.28.91.91,0,0,0,.29-.68A1,1,0,0,0,19.85,5a.93.93,0,0,0-.69-.3H14.24A.94.94,0,0,0,14,4.06a.92.92,0,0,0-.7-.3h-2a1,1,0,0,0-.7.3.93.93,0,0,0-.28.68H5.39A.92.92,0,0,0,4.7,5a1,1,0,0,0-.29.71.91.91,0,0,0,.29.68,1,1,0,0,0,.69.28H19.16Zm-12.79,1a1,1,0,0,0-.7.3.94.94,0,0,0-.28.69v8.85A1.88,1.88,0,0,0,6,18.93a1.9,1.9,0,0,0,1.39.57H17.2a1.87,1.87,0,0,0,1.39-.58,1.91,1.91,0,0,0,.58-1.39V8.68A1,1,0,0,0,18.88,8a.89.89,0,0,0-.7-.29,1,1,0,0,0-.69.29.92.92,0,0,0-.29.68v7.87a1,1,0,0,1-1,1H8.34a.94.94,0,0,1-.69-.28,1,1,0,0,1-.29-.71V8.68a1,1,0,0,0-1-1Z" transform="translate(-4.41 -3.76)"/></g></svg>',modify:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.7 15.74"><g><path d="M19.79,15.23a.66.66,0,0,1,.3.38.59.59,0,0,1-.07.48l-.8,1.38a.66.66,0,0,1-.38.3.59.59,0,0,1-.48-.07l-.68-.38a4.55,4.55,0,0,1-1.34.77v.78a.64.64,0,0,1-.18.45.61.61,0,0,1-.45.18h-1.6a.6.6,0,0,1-.44-.18.66.66,0,0,1-.19-.45v-.78a4.36,4.36,0,0,1-1.32-.77l-.69.38a.58.58,0,0,1-.48.07.66.66,0,0,1-.38-.3l-.38-.66h.83a1.77,1.77,0,0,0,1.23-.52,1.72,1.72,0,0,0,.51-1.23v-.18a3,3,0,0,0,.49-.28l.15.09a1.83,1.83,0,0,0,.88.23A1.75,1.75,0,0,0,15.84,14l.88-1.52a1.7,1.7,0,0,0,.17-1.32,1.66,1.66,0,0,0-.3-.61,1.84,1.84,0,0,0-.51-.45l-.15-.09,0-.29,0-.28.15-.09a1,1,0,0,0,.26-.18l0,.06v.78a4.34,4.34,0,0,1,1.34.77l.68-.38a.68.68,0,0,1,.48-.06.64.64,0,0,1,.38.29l.8,1.38a.58.58,0,0,1,.07.48.63.63,0,0,1-.3.38l-.68.4a3.84,3.84,0,0,1,.08.76,4.13,4.13,0,0,1-.08.78l.34.18.32.2ZM10.17,7.86a1.9,1.9,0,0,1,1.35,3.23,1.85,1.85,0,0,1-1.35.55A1.9,1.9,0,0,1,8.83,8.41a1.92,1.92,0,0,1,1.34-.55Zm1.58,7.2a.73.73,0,0,1-.21.49.66.66,0,0,1-.48.2H9.29a.68.68,0,0,1-.69-.69V14.2a4.75,4.75,0,0,1-1.48-.86l-.75.45a.73.73,0,0,1-.7,0,.63.63,0,0,1-.25-.26L4.54,12a.67.67,0,0,1-.08-.53.71.71,0,0,1,.32-.42l.75-.43a4.8,4.8,0,0,1-.08-.85,4.71,4.71,0,0,1,.08-.85l-.74-.44a.71.71,0,0,1-.32-.42.65.65,0,0,1,.07-.54L5.42,6a.66.66,0,0,1,.42-.32l.18,0a.73.73,0,0,1,.35.09l.75.43A4.68,4.68,0,0,1,8.6,5.33V4.45a.68.68,0,0,1,.69-.69h1.77a.64.64,0,0,1,.48.2.73.73,0,0,1,.21.49v.88a4.75,4.75,0,0,1,1.48.85L14,5.75a.67.67,0,0,1,.34-.09l.18,0a.71.71,0,0,1,.42.32l.89,1.54a.67.67,0,0,1,.06.52.73.73,0,0,1-.32.43l-.75.42a4.8,4.8,0,0,1,.08.85,4.71,4.71,0,0,1-.08.85l.75.43a.66.66,0,0,1,.32.42.73.73,0,0,1-.06.54l-.89,1.52a.69.69,0,0,1-.25.26.7.7,0,0,1-.35.09.64.64,0,0,1-.34-.09l-.75-.45a4.87,4.87,0,0,1-1.48.86v.87ZM7.23,9.75a3,3,0,0,0,.86,2.08,2.94,2.94,0,1,0,4.16-4.16,3,3,0,0,0-2.08-.85A2.94,2.94,0,0,0,7.23,9.75Z" transform="translate(-4.44 -3.76)"/></g></svg>',revert:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.76 14.69"><g><path d="M18.26,15V12.3l1.89-2V15a2.58,2.58,0,0,1-.24,1c-.2.58-.75.92-1.65,1H7.56v2L4.41,15.63,7.56,13v2h10.7ZM6.3,8.28V11L4.41,13V8.28a2.58,2.58,0,0,1,.24-1c.2-.58.75-.92,1.65-1H17v-2l3.15,3.34L17,10.3v-2H6.3Z" transform="translate(-4.4 -4.28)"/></g></svg>',auto_size:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 15.74"><g><path d="M6.71,17.19,6.89,16l1.21-.15A6,6,0,0,1,6.81,13.9a5.78,5.78,0,0,1-.45-2.27A6,6,0,0,1,8.1,7.45a5.83,5.83,0,0,1,4.17-1.73l1-1-1-1A7.89,7.89,0,0,0,5,14.64a7.73,7.73,0,0,0,1.71,2.55Zm5.57,2.31h0A7.86,7.86,0,0,0,17.85,6.07L17.67,7.3l-1.21.15a5.9,5.9,0,0,1,1.29,1.92,5.81,5.81,0,0,1,.45,2.26,5.91,5.91,0,0,1-5.9,5.9l-1,1,.49.49.47.5Z" transform="translate(-4.41 -3.76)"/></g></svg>',insert_row_below:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.8 15.8"><g><path d="M15.7,1.3c-0.1-0.1-0.1-0.2-0.2-0.2L15.3,1H0.4L0.3,1.1c0,0-0.1,0.1-0.1,0.1c0,0-0.1,0.1-0.1,0.1L0,1.4v7.7l0.1,0.1c0,0.1,0.1,0.1,0.2,0.2l0.1,0.1h2.3V9.3l0.1-0.5L3,8.5l0.1-0.2c-0.1,0-0.2,0-0.3,0H1.2v-6h13.3v6h-1.6c-0.1,0-0.2,0-0.3,0l0.1,0.2l0.2,0.4C12.9,9,13,9.2,13,9.3v0.1h2.3l0.2-0.1c0.1,0,0.1-0.1,0.2-0.2l0.1-0.1V1.4L15.7,1.3z"/><path d="M10.5,7.5C9.9,7.1,9.3,6.8,8.6,6.7c-0.2,0-0.5-0.1-0.7,0c-0.2,0-0.5,0-0.7,0C6.6,6.7,6.1,6.9,5.6,7.3C5.2,7.6,4.7,8,4.4,8.4C4.3,8.6,4.2,8.8,4.2,8.9C4.1,9.1,4,9.3,3.9,9.4C3.9,9.6,3.8,9.7,3.8,9.9c0,0.2-0.1,0.3-0.1,0.5v-0.1c-0.1,0.8,0.1,1.6,0.5,2.4c0.4,0.7,1,1.3,1.7,1.7c0.3,0.2,0.6,0.3,0.9,0.3c0.3,0.1,0.7,0.1,1,0.1c0.3,0,0.7,0,1-0.1c0.3-0.1,0.6-0.2,0.9-0.3c0.5-0.3,0.9-0.6,1.3-1c0.3-0.4,0.6-0.8,0.8-1.3c0.1-0.4,0.2-0.9,0.2-1.4c0-0.5-0.1-1-0.3-1.4C11.5,8.6,11.1,8,10.5,7.5z M10.1,11.3H8.5v1.6H8H7.9H7.3v0v-0.1v-1.4H5.7v-0.4v-0.2v-0.6h0h1.5V8.5h1.2v1.6h1.6V11.3z"/></g></svg>',insert_row_above:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.8 15.8"><g><path d="M0.1,14.5c0.1,0.1,0.1,0.2,0.2,0.2l0.1,0.1h14.9l0.1-0.1c0,0,0.1-0.1,0.1-0.1c0,0,0.1-0.1,0.1-0.1l0.1-0.1V6.7l-0.1-0.1c0-0.1-0.1-0.1-0.2-0.2l-0.1-0.1h-2.3v0.1l-0.1,0.5l-0.2,0.4l-0.1,0.2c0.1,0,0.2,0,0.3,0h1.6v6H1.3v-6h1.6c0.1,0,0.2,0,0.3,0L3.1,7.3L2.9,6.9C2.8,6.8,2.8,6.6,2.7,6.5V6.3H0.4L0.3,6.4c-0.1,0-0.1,0.1-0.2,0.2L0,6.7v7.7L0.1,14.5z"/><path d="M5.3,8.3c0.6,0.5,1.2,0.8,1.9,0.9c0.2,0,0.5,0.1,0.7,0c0.2,0,0.5,0,0.7,0c0.6-0.1,1.1-0.3,1.6-0.6c0.5-0.3,0.9-0.7,1.2-1.2c0.1-0.2,0.2-0.3,0.3-0.5c0.1-0.2,0.2-0.4,0.2-0.5c0.1-0.1,0.1-0.3,0.1-0.4C12,5.8,12,5.6,12,5.4v0.1c0.1-0.8-0.1-1.6-0.5-2.4c-0.4-0.7-1-1.3-1.7-1.7C9.5,1.3,9.2,1.2,8.9,1.1C8.5,1,8.2,1,7.9,1c-0.3,0-0.7,0-1,0.1C6.6,1.2,6.3,1.3,6,1.4C5.5,1.7,5.1,2,4.7,2.4C4.4,2.8,4.1,3.3,3.9,3.8C3.8,4.2,3.7,4.7,3.7,5.2c0,0.5,0.1,1,0.3,1.4C4.3,7.2,4.7,7.8,5.3,8.3z M5.7,4.5h1.6V2.9h0.5h0.1h0.6v0v0.1v1.4H10v0.4v0.2v0.6h0H8.5v1.6H7.3V5.7H5.7V4.5z"/></g></svg>',insert_column_left:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.8 15.8"><g><path d="M14.5,15.7c0.1-0.1,0.2-0.1,0.2-0.2l0.1-0.1V0.4l-0.1-0.1c0,0-0.1-0.1-0.1-0.1c0,0-0.1-0.1-0.1-0.1L14.4,0H6.7L6.6,0.1c-0.1,0-0.1,0.1-0.2,0.2L6.3,0.4v2.3h0.1l0.5,0.1L7.3,3l0.2,0.1c0-0.1,0-0.2,0-0.3V1.2h6v13.3h-6v-1.6c0-0.1,0-0.2,0-0.3l-0.2,0.1l-0.4,0.2C6.7,12.9,6.6,13,6.4,13H6.3v2.3l0.1,0.2c0,0.1,0.1,0.1,0.2,0.2l0.1,0.1h7.7L14.5,15.7z"/><path d="M8.3,10.5C8.7,10,9,9.3,9.1,8.6c0-0.2,0.1-0.5,0-0.7c0-0.2,0-0.5,0-0.7C9,6.7,8.8,6.1,8.5,5.7C8.2,5.2,7.8,4.8,7.3,4.5C7.2,4.4,7,4.3,6.9,4.2C6.7,4.1,6.5,4,6.4,4C6.2,3.9,6.1,3.9,5.9,3.8c-0.2,0-0.3-0.1-0.5-0.1h0.1C4.7,3.7,3.8,3.9,3.1,4.3C2.4,4.7,1.8,5.3,1.4,6C1.3,6.3,1.2,6.6,1.1,6.9C1,7.2,1,7.6,1,7.9c0,0.3,0,0.7,0.1,1c0.1,0.3,0.2,0.6,0.3,0.9c0.3,0.5,0.6,0.9,1,1.3c0.4,0.3,0.8,0.6,1.3,0.8C4.2,12,4.7,12.1,5.1,12c0.5,0,1-0.1,1.4-0.3C7.2,11.5,7.8,11.1,8.3,10.5zM4.5,10.1V8.5H2.9V8V7.9V7.3h0H3h1.4V5.7h0.4h0.2h0.6v0v1.5h1.6v1.2H5.7v1.6H4.5z"/></g></svg>',insert_column_right:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.8 15.8"><g><path d="M1.3,0.1C1.2,0.2,1.1,0.2,1.1,0.3L1,0.4v14.9l0.1,0.1c0,0,0.1,0.1,0.1,0.1c0,0,0.1,0.1,0.1,0.1l0.1,0.1h7.7l0.1-0.1c0.1,0,0.1-0.1,0.2-0.2l0.1-0.1v-2.3H9.3l-0.5-0.1l-0.4-0.2l-0.2-0.1c0,0.1,0,0.2,0,0.3v1.6h-6V1.3h6v1.6c0,0.1,0,0.2,0,0.3l0.2-0.1l0.4-0.2C9,2.9,9.2,2.8,9.3,2.8h0.1V0.5L9.4,0.3c0-0.1-0.1-0.1-0.2-0.2L9.1,0H1.4L1.3,0.1z"/><path d="M7.5,5.3C7,5.8,6.7,6.5,6.6,7.2c0,0.2-0.1,0.5,0,0.7c0,0.2,0,0.5,0,0.7c0.1,0.6,0.3,1.1,0.6,1.6c0.3,0.5,0.7,0.9,1.2,1.2c0.2,0.1,0.3,0.2,0.5,0.3c0.2,0.1,0.4,0.2,0.5,0.2c0.1,0.1,0.3,0.1,0.4,0.1c0.2,0,0.3,0.1,0.5,0.1h-0.1c0.8,0.1,1.6-0.1,2.4-0.5c0.7-0.4,1.3-1,1.7-1.7c0.2-0.3,0.3-0.6,0.3-0.9c0.1-0.3,0.1-0.7,0.1-1c0-0.3,0-0.7-0.1-1c-0.1-0.3-0.2-0.6-0.3-0.9c-0.3-0.5-0.6-0.9-1-1.3C13,4.4,12.5,4.2,12,4c-0.4-0.1-0.9-0.2-1.4-0.2c-0.5,0-1,0.1-1.4,0.2C8.5,4.3,7.9,4.7,7.5,5.3z M11.3,5.7v1.6h1.6v0.5v0.1v0.6h0h-0.1h-1.4v1.6h-0.4h-0.2h-0.6v0V8.5H8.5V7.3h1.6V5.7H11.3z"/></g></svg>',delete_row:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.75 13.83"><g><path d="M4.7,18.46l.12.08H19.73l.12-.08a.58.58,0,0,0,.22-.22l.08-.12,0-7.69-.08-.11a.77.77,0,0,0-.18-.18l-.11-.08-2.31,0-.08.28-.1.29a1.58,1.58,0,0,1-.12.29l-.14.34s0,0,.18,0H18.9v6H5.64v-6H7.35c.14,0,.2,0,.18,0l-.14-.34a2.85,2.85,0,0,1-.12-.29l-.1-.29-.07-.27-2.31,0-.11.08a.77.77,0,0,0-.18.18l-.08.11,0,7.69.08.12a.47.47,0,0,0,.09.12l.13.09ZM12.11,13a4,4,0,0,0,1.46-.21,4.51,4.51,0,0,0,1.31-.71A4,4,0,0,0,16.26,10a4.32,4.32,0,0,0-.08-2.54,4.34,4.34,0,0,0-1-1.52,4.15,4.15,0,0,0-1.54-1,4.34,4.34,0,0,0-1.35-.22A4.07,4.07,0,0,0,11,4.93,3.94,3.94,0,0,0,9.24,6.07,3.92,3.92,0,0,0,8.15,8.88a3.91,3.91,0,0,0,.12.95A4.16,4.16,0,0,0,12.11,13Zm2.35-4.14v.58H10.09V8.27h4.37v.58Z" transform="translate(-4.4 -4.71)"/></g></svg>',delete_column:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 13.81 15.74"><g><path d="M5.66,19.42l.12.08,7.69,0,.11-.08a.77.77,0,0,0,.18-.18l.08-.11,0-2.32-.15,0-.45-.15-.42-.18-.17-.07a1,1,0,0,0,0,.27v1.63h-6V5h6V6.62a.9.9,0,0,0,0,.26l.17-.07.42-.17a3.91,3.91,0,0,1,.45-.15l.15,0,0-2.32L13.75,4a.77.77,0,0,0-.18-.18l-.11-.08H5.79l-.13.07a.63.63,0,0,0-.21.22l-.08.12V19.08l.08.12a.47.47,0,0,0,.09.12.35.35,0,0,0,.12.1Zm9-3.67a4.16,4.16,0,0,0,2.36-.51,4.08,4.08,0,0,0,1.67-1.72,4,4,0,0,0,.35-.91,3.79,3.79,0,0,0,.1-1,4.71,4.71,0,0,0-.11-1,5,5,0,0,0-.3-.87,4.25,4.25,0,0,0-1-1.25,4.49,4.49,0,0,0-1.34-.81A4.26,4.26,0,0,0,15,7.48a3.88,3.88,0,0,0-1.41.25A4.32,4.32,0,0,0,11.86,9,4,4,0,0,0,11,10.94a4.4,4.4,0,0,0-.05.68,4.5,4.5,0,0,0,.05.68,3.93,3.93,0,0,0,.61,1.57,4.22,4.22,0,0,0,1.18,1.2,4.59,4.59,0,0,0,.48.27c.2.1.37.17.5.22a2.44,2.44,0,0,0,.45.12,4.61,4.61,0,0,0,.5.07Zm2.54-4.12v.58H12.87V11h4.37v.59Z" transform="translate(-5.37 -3.76)"/></g></svg>',fixed_column_width:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6,5H18A1,1 0 0,1 19,6A1,1 0 0,1 18,7H6A1,1 0 0,1 5,6A1,1 0 0,1 6,5M21,2V4H3V2H21M15,8H17V22H15V8M7,8H9V22H7V8M11,8H13V22H11V8Z" /></svg>',rotate_left:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.8 15.8"><g><path d="M0.5,10.2c0,0.1,0,0.2,0,0.3v0.2l0,0c0.1,0.3,0.3,0.6,0.4,0.9l0,0C1,11.8,1.3,12,1.5,11.9h0.1h0.2h0.1c0.1-0.1,0.3-0.3,0.4-0.5v-0.2c0-0.1,0-0.2-0.1-0.3l0,0c-0.2-0.2-0.3-0.4-0.3-0.7l0,0C1.8,10,1.7,9.9,1.5,9.8c-0.1,0-0.2,0-0.3,0H0.9C0.7,9.9,0.6,10,0.5,10.2L0.5,10.2z"/><path d="M2.2,11.5L2.2,11.5L2.2,11.5z"/><path d="M5.9,3.6L5.9,3.6L5.9,3.6z"/><path d="M0.1,7.9c0,0.3,0,0.6,0,0.9l0,0l0,0l0,0l0,0c0,0.2,0.1,0.3,0.2,0.4l0,0c0.2,0.1,0.3,0.2,0.5,0.2l0,0l0,0c0.2,0,0.4-0.1,0.5-0.3l0,0c0-0.1,0.1-0.3,0.1-0.4V8.6l0,0c0-0.2,0-0.5,0-0.7l0,0c0-0.2-0.1-0.4-0.2-0.5C1.1,7.3,0.9,7.2,0.7,7.2S0.3,7.3,0.2,7.4C0.1,7.5,0,7.7,0.1,7.9z"/><path d="M1.9,12.7L1.9,12.7c0,0.2,0,0.4,0.2,0.5l0,0l0.2,0.3l0,0c0.2,0.1,0.3,0.2,0.5,0.4l0,0l0,0l0,0l0,0C2.9,14,3,14.1,3.2,14.1s0.4-0.1,0.5-0.2c0.1-0.2,0.2-0.3,0.2-0.5v-0.1c0-0.2-0.1-0.4-0.2-0.5l0,0l-0.4-0.4l-0.2-0.2l0,0C3,12.1,2.8,12,2.6,12l0,0c-0.2,0-0.4,0.1-0.5,0.2l0,0C2,12.3,1.9,12.5,1.9,12.7z"/><path d="M6.6,15c0,0.2,0.1,0.4,0.2,0.5c0.1,0.1,0.2,0.2,0.4,0.3l0,0c0.3,0,0.5,0,0.7,0h0.3l0,0c0.2,0,0.4-0.1,0.5-0.2c0.1-0.2,0.2-0.3,0.2-0.5l0,0l0,0c0-0.2-0.1-0.4-0.2-0.5l0,0c-0.1-0.1-0.3-0.2-0.5-0.2l0,0H7.9c-0.1,0-0.3,0-0.5,0l0,0H7.3c-0.2-0.1-0.3,0-0.5,0.1l0,0C6.7,14.6,6.6,14.8,6.6,15L6.6,15L6.6,15L6.6,15z"/><path d="M4.2,7.4C4,7.5,4,7.7,4,7.9c0,0.2,0,0.4,0.2,0.5l0,0l3.2,3.2l0,0c0.1,0.1,0.3,0.2,0.5,0.2s0.3-0.1,0.5-0.2l0,0l3.2-3.2l0,0c0.1-0.1,0.2-0.3,0.2-0.5c0-0.2-0.1-0.4-0.2-0.5l0,0C11.5,7.3,11,6.7,10,5.8l0,0L8.4,4.2l0,0C8.3,4.1,8.1,4,7.9,4S7.5,4.1,7.4,4.2L4.2,7.4L4.2,7.4z M6.8,9L5.7,7.9l2.2-2.2l2.3,2.2l-2.3,2.2C7.7,9.9,7.3,9.5,6.8,9L6.8,9z"/><path d="M4.1,14.1C4,14.2,4,14.3,4,14.4v0.2l0,0c0.1,0.1,0.2,0.3,0.4,0.4l0,0c0.3,0.1,0.6,0.2,0.9,0.4h0.1h0.1l0,0c0.2,0,0.3-0.1,0.5-0.1l0,0c0.2-0.1,0.3-0.3,0.3-0.4l0,0l0,0l0,0l0,0v-0.2c0-0.1-0.1-0.2-0.1-0.3l0,0C6.1,14.2,6,14.1,5.8,14l0,0c-0.3-0.1-0.5-0.2-0.8-0.2l0,0c-0.1-0.1-0.2-0.1-0.3-0.1H4.5C4.3,13.7,4.2,13.9,4.1,14.1z"/><path d="M9.3,14.4c0,0.1-0.1,0.3,0,0.4V15l0,0c0,0.1,0.1,0.3,0.5,0.4c0.1,0.1,0.3,0.1,0.4,0.1l0,0h0.1l0,0c0.3-0.1,0.6-0.2,0.9-0.3l0,0c0.1-0.1,0.2-0.2,0.3-0.4l0.1-0.3c0-0.1-0.1-0.2-0.1-0.3l0,0c-0.1-0.2-0.2-0.3-0.4-0.4l0,0h-0.3c-0.1,0-0.2,0-0.3,0l0,0c-0.2,0.1-0.5,0.2-0.8,0.3l0,0C9.5,14.1,9.4,14.2,9.3,14.4L9.3,14.4z"/><path d="M11.4,14.7L11.4,14.7L11.4,14.7z"/><path d="M9.5,15.3L9.5,15.3L9.5,15.3z"/><path d="M15.9,7.9c0-1-0.2-2-0.6-3l0,0c-0.4-1-1-1.9-1.7-2.6C12.8,1.6,12,1,11,0.6l0,0C10.1,0.2,9,0,8,0C7.3,0,6.5,0.1,5.8,0.3l0,0C5.2,0.5,4.6,0.8,4,1.1L3.1,0.2l0,0C2.9,0.1,2.8,0,2.6,0H2.4l0,0C2.2,0,2,0.2,1.9,0.4l0,0L0.1,4.9l0,0C0,5,0,5.1,0,5.2c0,0.2,0.1,0.4,0.2,0.5l0,0c0.2,0.1,0.3,0.2,0.5,0.2h0.1H1l0,0l4.7-1.8l0,0C5.9,4,6.1,3.8,6.1,3.6V3.4C6.1,3.2,6,3,5.9,2.9l0,0L5.1,2.1c0.4-0.2,0.8-0.4,1.3-0.5c0.5-0.1,1.1-0.2,1.7-0.2c0.9,0,1.7,0.2,2.5,0.5l0,0c0.8,0.3,1.5,0.8,2.1,1.4c0.6,0.6,1.1,1.3,1.4,2.1l0,0c0.3,0.8,0.5,1.6,0.5,2.5s-0.2,1.7-0.5,2.5l0,0c-0.3,0.8-0.8,1.5-1.4,2.1c-0.2,0.2-0.4,0.3-0.6,0.5l0,0c-0.2,0.1-0.3,0.3-0.3,0.5v0.1c0,0.1,0,0.3,0.1,0.4l0,0c0.1,0.2,0.3,0.3,0.5,0.3l0,0c0.1,0,0.3-0.1,0.4-0.2l0,0l0,0l0,0l0,0c0.2-0.2,0.5-0.4,0.7-0.6l0,0l0,0l0,0l0,0c0.7-0.8,1.3-1.6,1.7-2.6C15.6,10,15.8,9,15.9,7.9z M1.9,4C2,3.8,2.1,3.5,2.3,3.1l0,0L2.7,2l1.2,1.2L1.9,4z"/><path d="M6.8,15.5L6.8,15.5L6.8,15.5z"/></g></svg>',rotate_right:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.8 15.8"><g><path d="M9.9,15.3L9.9,15.3L9.9,15.3z"/><path d="M6.9,15.1L6.9,15.1c0,0.1,0.1,0.3,0.2,0.4l0,0c0.1,0.2,0.3,0.3,0.5,0.3l0,0h0.3c0.2,0,0.4,0,0.7,0l0,0c0.2-0.1,0.3-0.2,0.4-0.3c0.1-0.1,0.2-0.2,0.2-0.4V15c0-0.2-0.1-0.4-0.2-0.4c-0.2-0.1-0.3-0.2-0.5-0.2H8.4l0,0c-0.1,0-0.3,0-0.5,0H7.6l0,0c-0.2,0-0.4,0.1-0.5,0.2C7,14.7,6.9,14.9,6.9,15.1z"/><path d="M6.5,14.4L6.5,14.4L6.5,14.4z"/><path d="M5.8,5.8L5.8,5.8c-1,0.9-1.5,1.5-1.7,1.6l0,0C4,7.5,4,7.7,4,7.9c0,0.2,0,0.4,0.2,0.5l0,0l3.2,3.2l0,0c0.2,0.1,0.3,0.2,0.5,0.2s0.4-0.1,0.5-0.2l0,0l3.2-3.2l0,0c0.1-0.1,0.2-0.3,0.2-0.5c0-0.2-0.1-0.4-0.2-0.5l0,0L8.4,4.2C8.3,4.1,8.1,4,7.9,4C7.7,4,7.5,4.1,7.4,4.2l0,0L5.8,5.8z M5.6,7.9l2.3-2.2l2.2,2.2L9,9l0,0l0,0l0,0l0,0c-0.5,0.6-0.9,0.9-1.1,1.1L5.6,7.9z"/><path d="M9,15.5L9,15.5L9,15.5z"/><path d="M9.6,14.7v0.2l0,0l0,0l0,0l0,0c0.1,0.2,0.1,0.3,0.3,0.3c0.1,0.1,0.3,0.1,0.4,0.1l0,0h0.1h0.1c0.3-0.1,0.6-0.3,0.9-0.4l0,0c0.1-0.1,0.2-0.2,0.3-0.4l0,0v-0.2c0-0.1,0-0.2-0.1-0.3c-0.1-0.2-0.2-0.3-0.4-0.4H11c-0.1,0-0.2,0.1-0.3,0.1l0,0c-0.2,0.1-0.4,0.2-0.7,0.3l0,0l0,0c-0.1,0.1-0.3,0.2-0.4,0.4C9.6,14.5,9.6,14.6,9.6,14.7z"/><path d="M9,14.5L9,14.5L9,14.5z"/><path d="M9.6,14.4L9.6,14.4L9.6,14.4z"/><path d="M11.7,14L11.7,14L11.7,14z"/><path d="M15.6,7.4L15.6,7.4L15.6,7.4z"/><path d="M15,9.4c0.2,0,0.4,0,0.6-0.2l0,0c0.1-0.1,0.2-0.2,0.2-0.4l0,0l0,0l0,0l0,0c0-0.3,0-0.6,0-0.9c0-0.2-0.1-0.4-0.2-0.5c-0.1-0.1-0.3-0.2-0.5-0.2s-0.4,0.1-0.5,0.2c-0.1,0.1-0.2,0.3-0.2,0.5l0,0c0,0.2,0,0.4,0,0.7l0,0v0.1c0,0.1,0,0.3,0.1,0.4l0,0C14.6,9.3,14.8,9.4,15,9.4L15,9.4L15,9.4z"/><path d="M14,12h0.1h0.2h0.1c0.2,0,0.5-0.2,0.6-0.4l0,0c0.2-0.3,0.3-0.6,0.4-0.9l0,0v-0.2c0-0.1-0.1-0.2-0.1-0.3c-0.1-0.2-0.2-0.3-0.4-0.4h-0.3c-0.1,0-0.2,0-0.3,0C14.2,9.9,14,10,14,10.3l0,0c-0.1,0.2-0.2,0.5-0.3,0.7l0,0c-0.1,0.1-0.1,0.2-0.1,0.3v0.2l0,0l0,0C13.6,11.6,13.8,11.8,14,12z"/><path d="M14.6,7.4L14.6,7.4L14.6,7.4z"/><path d="M4.4,14.2c-0.1,0.1-0.1,0.2-0.1,0.3l0.1,0.2c0,0.2,0.2,0.3,0.3,0.4l0,0c0.3,0.1,0.6,0.3,1.1,0.4l0,0h0.1l0,0c0.1,0,0.2-0.1,0.4-0.2c0.1,0,0.2-0.2,0.3-0.3l0,0v-0.2c0-0.1-0.1-0.3-0.2-0.4c-0.1-0.1-0.2-0.2-0.4-0.3l0,0c-0.2-0.1-0.5-0.2-0.7-0.3l0,0c-0.1,0-0.2,0-0.3,0H4.7l0,0C4.6,13.9,4.4,14,4.4,14.2L4.4,14.2z"/><path d="M11.9,13.3c0,0.2,0.1,0.4,0.2,0.6c0.1,0.1,0.3,0.2,0.5,0.2s0.4-0.1,0.5-0.2l0,0l0,0l0,0l0,0c0.1-0.1,0.3-0.3,0.4-0.4l0,0l0.2-0.3l0,0c0.1-0.2,0.2-0.3,0.2-0.5l0,0c0-0.2-0.1-0.4-0.2-0.5l0,0c-0.1-0.1-0.3-0.2-0.5-0.2l0,0c-0.2,0-0.4,0.1-0.5,0.2l0,0l-0.2,0.2l-0.4,0.4l0,0C12,13,11.9,13.1,11.9,13.3L11.9,13.3z"/><path d="M12.1,13.8L12.1,13.8L12.1,13.8z"/><path d="M11.9,13.3L11.9,13.3L11.9,13.3z"/><path d="M15.9,5.2c0-0.1-0.1-0.2-0.1-0.3l0,0L14,0.4l0,0C13.9,0.2,13.7,0,13.5,0l0,0l0,0h-0.2c-0.2,0-0.4,0.1-0.5,0.2l0,0l-0.9,0.9c-0.5-0.3-1.1-0.6-1.8-0.8l0,0C9.4,0.1,8.7,0,7.9,0c-1,0-2,0.2-3,0.6S3,1.6,2.3,2.3C1.6,3.1,1,3.9,0.6,4.9l0,0C0.2,5.8,0,6.8,0,7.9c0,1,0.2,2,0.6,3s0.9,1.8,1.7,2.6l0,0l0,0l0,0l0,0c0.2,0.2,0.5,0.4,0.7,0.6l0,0l0,0l0,0l0,0c0.2,0.1,0.3,0.2,0.5,0.2l0,0c0.2,0,0.4-0.1,0.6-0.3l0,0c0.1-0.1,0.1-0.3,0.1-0.4v-0.1l0,0C4.1,13.3,4,13.1,3.9,13l0,0c-0.2-0.1-0.4-0.3-0.6-0.5c-0.6-0.6-1.1-1.3-1.4-2.1l0,0C1.6,9.6,1.4,8.8,1.4,7.9s0.2-1.7,0.5-2.5l0,0c0.3-0.8,0.8-1.5,1.4-2.1c0.6-0.6,1.3-1.1,2.1-1.4l0,0C6.2,1.6,7,1.4,7.9,1.4c0.6,0,1.1,0.1,1.7,0.2c0.5,0.1,0.9,0.3,1.3,0.5l-0.8,0.8l0,0C10,3.1,9.9,3.2,9.9,3.4v0.2l0,0l0,0c0,0.2,0.2,0.4,0.4,0.5l0,0l4.5,1.8l0,0H15h0.1c0.2,0,0.4-0.1,0.5-0.2l0,0C15.7,5.6,15.8,5.4,15.9,5.2z M11.8,3.2L13,2l0.4,1.1l0,0c0.2,0.4,0.3,0.7,0.4,0.9L11.8,3.2z"/></g></svg>',mirror_horizontal:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 14.75 15.74"><g><path d="M13.75,3.76l5.9,15.74h-5.9V3.76ZM4.9,19.5,10.8,3.76V19.5H4.9Z" transform="translate(-4.9 -3.76)"/></g></svg>',mirror_vertical:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 14.75"><g><path d="M20.15,13.1,4.41,19V13.1H20.15ZM4.41,4.25l15.74,5.9H4.41V4.25Z" transform="translate(-4.41 -4.25)"/></g></svg>',checked:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.75 12.1"><g><path d="M4.59,12.23l.12.18L9.43,17.5a.58.58,0,0,0,.84,0L20,7.45h0a.58.58,0,0,0,0-.84l-.85-.85a.58.58,0,0,0-.84,0H18.2l-8.12,8.41a.29.29,0,0,1-.42,0l-3.4-3.63a.58.58,0,0,0-.84,0l-.85.85a.6.6,0,0,0-.14.21.51.51,0,0,0,0,.44c.05.06.1.13.16.19Z" transform="translate(-4.38 -5.58)"/></g></svg>',line_break:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M19,6a1,1,0,0,0-1,1v4a1,1,0,0,1-1,1H7.41l1.3-1.29A1,1,0,0,0,7.29,9.29l-3,3a1,1,0,0,0-.21.33,1,1,0,0,0,0,.76,1,1,0,0,0,.21.33l3,3a1,1,0,0,0,1.42,0,1,1,0,0,0,0-1.42L7.41,14H17a3,3,0,0,0,3-3V7A1,1,0,0,0,19,6Z"/></svg>',audio:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14,3.23V5.29C16.89,6.15 19,8.83 19,12C19,15.17 16.89,17.84 14,18.7V20.77C18,19.86 21,16.28 21,12C21,7.72 18,4.14 14,3.23M16.5,12C16.5,10.23 15.5,8.71 14,7.97V16C15.5,15.29 16.5,13.76 16.5,12M3,9V15H7L12,20V4L7,9H3Z" /></svg>',image_gallery:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="30 30 150 150"><g><path d="M152.775,120.548V51.651c0-12.271-9.984-22.254-22.254-22.254H43.727c-12.271,0-22.254,9.983-22.254,22.254v68.896c0,12.27,9.983,22.254,22.254,22.254h86.795C142.791,142.802,152.775,132.817,152.775,120.548z M36.394,51.651c0-4.042,3.291-7.333,7.333-7.333h86.795c4.042,0,7.332,3.291,7.332,7.333v23.917l-14.938-17.767c-1.41-1.678-3.487-2.649-5.68-2.658h-0.029c-2.184,0-4.255,0.954-5.674,2.613L76.709,98.519l-9.096-9.398c-1.427-1.474-3.392-2.291-5.448-2.273c-2.052,0.025-4.004,0.893-5.396,2.4L36.394,111.32V51.651z M41.684,127.585l20.697-22.416l9.312,9.622c1.461,1.511,3.489,2.334,5.592,2.27c2.101-0.066,4.075-1.013,5.44-2.612l34.436-40.308l20.693,24.613v21.794c0,4.042-3.29,7.332-7.332,7.332H43.727C43.018,127.88,42.334,127.775,41.684,127.585z M182.616,152.5V75.657c0-4.12-3.34-7.46-7.461-7.46c-4.119,0-7.46,3.34-7.46,7.46V152.5c0,4.112-3.347,7.46-7.461,7.46h-94c-4.119,0-7.46,3.339-7.46,7.459c0,4.123,3.341,7.462,7.46,7.462h94C172.576,174.881,182.616,164.841,182.616,152.5z"/></g></svg>',bookmark:'<svg viewBox="0 0 24 24"><path d="M17,3H7A2,2 0 0,0 5,5V21L12,18L19,21V5C19,3.89 18.1,3 17,3Z" /></svg>',download:'<svg viewBox="0 0 24 24"><path d="M2 12H4V17H20V12H22V17C22 18.11 21.11 19 20 19H4C2.9 19 2 18.11 2 17V12M12 15L17.55 9.54L16.13 8.13L13 11.25V2H11V11.25L7.88 8.13L6.46 9.55L12 15Z" /></svg>',dir_ltr:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M0 0h24v24H0V0z" fill="none"/><path d="M9 4v4c-1.1 0-2-.9-2-2s.9-2 2-2m8-2H9C6.79 2 5 3.79 5 6s1.79 4 4 4v5h2V4h2v11h2V4h2V2zm0 12v3H5v2h12v3l4-4-4-4z"/></svg>',dir_rtl:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M0 0h24v24H0V0z" fill="none"/><path d="M10 4v4c-1.1 0-2-.9-2-2s.9-2 2-2m8-2h-8C7.79 2 6 3.79 6 6s1.79 4 4 4v5h2V4h2v11h2V4h2V2zM8 14l-4 4 4 4v-3h12v-2H8v-3z"/></svg>',alert_outline:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11,15H13V17H11V15M11,7H13V13H11V7M12,2C6.47,2 2,6.5 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20Z" /></svg>',more_text:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="10 10 180 180"><g><path d="M49.711,142.188h49.027c2.328,0.002,4.394,1.492,5.129,3.699l9.742,29.252c0.363,1.092,1.385,1.828,2.537,1.83l15.883,0.01c0.859,0,1.667-0.412,2.17-1.109s0.641-1.594,0.37-2.41l-16.625-50.045L86.503,28.953c-0.36-1.097-1.383-1.839-2.537-1.842H64.532c-1.153-0.001-2.178,0.736-2.542,1.831L13.847,173.457c-0.271,0.816-0.135,1.713,0.369,2.412c0.503,0.697,1.311,1.109,2.171,1.109h15.872c1.151,0,2.173-0.736,2.537-1.828l9.793-29.287C45.325,143.66,47.39,142.18,49.711,142.188L49.711,142.188z M53.493,119.098l15.607-46.9c0.744-2.196,2.806-3.674,5.125-3.674s4.381,1.478,5.125,3.674l15.607,46.904c0.537,1.621,0.263,3.402-0.736,4.789c-1.018,1.408-2.649,2.24-4.386,2.24H58.615c-1.736,0-3.368-0.832-4.386-2.24C53.23,122.504,52.956,120.721,53.493,119.098L53.493,119.098z M190.465,63.32c0-2.919-1.015-5.396-3.059-7.428c-2.029-2.031-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.016-7.388,3.047c-2.029,2.032-3.056,4.498-3.056,7.386c0,2.889,1.026,5.354,3.056,7.385c2.032,2.032,4.499,3.059,7.388,3.059c2.887,0,5.354-1.026,7.383-3.059C189.45,68.633,190.465,66.178,190.465,63.32L190.465,63.32z M190.465,101.994c0-2.858-1.015-5.313-3.059-7.333c-2.029-2.042-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.005-7.388,3.047c-2.029,2.021-3.056,4.486-3.056,7.376c0,2.887,1.026,5.352,3.056,7.395c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,107.389,190.465,104.914,190.465,101.994L190.465,101.994z M190.465,140.76c0-2.918-1.015-5.395-3.059-7.438c-2.029-2.041-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.006-7.388,3.047c-2.029,2.043-3.056,4.52-3.056,7.438c0,2.922,1.026,5.398,3.056,7.439c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,146.158,190.465,143.682,190.465,140.76L190.465,140.76z"/></g></svg>',more_paragraph:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="10 10 180 180"><g><path d="M128.39,28.499H63.493c-25.558,0-46.354,20.796-46.354,46.354c0,25.559,20.796,46.353,46.354,46.353h9.271v55.625h18.542V47.04h9.271V176.83h18.543V47.04h9.271V28.499z M72.764,102.664h-9.271c-15.337,0-27.813-12.475-27.813-27.812c0-15.336,12.476-27.813,27.813-27.813h9.271V102.664z M190.465,63.32c0-2.919-1.015-5.396-3.059-7.428c-2.029-2.031-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.016-7.388,3.047c-2.029,2.032-3.056,4.498-3.056,7.386c0,2.889,1.026,5.354,3.056,7.385c2.032,2.032,4.499,3.059,7.388,3.059c2.887,0,5.354-1.026,7.383-3.059C189.45,68.633,190.465,66.178,190.465,63.32L190.465,63.32z M190.465,101.994c0-2.858-1.015-5.313-3.059-7.333c-2.029-2.042-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.005-7.388,3.047c-2.029,2.021-3.056,4.486-3.056,7.376c0,2.887,1.026,5.352,3.056,7.395c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,107.389,190.465,104.914,190.465,101.994L190.465,101.994z M190.465,140.76c0-2.918-1.015-5.395-3.059-7.438c-2.029-2.041-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.006-7.388,3.047c-2.029,2.043-3.056,4.52-3.056,7.438c0,2.922,1.026,5.398,3.056,7.439c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,146.158,190.465,143.682,190.465,140.76L190.465,140.76z"/></g></svg>',more_plus:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="35 30 140 140"><g><path d="M137.215,102.045c0,3.498-2.835,6.332-6.333,6.332H24.549c-3.498,0-6.334-2.834-6.334-6.332l0,0c0-3.498,2.836-6.333,6.334-6.333h106.333C134.38,95.711,137.215,98.547,137.215,102.045L137.215,102.045z M77.715,161.545c-3.498,0-6.333-2.836-6.333-6.334V48.878c0-3.498,2.836-6.333,6.333-6.333l0,0c3.498,0,6.334,2.835,6.334,6.333v106.333C84.049,158.709,81.213,161.545,77.715,161.545L77.715,161.545z M190.465,63.32c0-2.919-1.015-5.396-3.059-7.428c-2.029-2.031-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.016-7.388,3.047c-2.029,2.032-3.056,4.498-3.056,7.386c0,2.889,1.026,5.354,3.056,7.385c2.032,2.032,4.499,3.059,7.388,3.059c2.887,0,5.354-1.026,7.383-3.059C189.45,68.632,190.465,66.177,190.465,63.32L190.465,63.32z M190.465,101.993c0-2.858-1.015-5.313-3.059-7.333c-2.029-2.042-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.005-7.388,3.047c-2.029,2.021-3.056,4.486-3.056,7.376c0,2.888,1.026,5.353,3.056,7.396c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,107.389,190.465,104.914,190.465,101.993L190.465,101.993z M190.465,140.76c0-2.918-1.015-5.395-3.059-7.438c-2.029-2.041-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.006-7.388,3.047c-2.029,2.043-3.056,4.52-3.056,7.438c0,2.922,1.026,5.398,3.056,7.439c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,146.158,190.465,143.682,190.465,140.76L190.465,140.76z"/></g></svg>',more_horizontal:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.76 3.58"><g><path d="M4.64,10.73a1.84,1.84,0,0,1,.65-.65,1.76,1.76,0,0,1,1.79,0A1.79,1.79,0,0,1,8,11.63a1.84,1.84,0,0,1-.25.9,1.69,1.69,0,0,1-.65.65,1.8,1.8,0,0,1-2.69-1.55A2.08,2.08,0,0,1,4.64,10.73Zm6.09,0a1.84,1.84,0,0,1,.65-.65,1.78,1.78,0,0,1,2.67,1.55,1.73,1.73,0,0,1-.24.9,1.84,1.84,0,0,1-.65.65,1.76,1.76,0,0,1-1.79,0,1.79,1.79,0,0,1-.64-2.44Zm6.08,0a1.69,1.69,0,0,1,.65-.65,1.76,1.76,0,0,1,1.79,0,1.79,1.79,0,0,1,.9,1.54,1.73,1.73,0,0,1-.24.9,1.84,1.84,0,0,1-.65.65,1.8,1.8,0,0,1-2.69-1.55A2,2,0,0,1,16.81,10.73Z" transform="translate(-4.39 -9.84)"/></g></svg>',more_vertical:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 3.94 15.75"><g><path d="M12.28,7.69a1.92,1.92,0,0,1-1.39-.58,2,2,0,0,1-.58-1.39,1.92,1.92,0,0,1,.58-1.39,2,2,0,0,1,1.39-.58,1.92,1.92,0,0,1,1.39.58,2,2,0,0,1,.58,1.39,1.92,1.92,0,0,1-.58,1.39,2,2,0,0,1-1.39.58Zm0,2a1.92,1.92,0,0,1,1.39.58,2,2,0,0,1,.58,1.39A1.92,1.92,0,0,1,13.67,13a2,2,0,0,1-1.39.58A1.92,1.92,0,0,1,10.89,13a2,2,0,0,1-.58-1.39,2,2,0,0,1,2-2Zm0,5.9a1.92,1.92,0,0,1,1.39.58,2,2,0,0,1,.58,1.39,1.92,1.92,0,0,1-.58,1.39,2,2,0,0,1-1.39.58,1.92,1.92,0,0,1-1.39-.58,2,2,0,0,1-.58-1.39,1.92,1.92,0,0,1,.58-1.39,1.94,1.94,0,0,1,1.39-.58Z" transform="translate(-10.31 -3.75)"/></g></svg>',attachment:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 8.38 15.68"><g><path d="M15.23,6h1v9.78a3.88,3.88,0,0,1-1.31,2.45,4,4,0,0,1-6.57-2.45V7A3,3,0,0,1,9.2,4.89a3,3,0,0,1,5,2.09v8.31a1.92,1.92,0,0,1-.58,1.39,2,2,0,0,1-1.39.58,1.92,1.92,0,0,1-1.39-.58,2,2,0,0,1-.58-1.39V8h1v7.32a1,1,0,0,0,.29.69,1,1,0,0,0,.69.28A.9.9,0,0,0,13,16a1,1,0,0,0,.29-.69V7a1.92,1.92,0,0,0-.58-1.39A2,2,0,0,0,11.27,5a1.92,1.92,0,0,0-1.39.58A2,2,0,0,0,9.33,7v8.31a3,3,0,1,0,5.9,0V6Z" transform="translate(-8.08 -3.78)"/></g></svg>',map:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 11.7 15.62"><g><path d="M12.05,12.42a2.93,2.93,0,1,1,2.07-5A2.88,2.88,0,0,1,15,9.49a3,3,0,0,1-.86,2.07,2.89,2.89,0,0,1-2.07.86Zm0-5.36a2.43,2.43,0,0,0-1.72,4.16,2.48,2.48,0,0,0,1.72.72,2.44,2.44,0,0,0,0-4.88Zm0-3.3A5.84,5.84,0,0,1,17.9,9.62a9.94,9.94,0,0,1-1.73,5A33.59,33.59,0,0,1,12.84,19a1.52,1.52,0,0,1-.23.2,1,1,0,0,1-.55.2h0a1,1,0,0,1-.55-.2,1.52,1.52,0,0,1-.23-.2,33.59,33.59,0,0,1-3.33-4.32,9.93,9.93,0,0,1-1.72-5,5.84,5.84,0,0,1,5.85-5.86ZM12,18.34l.08.05.06-.06a35.58,35.58,0,0,0,3.06-3.93,9.35,9.35,0,0,0,1.74-4.77,4.88,4.88,0,0,0-4.88-4.88A4.79,4.79,0,0,0,8.6,6.17,4.84,4.84,0,0,0,7.17,9.62,9.29,9.29,0,0,0,8.91,14.4,36,36,0,0,0,12,18.34Z" transform="translate(-6.2 -3.76)"/></g></svg>',magic_stick:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.73 15.75"><g><path d="M19.86,19.21a1,1,0,0,0,.28-.68,1,1,0,0,0-.28-.7L13,10.93a1,1,0,0,0-.7-.28,1,1,0,0,0-.68,1.65l6.9,6.9a1,1,0,0,0,.69.29.93.93,0,0,0,.69-.28ZM9.19,8.55a3,3,0,0,0,1.68,0,14.12,14.12,0,0,0,1.41-.32A11.26,11.26,0,0,0,10.8,7.06c-.56-.36-.86-.56-.91-.58S10,5.91,10,5.11s0-1.26-.15-1.37a4.35,4.35,0,0,0-1.19.71c-.53.4-.81.62-.87.68a9,9,0,0,0-2-.6,6.84,6.84,0,0,0-.76-.09s0,.27.08.77a8.6,8.6,0,0,0,.61,2q-.09.09-.69.87a3.59,3.59,0,0,0-.68,1.17c.12.17.57.23,1.36.15S7,9.26,7.15,9.23s.21.36.57.91a10.49,10.49,0,0,0,1.14,1.48c0-.1.14-.57.31-1.4a3,3,0,0,0,0-1.67Z" transform="translate(-4.41 -3.74)"/></g></svg>',empty_file:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 12.78 15.75"><g><path d="M14.73,3.76,18.67,7.7v9.84a2,2,0,0,1-2,2H7.84a1.89,1.89,0,0,1-1.38-.58,2,2,0,0,1-.57-1.39V5.73a1.93,1.93,0,0,1,.57-1.38,2,2,0,0,1,1.38-.58h6.62l.26,0v0Zm2.95,4.92h-2a1.93,1.93,0,0,1-1.38-.57,2,2,0,0,1-.58-1.4V6.17c0-.36,0-.84,0-1.43H7.85a1,1,0,0,0-.7.29,1,1,0,0,0-.29.7V17.54a1,1,0,0,0,.29.69,1,1,0,0,0,.69.29h8.85a1,1,0,0,0,.71-.29.92.92,0,0,0,.28-.69Zm0-1L14.73,4.74v2A1,1,0,0,0,15,7.4a1,1,0,0,0,.69.29Z" transform="translate(-5.89 -3.76)"/></g></svg>'},T=n("P6u4"),N=n.n(T);const L={_d:null,_w:null,isIE:null,isIE_Edge:null,isOSX_IOS:null,isChromium:null,_propertiesInit:function(){this._d||(this._d=document,this._w=window,this.isIE=navigator.userAgent.indexOf("Trident")>-1,this.isIE_Edge=navigator.userAgent.indexOf("Trident")>-1||navigator.appVersion.indexOf("Edge")>-1,this.isOSX_IOS=/(Mac|iPhone|iPod|iPad)/.test(navigator.platform),this.isChromium=!!window.chrome)},_allowedEmptyNodeList:".se-component, pre, blockquote, hr, li, table, img, iframe, video, audio, canvas",_HTMLConvertor:function(e){const t={"&":"&amp;"," ":"&nbsp;","'":"&apos;",'"':"&quot;","<":"&lt;",">":"&gt;"};return e.replace(/&|\u00A0|'|"|<|>/g,(function(e){return"string"==typeof t[e]?t[e]:e}))},zeroWidthSpace:String.fromCharCode(8203),zeroWidthRegExp:new RegExp(String.fromCharCode(8203),"g"),onlyZeroWidthRegExp:new RegExp("^"+String.fromCharCode(8203)+"+$"),onlyZeroWidthSpace:function(e){return null!=e&&("string"!=typeof e&&(e=e.textContent),""===e||this.onlyZeroWidthRegExp.test(e))},getXMLHttpRequest:function(){if(!this._w.ActiveXObject)return this._w.XMLHttpRequest?new XMLHttpRequest:null;try{return new ActiveXObject("Msxml2.XMLHTTP")}catch(e){try{return new ActiveXObject("Microsoft.XMLHTTP")}catch(e){return null}}},getValues:function(e){return e?this._w.Object.keys(e).map((function(t){return e[t]})):[]},camelToKebabCase:function(e){return"string"==typeof e?e.replace(/[A-Z]/g,(function(e){return"-"+e.toLowerCase()})):e.map((function(e){return L.camelToKebabCase(e)}))},kebabToCamelCase:function(e){return"string"==typeof e?e.replace(/-[a-zA-Z]/g,(function(e){return e.replace("-","").toUpperCase()})):e.map((function(e){return L.camelToKebabCase(e)}))},createElement:function(e){return this._d.createElement(e)},createTextNode:function(e){return this._d.createTextNode(e||"")},HTMLEncoder:function(e){const t={"<":"$lt;",">":"$gt;"};return e.replace(/<|>/g,(function(e){return"string"==typeof t[e]?t[e]:e}))},HTMLDecoder:function(e){const t={"$lt;":"<","$gt;":">"};return e.replace(/\$lt;|\$gt;/g,(function(e){return"string"==typeof t[e]?t[e]:e}))},hasOwn:function(e,t){return this._hasOwn.call(e,t)},_hasOwn:Object.prototype.hasOwnProperty,getIncludePath:function(e,t){let n="";const i=[],o="js"===t?"script":"link",l="js"===t?"src":"href";let s="(?:";for(let t=0,n=e.length;t<n;t++)s+=e[t]+(t<n-1?"|":")");const r=new this._w.RegExp("(^|.*[\\/])"+s+"(\\.[^\\/]+)?."+t+"(?:\\?.*|;.*)?$","i"),a=new this._w.RegExp(".+\\."+t+"(?:\\?.*|;.*)?$","i");for(let e=this._d.getElementsByTagName(o),t=0;t<e.length;t++)a.test(e[t][l])&&i.push(e[t]);for(let e=0;e<i.length;e++){let t=i[e][l].match(r);if(t){n=t[0];break}}if(""===n&&(n=i.length>0?i[0][l]:""),-1===n.indexOf(":/")&&"//"!==n.slice(0,2)&&(n=0===n.indexOf("/")?location.href.match(/^.*?:\/\/[^\/]*/)[0]+n:location.href.match(/^[^\?]*\/(?:)/)[0]+n),!n)throw"[SUNEDITOR.util.getIncludePath.fail] The SUNEDITOR installation path could not be automatically detected. (name: +"+name+", extension: "+t+")";return n},getPageStyle:function(e){let t="";const n=(e||this._d).styleSheets;for(let e,i=0,o=n.length;i<o;i++){try{e=n[i].cssRules}catch(e){continue}if(e)for(let n=0,i=e.length;n<i;n++)t+=e[n].cssText}return t},getIframeDocument:function(e){let t=e.contentWindow||e.contentDocument;return t.document&&(t=t.document),t},getAttributesToString:function(e,t){if(!e.attributes)return"";const n=e.attributes;let i="";for(let e=0,o=n.length;e<o;e++)t&&t.indexOf(n[e].name)>-1||(i+=n[e].name+'="'+n[e].value+'" ');return i},getByteLength:function(e){if(!e||!e.toString)return 0;e=e.toString();const t=this._w.encodeURIComponent;let n,i;return this.isIE_Edge?(i=this._w.unescape(t(e)).length,n=0,null!==t(e).match(/(%0A|%0D)/gi)&&(n=t(e).match(/(%0A|%0D)/gi).length),i+n):(i=new this._w.TextEncoder("utf-8").encode(e).length,n=0,null!==t(e).match(/(%0A|%0D)/gi)&&(n=t(e).match(/(%0A|%0D)/gi).length),i+n)},isWysiwygDiv:function(e){return e&&1===e.nodeType&&(this.hasClass(e,"se-wrapper-wysiwyg")||/^BODY$/i.test(e.nodeName))},isNonEditable:function(e){return e&&1===e.nodeType&&"false"===e.getAttribute("contenteditable")},isTextStyleElement:function(e){return e&&3!==e.nodeType&&/^(strong|span|font|b|var|i|em|u|ins|s|strike|del|sub|sup|mark|a|label|code|summary)$/i.test(e.nodeName)},isFormatElement:function(e){return e&&1===e.nodeType&&(/^(P|DIV|H[1-6]|PRE|LI|TH|TD|DETAILS)$/i.test(e.nodeName)||this.hasClass(e,"(\\s|^)__se__format__replace_.+(\\s|$)|(\\s|^)__se__format__free_.+(\\s|$)"))&&!this.isComponent(e)&&!this.isWysiwygDiv(e)},isRangeFormatElement:function(e){return e&&1===e.nodeType&&(/^(BLOCKQUOTE|OL|UL|FIGCAPTION|TABLE|THEAD|TBODY|TR|TH|TD|DETAILS)$/i.test(e.nodeName)||this.hasClass(e,"(\\s|^)__se__format__range_.+(\\s|$)"))},isClosureRangeFormatElement:function(e){return e&&1===e.nodeType&&(/^(TH|TD)$/i.test(e.nodeName)||this.hasClass(e,"(\\s|^)__se__format__range__closure_.+(\\s|$)"))},isFreeFormatElement:function(e){return e&&1===e.nodeType&&(/^PRE$/i.test(e.nodeName)||this.hasClass(e,"(\\s|^)__se__format__free_.+(\\s|$)"))&&!this.isComponent(e)&&!this.isWysiwygDiv(e)},isClosureFreeFormatElement:function(e){return e&&1===e.nodeType&&this.hasClass(e,"(\\s|^)__se__format__free__closure_.+(\\s|$)")},isComponent:function(e){return e&&(/se-component/.test(e.className)||/^(TABLE|HR)$/.test(e.nodeName))},isUneditableComponent:function(e){return e&&this.hasClass(e,"__se__uneditable")},isMediaComponent:function(e){return e&&/se-component/.test(e.className)},isNotCheckingNode:function(e){return e&&/katex|__se__tag/.test(e.className)},getFormatElement:function(e,t){if(!e)return null;for(t||(t=function(){return!0});e;){if(this.isWysiwygDiv(e))return null;if(this.isRangeFormatElement(e)&&e.firstElementChild,this.isFormatElement(e)&&t(e))return e;e=e.parentNode}return null},getRangeFormatElement:function(e,t){if(!e)return null;for(t||(t=function(){return!0});e;){if(this.isWysiwygDiv(e))return null;if(this.isRangeFormatElement(e)&&!/^(THEAD|TBODY|TR)$/i.test(e.nodeName)&&t(e))return e;e=e.parentNode}return null},getFreeFormatElement:function(e,t){if(!e)return null;for(t||(t=function(){return!0});e;){if(this.isWysiwygDiv(e))return null;if(this.isFreeFormatElement(e)&&t(e))return e;e=e.parentNode}return null},getClosureFreeFormatElement:function(e,t){if(!e)return null;for(t||(t=function(){return!0});e;){if(this.isWysiwygDiv(e))return null;if(this.isClosureFreeFormatElement(e)&&t(e))return e;e=e.parentNode}return null},copyTagAttributes:function(e,t){t.style.cssText&&(e.style.cssText+=t.style.cssText);const n=t.classList;for(let t=0,i=n.length;t<i;t++)this.addClass(e,n[t]);e.style.cssText||e.removeAttribute("style"),e.className.trim()||e.removeAttribute("class")},copyFormatAttributes:function(e,t){(t=t.cloneNode(!1)).className=t.className.replace(/(\s|^)__se__format__[^\s]+/g,""),this.copyTagAttributes(e,t)},getArrayItem:function(e,t,n){if(!e||0===e.length)return null;t=t||function(){return!0};const i=[];for(let o,l=0,s=e.length;l<s;l++)if(o=e[l],t(o)){if(!n)return o;i.push(o)}return n?i:null},arrayIncludes:function(e,t){for(let n=0;n<e.length;n++)if(e[n]===t)return!0;return!1},getArrayIndex:function(e,t){let n=-1;for(let i=0,o=e.length;i<o;i++)if(e[i]===t){n=i;break}return n},nextIdx:function(e,t){let n=this.getArrayIndex(e,t);return-1===n?-1:n+1},prevIdx:function(e,t){let n=this.getArrayIndex(e,t);return-1===n?-1:n-1},getPositionIndex:function(e){let t=0;for(;e=e.previousSibling;)t+=1;return t},getNodePath:function(e,t,n){const i=[];let o=!0;return this.getParentElement(e,function(e){if(e===t&&(o=!1),o&&!this.isWysiwygDiv(e)){if(n&&3===e.nodeType){let t=null,i=null;n.s=n.e=0;let o=e.previousSibling;for(;o&&3===o.nodeType;)i=o.textContent.replace(this.zeroWidthRegExp,""),n.s+=i.length,e.textContent=i+e.textContent,t=o,o=o.previousSibling,this.removeItem(t);let l=e.nextSibling;for(;l&&3===l.nodeType;)i=l.textContent.replace(this.zeroWidthRegExp,""),n.e+=i.length,e.textContent+=i,t=l,l=l.nextSibling,this.removeItem(t)}i.push(e)}return!1}.bind(this)),i.map(this.getPositionIndex).reverse()},getNodeFromPath:function(e,t){let n,i=t;for(let t=0,o=e.length;t<o&&(n=i.childNodes,0!==n.length);t++)i=n.length<=e[t]?n[n.length-1]:n[e[t]];return i},isSameAttributes:function(e,t){if(3===e.nodeType&&3===t.nodeType)return!0;if(3===e.nodeType||3===t.nodeType)return!1;const n=e.style,i=t.style;let o=0;for(let e=0,t=n.length;e<t;e++)n[n[e]]===i[n[e]]&&o++;const l=e.classList,s=t.classList,r=this._w.RegExp;let a=0;for(let e=0,t=l.length;e<t;e++)r("(s|^)"+l[e]+"(s|$)").test(s.value)&&a++;return o===i.length&&o===n.length&&a===s.length&&a===l.length},isEmptyLine:function(e){return!e||!e.parentNode||!e.querySelector("IMG, IFRAME, AUDIO, VIDEO, CANVAS, TABLE")&&this.onlyZeroWidthSpace(e.textContent)},isSpanWithoutAttr:function(e){return!!e&&1===e.nodeType&&/^SPAN$/i.test(e.nodeName)&&!e.className&&!e.style.cssText},isList:function(e){return e&&/^(OL|UL)$/i.test("string"==typeof e?e:e.nodeName)},isListCell:function(e){return e&&/^LI$/i.test("string"==typeof e?e:e.nodeName)},isTable:function(e){return e&&/^(TABLE|THEAD|TBODY|TR|TH|TD)$/i.test("string"==typeof e?e:e.nodeName)},isCell:function(e){return e&&/^(TD|TH)$/i.test("string"==typeof e?e:e.nodeName)},isBreak:function(e){return e&&/^BR$/i.test("string"==typeof e?e:e.nodeName)},isAnchor:function(e){return e&&/^A$/i.test("string"==typeof e?e:e.nodeName)},isMedia:function(e){return e&&/^(IMG|IFRAME|AUDIO|VIDEO|CANVAS)$/i.test("string"==typeof e?e:e.nodeName)},isNumber:function(e){return!!e&&/^-?\d+(\.\d+)?$/.test(e+"")},getNumber:function(e,t){if(!e)return 0;let n=(e+"").match(/-?\d+(\.\d+)?/);return n&&n[0]?(n=n[0],t<0?1*n:0===t?this._w.Math.round(1*n):1*(1*n).toFixed(t)):0},getListChildren:function(e,t){const n=[];return e&&e.children&&0!==e.children.length?(t=t||function(){return!0},function i(o){if(e!==o&&t(o)&&n.push(o),o.children)for(let e=0,t=o.children.length;e<t;e++)i(o.children[e])}(e),n):n},getListChildNodes:function(e,t){const n=[];return e&&0!==e.childNodes.length?(t=t||function(){return!0},function i(o){e!==o&&t(o)&&n.push(o);for(let e=0,t=o.childNodes.length;e<t;e++)i(o.childNodes[e])}(e),n):n},getElementDepth:function(e){if(!e||this.isWysiwygDiv(e))return-1;let t=0;for(e=e.parentNode;e&&!this.isWysiwygDiv(e);)t+=1,e=e.parentNode;return t},compareElements:function(e,t){let n=e,i=t;for(;n&&i&&n.parentNode!==i.parentNode;)n=n.parentNode,i=i.parentNode;if(!n||!i)return{ancestor:null,a:e,b:t,result:0};const o=n.parentNode.childNodes,l=this.getArrayIndex(o,n),s=this.getArrayIndex(o,i);return{ancestor:n.parentNode,a:n,b:i,result:l>s?1:l<s?-1:0}},getParentElement:function(e,t){let n;if("function"==typeof t)n=t;else{let e;/^\./.test(t)?(e="className",t=t.split(".")[1]):/^#/.test(t)?(e="id",t="^"+t.split("#")[1]+"$"):/^:/.test(t)?(e="name",t="^"+t.split(":")[1]+"$"):(e="nodeName",t="^"+t+"$");const i=new this._w.RegExp(t,"i");n=function(t){return i.test(t[e])}}for(;e&&!n(e);){if(this.isWysiwygDiv(e))return null;e=e.parentNode}return e},getChildElement:function(e,t,n){let i;if("function"==typeof t)i=t;else{let e;/^\./.test(t)?(e="className",t=t.split(".")[1]):/^#/.test(t)?(e="id",t="^"+t.split("#")[1]+"$"):/^:/.test(t)?(e="name",t="^"+t.split(":")[1]+"$"):(e="nodeName",t="^"+("text"===t?"#"+t:t)+"$");const n=new this._w.RegExp(t,"i");i=function(t){return n.test(t[e])}}const o=this.getListChildNodes(e,(function(e){return i(e)}));return o[n?o.length-1:0]},getEdgeChildNodes:function(e,t){if(e){for(t||(t=e);e&&1===e.nodeType&&e.childNodes.length>0&&!this.isBreak(e);)e=e.firstChild;for(;t&&1===t.nodeType&&t.childNodes.length>0&&!this.isBreak(t);)t=t.lastChild;return{sc:e,ec:t||e}}},getOffset:function(e,t){let n=0,i=0,o=3===e.nodeType?e.parentElement:e;const l=this.getParentElement(e,this.isWysiwygDiv.bind(this));for(;o&&!this.hasClass(o,"se-container")&&o!==l;)n+=o.offsetLeft,i+=o.offsetTop,o=o.offsetParent;const s=t&&/iframe/i.test(t.nodeName);return{left:n+(s?t.parentElement.offsetLeft:0),top:i-(l?l.scrollTop:0)+(s?t.parentElement.offsetTop:0)}},getOverlapRangeAtIndex:function(e,t,n,i){if(e<=i?t<n:t>n)return 0;const o=(e>n?e:n)-(t<i?t:i);return(o<0?-1*o:o)+1},changeTxt:function(e,t){e&&t&&(e.textContent=t)},changeElement:function(e,t){if("string"==typeof t)if(e.outerHTML)e.outerHTML=t;else{const n=this.createElement("DIV");n.innerHTML=t,t=n.firstChild,e.parentNode.replaceChild(t,e)}else 1===t.nodeType&&e.parentNode.replaceChild(t,e)},setStyle:function(e,t,n){e.style[t]=n,n||e.style.cssText||e.removeAttribute("style")},hasClass:function(e,t){if(e)return new this._w.RegExp(t).test(e.className)},addClass:function(e,t){if(!e)return;new this._w.RegExp("(\\s|^)"+t+"(\\s|$)").test(e.className)||(e.className+=(e.className.length>0?" ":"")+t)},removeClass:function(e,t){if(!e)return;const n=new this._w.RegExp("(\\s|^)"+t+"(\\s|$)");e.className=e.className.replace(n," ").trim(),e.className.trim()||e.removeAttribute("class")},toggleClass:function(e,t){if(!e)return;let n=!1;const i=new this._w.RegExp("(\\s|^)"+t+"(\\s|$)");return i.test(e.className)?e.className=e.className.replace(i," ").trim():(e.className+=" "+t,n=!0),e.className.trim()||e.removeAttribute("class"),n},isImportantDisabled:function(e){return e.hasAttribute("data-important-disabled")},setDisabledButtons:function(e,t,n){for(let i=0,o=t.length;i<o;i++){let o=t[i];!n&&this.isImportantDisabled(o)||(o.disabled=e),n&&(e?o.setAttribute("data-important-disabled",""):o.removeAttribute("data-important-disabled"))}},removeItem:function(e){e&&("function"==typeof e.remove?e.remove():e.parentNode&&e.parentNode.removeChild(e))},removeItemAllParents:function(e,t,n){if(!e)return null;let i=null;return t||(t=function(e){if(e===n||this.isComponent(e))return!1;const t=e.textContent.trim();return 0===t.length||/^(\n|\u200B)+$/.test(t)}.bind(this)),function e(n){if(!L.isWysiwygDiv(n)){const o=n.parentNode;o&&t(n)&&(i={sc:n.previousElementSibling,ec:n.nextElementSibling},L.removeItem(n),e(o))}}(e),i},detachNestedList:function(e,t){const n=this._deleteNestedList(e);let i,o,l;if(n){i=n.cloneNode(!1),o=n.childNodes;const t=this.getPositionIndex(e);for(;o[t];)i.appendChild(o[t])}else i=e;if(t)l=this.getListChildren(i,function(e){return this.isListCell(e)&&!e.previousElementSibling}.bind(this));else{const t=this.getElementDepth(e)+2;l=this.getListChildren(e,function(e){return this.isListCell(e)&&!e.previousElementSibling&&this.getElementDepth(e)===t}.bind(this))}for(let e=0,t=l.length;e<t;e++)this._deleteNestedList(l[e]);return n&&(n.parentNode.insertBefore(i,n.nextSibling),o&&0===o.length&&this.removeItem(n)),i===e?i.parentNode:i},_deleteNestedList:function(e){const t=e.parentNode;let n,i,o,l,s,r=t,a=r.parentNode;for(;this.isListCell(a);){for(l=this.getPositionIndex(e),n=a.nextElementSibling,i=a.parentNode,o=r;o;){if(r=r.nextSibling,this.isList(o)){for(s=o.childNodes;s[l];)i.insertBefore(s[l],n);0===s.length&&this.removeItem(o)}else i.appendChild(o);o=r}r=i,a=i.parentNode}return 0===t.children.length&&this.removeItem(t),i},splitElement:function(e,t,n){if(this.isWysiwygDiv(e))return e;if(t&&!this.isNumber(t)){const n=e.childNodes;let i=this.getPositionIndex(t);const o=e.cloneNode(!1),l=e.cloneNode(!1);for(let e=0,t=n.length;e<t;e++){if(e<i)o.appendChild(n[e]);else{if(!(e>i))continue;l.appendChild(n[e])}e--,t--,i--}return o.childNodes.length>0&&e.parentNode.insertBefore(o,e),l.childNodes.length>0&&e.parentNode.insertBefore(l,e.nextElementSibling),e}const i=e.parentNode;let o,l,s,r=0,a=!0;if((!n||n<0)&&(n=0),3===e.nodeType){if(r=this.getPositionIndex(e),t>=0){e.splitText(t);const n=this.getNodeFromPath([r+1],i);this.onlyZeroWidthSpace(n)&&(n.data=this.zeroWidthSpace)}}else 1===e.nodeType&&(e.previousSibling?e=e.previousSibling:this.getElementDepth(e)===n&&(a=!1));let c=e;for(;this.getElementDepth(c)>n;)for(r=this.getPositionIndex(c)+1,c=c.parentNode,s=o,o=c.cloneNode(!1),l=c.childNodes,s&&(this.isListCell(o)&&this.isList(s)&&s.firstElementChild?(o.innerHTML=s.firstElementChild.innerHTML,L.removeItem(s.firstElementChild),s.children.length>0&&o.appendChild(s)):o.appendChild(s));l[r];)o.appendChild(l[r]);c.childNodes.length<=1&&(!c.firstChild||0===c.firstChild.textContent.length)&&(c.innerHTML="<br>");const u=c.parentNode;return a&&(c=c.nextSibling),o?(this.mergeSameTags(o,null,!1),this.mergeNestedTags(o,function(e){return this.isList(e)}.bind(this)),o.childNodes.length>0?u.insertBefore(o,c):o=c,0===i.childNodes.length&&this.removeItem(i),o):c},mergeSameTags:function(e,t,n){const i=this,o=t?t.length:0;let l=null;return o&&(l=this._w.Array.apply(null,new this._w.Array(o)).map(this._w.Number.prototype.valueOf,0)),function e(s,r,a){const c=s.childNodes;for(let u,d,h=0,p=c.length;h<p&&(u=c[h],d=c[h+1],u);h++)if(n&&i._isIgnoreNodeChange(u)||!n&&(i.isTable(u)||i.isListCell(u)||i.isFormatElement(u)&&!i.isFreeFormatElement(u)))(i.isTable(u)||i.isListCell(u))&&e(u,r+1,h);else{if(1===p&&s.nodeName===u.nodeName&&s.parentNode){if(o){let e,n,l,a,c;for(let d=0;d<o;d++)if(e=t[d],e&&e[r]===h){for(n=u,l=s,a=r,c=!0;a>=0;){if(i.getArrayIndex(l.childNodes,n)!==e[a]){c=!1;break}n=u.parentNode,l=n.parentNode,a--}c&&(e.splice(r,1),e[r]=h)}}i.copyTagAttributes(u,s),s.parentNode.insertBefore(u,s),i.removeItem(s)}if(!d){1===u.nodeType&&e(u,r+1,h);break}if(u.nodeName===d.nodeName&&i.isSameAttributes(u,d)&&u.href===d.href){const e=u.childNodes;let n=0;for(let t=0,i=e.length;t<i;t++)e[t].textContent.length>0&&n++;const s=u.lastChild,c=d.firstChild;let p=0;if(s&&c){const e=3===s.nodeType&&3===c.nodeType;p=s.textContent.length;let i=s.previousSibling;for(;i&&3===i.nodeType;)p+=i.textContent.length,i=i.previousSibling;if(n>0&&3===s.nodeType&&3===c.nodeType&&(s.textContent.length>0||c.textContent.length>0)&&n--,o){let i=null;for(let u=0;u<o;u++)if(i=t[u],i&&i[r]>h){if(r>0&&i[r-1]!==a)continue;i[r]-=1,i[r+1]>=0&&i[r]===h&&(i[r+1]+=n,e&&s&&3===s.nodeType&&c&&3===c.nodeType&&(l[u]+=p))}}}if(3===u.nodeType){if(p=u.textContent.length,u.textContent+=d.textContent,o){let e=null;for(let i=0;i<o;i++)if(e=t[i],e&&e[r]>h){if(r>0&&e[r-1]!==a)continue;e[r]-=1,e[r+1]>=0&&e[r]===h&&(e[r+1]+=n,l[i]+=p)}}}else u.innerHTML+=d.innerHTML;i.removeItem(d),h--}else 1===u.nodeType&&e(u,r+1,h)}}(e,0,0),l},mergeNestedTags:function(e,t){"string"==typeof t?t=function(e){return this.test(e.tagName)}.bind(new this._w.RegExp("^("+(t||".+")+")$","i")):"function"!=typeof t&&(t=function(){return!0}),function e(n){let i=n.children;if(1===i.length&&i[0].nodeName===n.nodeName&&t(n)){const e=i[0];for(i=e.children;i[0];)n.appendChild(i[0]);n.removeChild(e)}for(let t=0,i=n.children.length;t<i;t++)e(n.children[t])}(e)},removeEmptyNode:function(e,t){const n=this;t&&(t=n.getParentElement(t,(function(t){return e===t.parentElement}))),function i(o){if(n._notTextNode(o)||o===t||n.isNonEditable(o))return 0;if(o===e||!n.onlyZeroWidthSpace(o.textContent)||o.firstChild&&n.isBreak(o.firstChild)||o.querySelector(n._allowedEmptyNodeList)){const e=o.children;for(let t=0,o=e.length,l=0;t<o;t++)e[t+l]&&!n.isComponent(e[t+l])&&(l+=i(e[t+l]))}else if(o.parentNode)return o.parentNode.removeChild(o),-1;return 0}(e),0===e.childNodes.length&&(e.innerHTML="<br>")},htmlRemoveWhiteSpace:function(e){return e?e.trim().replace(/<\/?(?!strong|span|font|b|var|i|em|u|ins|s|strike|del|sub|sup|mark|a|label|code|summary)[^>^<]+>\s+(?=<)/gi,(function(e){return e.replace(/\n/g,"").replace(/\s+/," ")})):""},sortByDepth:function(e,t){const n=t?1:-1,i=-1*n;e.sort(function(e,t){return this.isListCell(e)&&this.isListCell(t)?(e=this.getElementDepth(e))>(t=this.getElementDepth(t))?n:e<t?i:0:0}.bind(this))},_isIgnoreNodeChange:function(e){return e&&3!==e.nodeType&&(this.isNonEditable(e)||!this.isTextStyleElement(e))},_isMaintainedNode:function(e){return e&&3!==e.nodeType&&/^(a|label|code|summary)$/i.test("string"==typeof e?e:e.nodeName)},_isSizeNode:function(e){return e&&3!==e.nodeType&&this.isTextStyleElement(e)&&!!e.style.fontSize},_notTextNode:function(e){return e&&3!==e.nodeType&&(this.isComponent(e)||/^(br|input|select|canvas|img|iframe|audio|video)$/i.test("string"==typeof e?e:e.nodeName))},_disallowedTags:function(e){return/^(meta|script|link|style|[a-z]+\:[a-z]+)$/i.test(e.nodeName)},createTagsWhitelist:function(e){return new RegExp("<\\/?\\b(?!\\b"+(e||"").replace(/\|/g,"\\b|\\b")+"\\b)[^>]*>","gi")},createTagsBlacklist:function(e){return new RegExp("<\\/?\\b(?:\\b"+(e||"^").replace(/\|/g,"\\b|\\b")+"\\b)[^>]*>","gi")},_consistencyCheckOfHTML:function(e,t,n,i){const o=[],l=[],s=[],r=[],a=this.getListChildNodes(e,function(a){if(1!==a.nodeType)return this.isList(a.parentElement)&&o.push(a),!1;if(n.test(a.nodeName)||!t.test(a.nodeName)&&0===a.childNodes.length&&this.isNotCheckingNode(a))return o.push(a),!1;const c=!this.getParentElement(a,this.isNotCheckingNode);if(!this.isTable(a)&&!this.isListCell(a)&&!this.isAnchor(a)&&(this.isFormatElement(a)||this.isRangeFormatElement(a)||this.isTextStyleElement(a))&&0===a.childNodes.length&&c)return l.push(a),!1;if(this.isList(a.parentNode)&&!this.isList(a)&&!this.isListCell(a))return s.push(a),!1;if(this.isCell(a)){const e=a.firstElementChild;if(!this.isFormatElement(e)&&!this.isRangeFormatElement(e)&&!this.isComponent(e))return r.push(a),!1}return a.parentNode!==e&&c&&(this.isListCell(a)&&!this.isList(a.parentNode)||i&&(this.isFormatElement(a)||this.isComponent(a))&&!this.isRangeFormatElement(a.parentNode)&&!this.getParentElement(a,this.isComponent))}.bind(this));for(let e=0,t=o.length;e<t;e++)this.removeItem(o[e]);const c=[];for(let e,t,n=0,i=a.length;n<i;n++)if(e=a[n],t=e.parentNode,t&&t.parentNode)if(this.getParentElement(e,this.isListCell)){const n=e.childNodes;for(let o=n.length-1;i>=0;o--)t.insertBefore(e,n[o]);c.push(e)}else t.parentNode.insertBefore(e,t),c.push(t);for(let e,t=0,n=c.length;t<n;t++)e=c[t],this.onlyZeroWidthSpace(e.textContent.trim())&&this.removeItem(e);for(let e=0,t=l.length;e<t;e++)this.removeItem(l[e]);for(let e,t,n,i,o=0,l=s.length;o<l;o++)if(e=s[o],i=e.parentNode,i)if(t=this.createElement("LI"),this.isFormatElement(e)){for(n=e.childNodes;n[0];)t.appendChild(n[0]);i.insertBefore(t,e),this.removeItem(e)}else e=e.nextSibling,t.appendChild(s[o]),i.insertBefore(t,e);for(let e,t,n=0,i=r.length;n<i;n++)e=r[n],t=this.createElement("DIV"),t.innerHTML=0===e.textContent.trim().length&&0===e.children.length?"<br>":e.innerHTML,e.innerHTML=t.outerHTML},_setDefaultOptionStyle:function(e,t){let n="";e.height&&(n+="height:"+e.height+";"),e.minHeight&&(n+="min-height:"+e.minHeight+";"),e.maxHeight&&(n+="max-height:"+e.maxHeight+";"),e.position&&(n+="position:"+e.position+";"),e.width&&(n+="width:"+e.width+";"),e.minWidth&&(n+="min-width:"+e.minWidth+";"),e.maxWidth&&(n+="max-width:"+e.maxWidth+";");let i="",o="",l="";const s=(t=n+t).split(";");for(let t,n=0,r=s.length;n<r;n++)t=s[n].trim(),t&&(/^(min-|max-)?width\s*:/.test(t)||/^(z-index|position)\s*:/.test(t)?i+=t+";":/^(min-|max-)?height\s*:/.test(t)?(/^height/.test(t)&&"auto"===t.split(":")[1].trim()&&(e.height="auto"),o+=t+";"):l+=t+";");return{top:i,frame:o,editor:l}},_setIframeDocument:function(e,t){e.setAttribute("scrolling","auto"),e.contentDocument.head.innerHTML='<meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">'+this._setIframeCssTags(t),e.contentDocument.body.className=t._editableClass,e.contentDocument.body.setAttribute("contenteditable",!0)},_setIframeCssTags:function(e){const t=e.iframeCSSFileName,n=this._w.RegExp;let i="";for(let e,o=0,l=t.length;o<l;o++){if(e=[],/(^https?:\/\/)|(^data:text\/css,)/.test(t[o]))e.push(t[o]);else{const i=new n("(^|.*[\\/])"+t[o]+"(\\..+)?\\.css(?:\\?.*|;.*)?$","i");for(let t,n=document.getElementsByTagName("link"),o=0,l=n.length;o<l;o++)t=n[o].href.match(i),t&&e.push(t[0])}if(!e||0===e.length)throw'[SUNEDITOR.constructor.iframe.fail] The suneditor CSS files installation path could not be automatically detected. Please set the option property "iframeCSSFileName" before creating editor instances.';for(let t=0,n=e.length;t<n;t++)i+='<link href="'+e[t]+'" rel="stylesheet">'}return i+("auto"===e.height?"<style>\n/** Iframe height auto */\nbody{height: min-content; overflow: hidden;}\n</style>":"")}};var k=L,A={init:function(e,t){"object"!=typeof t&&(t={});const n=document;this._initOptions(e,t);const i=n.createElement("DIV");i.className="sun-editor"+(t.rtl?" se-rtl":""),e.id&&(i.id="suneditor_"+e.id);const o=n.createElement("DIV");o.className="se-container";const l=this._createToolBar(n,t.buttonList,t.plugins,t),s=l.element.cloneNode(!1);s.className+=" se-toolbar-shadow",l.element.style.visibility="hidden",l.pluginCallButtons.math&&this._checkKatexMath(t.katex);const r=n.createElement("DIV");r.className="se-arrow";const a=n.createElement("DIV");a.className="se-toolbar-sticky-dummy";const c=n.createElement("DIV");c.className="se-wrapper";const u=this._initElements(t,i,l.element,r),d=u.bottomBar,h=u.wysiwygFrame,p=u.placeholder;let f=u.codeView;const g=d.resizingBar,m=d.navigation,v=d.charWrapper,y=d.charCounter,b=n.createElement("DIV");b.className="se-loading-box sun-editor-common",b.innerHTML='<div class="se-loading-effect"></div>';const _=n.createElement("DIV");_.className="se-line-breaker",_.innerHTML='<button class="se-btn">'+t.icons.line_break+"</button>";const w=n.createElement("DIV");w.className+="se-line-breaker-component";const C=w.cloneNode(!0);w.innerHTML=C.innerHTML=t.icons.line_break;const x=n.createElement("DIV");x.className="se-resizing-back";const E=t.toolbarContainer;E&&(E.appendChild(l.element),E.appendChild(s));const S=t.resizingBarContainer;return g&&S&&S.appendChild(g),c.appendChild(f),p&&c.appendChild(p),E||(o.appendChild(l.element),o.appendChild(s)),o.appendChild(a),o.appendChild(c),o.appendChild(x),o.appendChild(b),o.appendChild(_),o.appendChild(w),o.appendChild(C),g&&!S&&o.appendChild(g),i.appendChild(o),f=this._checkCodeMirror(t,f),{constructed:{_top:i,_relative:o,_toolBar:l.element,_toolbarShadow:s,_menuTray:l._menuTray,_editorArea:c,_wysiwygArea:h,_codeArea:f,_placeholder:p,_resizingBar:g,_navigation:m,_charWrapper:v,_charCounter:y,_loading:b,_lineBreaker:_,_lineBreaker_t:w,_lineBreaker_b:C,_resizeBack:x,_stickyDummy:a,_arrow:r},options:t,plugins:l.plugins,pluginCallButtons:l.pluginCallButtons,_responsiveButtons:l.responsiveButtons}},_checkCodeMirror:function(e,t){if(e.codeMirror){const n=[{mode:"htmlmixed",htmlMode:!0,lineNumbers:!0,lineWrapping:!0},e.codeMirror.options||{}].reduce((function(e,t){for(let n in t)k.hasOwn(t,n)&&(e[n]=t[n]);return e}),{});"auto"===e.height&&(n.viewportMargin=1/0,n.height="auto");const i=e.codeMirror.src.fromTextArea(t,n);i.display.wrapper.style.cssText=t.style.cssText,e.codeMirrorEditor=i,(t=i.display.wrapper).className+=" se-wrapper-code-mirror"}return t},_checkKatexMath:function(e){if(!e)throw Error('[SUNEDITOR.create.fail] To use the math button you need to add a "katex" object to the options.');const t=[{throwOnError:!1},e.options||{}].reduce((function(e,t){for(let n in t)k.hasOwn(t,n)&&(e[n]=t[n]);return e}),{});e.options=t},_setOptions:function(e,t,n){this._initOptions(t.element.originElement,e);const i=t.element,o=i.relative,l=i.editorArea,s=e.toolbarContainer&&e.toolbarContainer!==n.toolbarContainer,r=e.lang!==n.lang||e.buttonList!==n.buttonList||e.mode!==n.mode||s,a=this._createToolBar(document,r?e.buttonList:n.buttonList,e.plugins,e);a.pluginCallButtons.math&&this._checkKatexMath(e.katex);const c=document.createElement("DIV");c.className="se-arrow",r&&(a.element.style.visibility="hidden",s?(e.toolbarContainer.appendChild(a.element),i.toolbar.parentElement.removeChild(i.toolbar)):i.toolbar.parentElement.replaceChild(a.element,i.toolbar),i.toolbar=a.element,i._menuTray=a._menuTray,i._arrow=c);const u=this._initElements(e,i.topArea,r?a.element:i.toolbar,c),d=u.bottomBar,h=u.wysiwygFrame,p=u.placeholder;let f=u.codeView;return i.resizingBar&&k.removeItem(i.resizingBar),d.resizingBar&&(e.resizingBarContainer&&e.resizingBarContainer!==n.resizingBarContainer?e.resizingBarContainer.appendChild(d.resizingBar):o.appendChild(d.resizingBar)),l.innerHTML="",l.appendChild(f),p&&l.appendChild(p),f=this._checkCodeMirror(e,f),i.resizingBar=d.resizingBar,i.navigation=d.navigation,i.charWrapper=d.charWrapper,i.charCounter=d.charCounter,i.wysiwygFrame=h,i.code=f,i.placeholder=p,e.rtl?k.addClass(i.topArea,"se-rtl"):k.removeClass(i.topArea,"se-rtl"),{callButtons:a.pluginCallButtons,plugins:a.plugins,toolbar:a}},_initElements:function(e,t,n,i){t.style.cssText=e._editorStyles.top,/inline/i.test(e.mode)?(n.className+=" se-toolbar-inline",n.style.width=e.toolbarWidth):/balloon/i.test(e.mode)&&(n.className+=" se-toolbar-balloon",n.style.width=e.toolbarWidth,n.appendChild(i));const o=document.createElement(e.iframe?"IFRAME":"DIV");if(o.className="se-wrapper-inner se-wrapper-wysiwyg",e.iframe)o.allowFullscreen=!0,o.frameBorder=0,o.style.cssText=e._editorStyles.frame,o.className+=e.className;else{o.setAttribute("contenteditable",!0),o.setAttribute("scrolling","auto");for(let t in e.iframeAttributes)o.setAttribute(t,e.iframeAttributes[t]);o.className+=" "+e._editableClass,o.style.cssText=e._editorStyles.frame+e._editorStyles.editor,o.className+=e.className}const l=document.createElement("TEXTAREA");l.className="se-wrapper-inner se-wrapper-code"+e.className,l.style.cssText=e._editorStyles.frame,l.style.display="none","auto"===e.height&&(l.style.overflow="hidden");let s=null,r=null,a=null,c=null;if(e.resizingBar&&(s=document.createElement("DIV"),s.className="se-resizing-bar sun-editor-common",r=document.createElement("DIV"),r.className="se-navigation sun-editor-common",s.appendChild(r),e.charCounter)){if(a=document.createElement("DIV"),a.className="se-char-counter-wrapper",e.charCounterLabel){const t=document.createElement("SPAN");t.className="se-char-label",t.textContent=e.charCounterLabel,a.appendChild(t)}if(c=document.createElement("SPAN"),c.className="se-char-counter",c.textContent="0",a.appendChild(c),e.maxCharCount>0){const t=document.createElement("SPAN");t.textContent=" / "+e.maxCharCount,a.appendChild(t)}s.appendChild(a)}let u=null;return e.placeholder&&(u=document.createElement("SPAN"),u.className="se-placeholder",u.innerText=e.placeholder),{bottomBar:{resizingBar:s,navigation:r,charWrapper:a,charCounter:c},wysiwygFrame:o,codeView:l,placeholder:u}},_initOptions:function(e,t){const n={};if(t.plugins){const e=t.plugins,i=e.length?e:Object.keys(e).map((function(t){return e[t]}));for(let e,t=0,o=i.length;t<o;t++)e=i[t].default||i[t],n[e.name]=e}t.plugins=n,t.lang=t.lang||N.a,t.value="string"==typeof t.value?t.value:null,t.historyStackDelayTime="number"==typeof t.historyStackDelayTime?t.historyStackDelayTime:400,t.frameAttrbutes=t.frameAttrbutes||{},t.defaultTag="string"==typeof t.defaultTag&&t.defaultTag.length>0?t.defaultTag:"p";const i=t.textTags=[{bold:"STRONG",underline:"U",italic:"EM",strike:"DEL",sub:"SUB",sup:"SUP"},t.textTags||{}].reduce((function(e,t){for(let n in t)e[n]=t[n];return e}),{});t._textTagsMap={strong:i.bold.toLowerCase(),b:i.bold.toLowerCase(),u:i.underline.toLowerCase(),ins:i.underline.toLowerCase(),em:i.italic.toLowerCase(),i:i.italic.toLowerCase(),del:i.strike.toLowerCase(),strike:i.strike.toLowerCase(),s:i.strike.toLowerCase(),sub:i.sub.toLowerCase(),sup:i.sup.toLowerCase()},t._defaultCommand={bold:t.textTags.bold,underline:t.textTags.underline,italic:t.textTags.italic,strike:t.textTags.strike,subscript:t.textTags.sub,superscript:t.textTags.sup};t.tagsBlacklist=t.tagsBlacklist||"",t._defaultTagsWhitelist="string"==typeof t._defaultTagsWhitelist?t._defaultTagsWhitelist:"br|p|div|pre|blockquote|h1|h2|h3|h4|h5|h6|ol|ul|li|hr|figure|figcaption|img|iframe|audio|video|source|table|thead|tbody|tr|th|td|a|b|strong|var|i|em|u|ins|s|span|strike|del|sub|sup|code|svg|path|details|summary",t._editorTagsWhitelist="*"===t.addTagsWhitelist?"*":this._setWhitelist(t._defaultTagsWhitelist+("string"==typeof t.addTagsWhitelist&&t.addTagsWhitelist.length>0?"|"+t.addTagsWhitelist:""),t.tagsBlacklist),t.pasteTagsBlacklist=t.tagsBlacklist+(t.tagsBlacklist&&t.pasteTagsBlacklist?"|"+t.pasteTagsBlacklist:t.pasteTagsBlacklist||""),t.pasteTagsWhitelist="*"===t.pasteTagsWhitelist?"*":this._setWhitelist("string"==typeof t.pasteTagsWhitelist?t.pasteTagsWhitelist:t._editorTagsWhitelist,t.pasteTagsBlacklist),t.attributesWhitelist=t.attributesWhitelist&&"object"==typeof t.attributesWhitelist?t.attributesWhitelist:null,t.attributesBlacklist=t.attributesBlacklist&&"object"==typeof t.attributesBlacklist?t.attributesBlacklist:null,t.mode=t.mode||"classic",t.rtl=!!t.rtl,t.lineAttrReset="string"==typeof t.lineAttrReset&&t.lineAttrReset?"*"===t.lineAttrReset?"*":new RegExp("^("+t.lineAttrReset+")$","i"):null,t._editableClass="sun-editor-editable"+(t.rtl?" se-rtl":""),t._printClass="string"==typeof t._printClass?t._printClass:null,t.toolbarWidth=t.toolbarWidth?k.isNumber(t.toolbarWidth)?t.toolbarWidth+"px":t.toolbarWidth:"auto",t.toolbarContainer="string"==typeof t.toolbarContainer?document.querySelector(t.toolbarContainer):t.toolbarContainer,t.stickyToolbar=/balloon/i.test(t.mode)||t.toolbarContainer?-1:void 0===t.stickyToolbar?0:/^\d+/.test(t.stickyToolbar)?k.getNumber(t.stickyToolbar,0):-1,t.hideToolbar=!!t.hideToolbar,t.fullScreenOffset=void 0===t.fullScreenOffset?0:/^\d+/.test(t.fullScreenOffset)?k.getNumber(t.fullScreenOffset,0):0,t.fullPage=!!t.fullPage,t.iframe=t.fullPage||!!t.iframe,t.iframeAttributes=t.iframeAttributes||{},t.iframeCSSFileName=t.iframe?"string"==typeof t.iframeCSSFileName?[t.iframeCSSFileName]:t.iframeCSSFileName||["suneditor"]:null,t.previewTemplate="string"==typeof t.previewTemplate?t.previewTemplate:null,t.printTemplate="string"==typeof t.printTemplate?t.printTemplate:null,t.codeMirror=t.codeMirror?t.codeMirror.src?t.codeMirror:{src:t.codeMirror}:null,t.katex=t.katex?t.katex.src?t.katex:{src:t.katex}:null,t.mathFontSize=t.mathFontSize?t.mathFontSize:[{text:"1",value:"1em"},{text:"1.5",value:"1.5em"},{text:"2",value:"2em"},{text:"2.5",value:"2.5em"}],t.position="string"==typeof t.position?t.position:null,t.display=t.display||("none"!==e.style.display&&e.style.display?e.style.display:"block"),t.popupDisplay=t.popupDisplay||"full",t.resizingBar=void 0===t.resizingBar?!/inline|balloon/i.test(t.mode):t.resizingBar,t.showPathLabel=!!t.resizingBar&&("boolean"!=typeof t.showPathLabel||t.showPathLabel),t.resizeEnable=void 0===t.resizeEnable||!!t.resizeEnable,t.resizingBarContainer="string"==typeof t.resizingBarContainer?document.querySelector(t.resizingBarContainer):t.resizingBarContainer,t.charCounter=t.maxCharCount>0||"boolean"==typeof t.charCounter&&t.charCounter,t.charCounterType="string"==typeof t.charCounterType?t.charCounterType:"char",t.charCounterLabel="string"==typeof t.charCounterLabel?t.charCounterLabel.trim():null,t.maxCharCount=k.isNumber(t.maxCharCount)&&t.maxCharCount>-1?1*t.maxCharCount:null,t.width=t.width?k.isNumber(t.width)?t.width+"px":t.width:e.clientWidth?e.clientWidth+"px":"100%",t.minWidth=(k.isNumber(t.minWidth)?t.minWidth+"px":t.minWidth)||"",t.maxWidth=(k.isNumber(t.maxWidth)?t.maxWidth+"px":t.maxWidth)||"",t.height=t.height?k.isNumber(t.height)?t.height+"px":t.height:e.clientHeight?e.clientHeight+"px":"auto",t.minHeight=(k.isNumber(t.minHeight)?t.minHeight+"px":t.minHeight)||"",t.maxHeight=(k.isNumber(t.maxHeight)?t.maxHeight+"px":t.maxHeight)||"",t.className="string"==typeof t.className&&t.className.length>0?" "+t.className:"",t.defaultStyle="string"==typeof t.defaultStyle?t.defaultStyle:"",t.font=t.font?t.font:["Arial","Comic Sans MS","Courier New","Impact","Georgia","tahoma","Trebuchet MS","Verdana"],t.fontSize=t.fontSize?t.fontSize:null,t.formats=t.formats?t.formats:null,t.colorList=t.colorList?t.colorList:null,t.lineHeights=t.lineHeights?t.lineHeights:null,t.paragraphStyles=t.paragraphStyles?t.paragraphStyles:null,t.textStyles=t.textStyles?t.textStyles:null,t.fontSizeUnit="string"==typeof t.fontSizeUnit&&t.fontSizeUnit.trim().toLowerCase()||"px",t.alignItems="object"==typeof t.alignItems?t.alignItems:t.rtl?["right","center","left","justify"]:["left","center","right","justify"],t.imageResizing=void 0===t.imageResizing||t.imageResizing,t.imageHeightShow=void 0===t.imageHeightShow||!!t.imageHeightShow,t.imageAlignShow=void 0===t.imageAlignShow||!!t.imageAlignShow,t.imageWidth=t.imageWidth?k.isNumber(t.imageWidth)?t.imageWidth+"px":t.imageWidth:"auto",t.imageHeight=t.imageHeight?k.isNumber(t.imageHeight)?t.imageHeight+"px":t.imageHeight:"auto",t.imageSizeOnlyPercentage=!!t.imageSizeOnlyPercentage,t._imageSizeUnit=t.imageSizeOnlyPercentage?"%":"px",t.imageRotation=void 0!==t.imageRotation?t.imageRotation:!(t.imageSizeOnlyPercentage||!t.imageHeightShow),t.imageFileInput=void 0===t.imageFileInput||t.imageFileInput,t.imageUrlInput=void 0===t.imageUrlInput||!t.imageFileInput||t.imageUrlInput,t.imageUploadHeader=t.imageUploadHeader||null,t.imageUploadUrl="string"==typeof t.imageUploadUrl?t.imageUploadUrl:null,t.imageUploadSizeLimit=/\d+/.test(t.imageUploadSizeLimit)?k.getNumber(t.imageUploadSizeLimit,0):null,t.imageMultipleFile=!!t.imageMultipleFile,t.imageAccept="string"!=typeof t.imageAccept||"*"===t.imageAccept.trim()?"image/*":t.imageAccept.trim()||"image/*",t.imageGalleryUrl="string"==typeof t.imageGalleryUrl?t.imageGalleryUrl:null,t.imageGalleryHeader=t.imageGalleryHeader||null,t.videoResizing=void 0===t.videoResizing||t.videoResizing,t.videoHeightShow=void 0===t.videoHeightShow||!!t.videoHeightShow,t.videoAlignShow=void 0===t.videoAlignShow||!!t.videoAlignShow,t.videoRatioShow=void 0===t.videoRatioShow||!!t.videoRatioShow,t.videoWidth=t.videoWidth&&k.getNumber(t.videoWidth,0)?k.isNumber(t.videoWidth)?t.videoWidth+"px":t.videoWidth:"",t.videoHeight=t.videoHeight&&k.getNumber(t.videoHeight,0)?k.isNumber(t.videoHeight)?t.videoHeight+"px":t.videoHeight:"",t.videoSizeOnlyPercentage=!!t.videoSizeOnlyPercentage,t._videoSizeUnit=t.videoSizeOnlyPercentage?"%":"px",t.videoRotation=void 0!==t.videoRotation?t.videoRotation:!(t.videoSizeOnlyPercentage||!t.videoHeightShow),t.videoRatio=k.getNumber(t.videoRatio,4)||.5625,t.videoRatioList=t.videoRatioList?t.videoRatioList:null,t.youtubeQuery=(t.youtubeQuery||"").replace("?",""),t.videoFileInput=!!t.videoFileInput,t.videoUrlInput=void 0===t.videoUrlInput||!t.videoFileInput||t.videoUrlInput,t.videoUploadHeader=t.videoUploadHeader||null,t.videoUploadUrl="string"==typeof t.videoUploadUrl?t.videoUploadUrl:null,t.videoUploadSizeLimit=/\d+/.test(t.videoUploadSizeLimit)?k.getNumber(t.videoUploadSizeLimit,0):null,t.videoMultipleFile=!!t.videoMultipleFile,t.videoTagAttrs=t.videoTagAttrs||null,t.videoIframeAttrs=t.videoIframeAttrs||null,t.videoAccept="string"!=typeof t.videoAccept||"*"===t.videoAccept.trim()?"video/*":t.videoAccept.trim()||"video/*",t.audioWidth=t.audioWidth?k.isNumber(t.audioWidth)?t.audioWidth+"px":t.audioWidth:"",t.audioHeight=t.audioHeight?k.isNumber(t.audioHeight)?t.audioHeight+"px":t.audioHeight:"",t.audioFileInput=!!t.audioFileInput,t.audioUrlInput=void 0===t.audioUrlInput||!t.audioFileInput||t.audioUrlInput,t.audioUploadHeader=t.audioUploadHeader||null,t.audioUploadUrl="string"==typeof t.audioUploadUrl?t.audioUploadUrl:null,t.audioUploadSizeLimit=/\d+/.test(t.audioUploadSizeLimit)?k.getNumber(t.audioUploadSizeLimit,0):null,t.audioMultipleFile=!!t.audioMultipleFile,t.audioTagAttrs=t.audioTagAttrs||null,t.audioAccept="string"!=typeof t.audioAccept||"*"===t.audioAccept.trim()?"audio/*":t.audioAccept.trim()||"audio/*",t.tableCellControllerPosition="string"==typeof t.tableCellControllerPosition?t.tableCellControllerPosition.toLowerCase():"cell",t.linkTargetNewWindow=!!t.linkTargetNewWindow,t.linkProtocol="string"==typeof t.linkProtocol?t.linkProtocol:null,t.linkRel=Array.isArray(t.linkRel)?t.linkRel:[],t.linkRelDefault=t.linkRelDefault||{},t.tabDisable=!!t.tabDisable,t.shortcutsDisable=Array.isArray(t.shortcutsDisable)?t.shortcutsDisable:[],t.shortcutsHint=void 0===t.shortcutsHint||!!t.shortcutsHint,t.callBackSave=t.callBackSave?t.callBackSave:null,t.templates=t.templates?t.templates:null,t.placeholder="string"==typeof t.placeholder?t.placeholder:null,t.mediaAutoSelect=void 0===t.mediaAutoSelect||!!t.mediaAutoSelect,t.buttonList=t.buttonList?t.buttonList:[["undo","redo"],["bold","underline","italic","strike","subscript","superscript"],["removeFormat"],["outdent","indent"],["fullScreen","showBlocks","codeView"],["preview","print"]],t.rtl&&(t.buttonList=t.buttonList.reverse()),t.icons=t.icons&&"object"==typeof t.icons?[S,t.icons].reduce((function(e,t){for(let n in t)k.hasOwn(t,n)&&(e[n]=t[n]);return e}),{}):S,t.icons=t.rtl?[t.icons,t.icons.rtl].reduce((function(e,t){for(let n in t)k.hasOwn(t,n)&&(e[n]=t[n]);return e}),{}):t.icons,t.__listCommonStyle=t.__listCommonStyle||["fontSize","color","fontFamily","fontWeight","fontStyle"],t._editorStyles=k._setDefaultOptionStyle(t,t.defaultStyle)},_setWhitelist:function(e,t){if("string"!=typeof t)return e;t=t.split("|"),e=e.split("|");for(let n,i=0,o=t.length;i<o;i++)n=e.indexOf(t[i]),n>-1&&e.splice(n,1);return e.join("|")},_defaultButtons:function(e){const t=e.icons,n=e.lang,i=k.isOSX_IOS?"⌘":"CTRL",o=k.isOSX_IOS?"⇧":"+SHIFT",l=e.shortcutsHint?e.shortcutsDisable:["bold","strike","underline","italic","undo","indent","save"],s=e.rtl?["[","]"]:["]","["],r=e.rtl?[t.outdent,t.indent]:[t.indent,t.outdent];return{bold:["",n.toolbar.bold+'<span class="se-shortcut">'+(l.indexOf("bold")>-1?"":i+'+<span class="se-shortcut-key">B</span>')+"</span>","bold","",t.bold],underline:["",n.toolbar.underline+'<span class="se-shortcut">'+(l.indexOf("underline")>-1?"":i+'+<span class="se-shortcut-key">U</span>')+"</span>","underline","",t.underline],italic:["",n.toolbar.italic+'<span class="se-shortcut">'+(l.indexOf("italic")>-1?"":i+'+<span class="se-shortcut-key">I</span>')+"</span>","italic","",t.italic],strike:["",n.toolbar.strike+'<span class="se-shortcut">'+(l.indexOf("strike")>-1?"":i+o+'+<span class="se-shortcut-key">S</span>')+"</span>","strike","",t.strike],subscript:["",n.toolbar.subscript,"SUB","",t.subscript],superscript:["",n.toolbar.superscript,"SUP","",t.superscript],removeFormat:["",n.toolbar.removeFormat,"removeFormat","",t.erase],indent:["",n.toolbar.indent+'<span class="se-shortcut">'+(l.indexOf("indent")>-1?"":i+'+<span class="se-shortcut-key">'+s[0]+"</span>")+"</span>","indent","",r[0]],outdent:["",n.toolbar.outdent+'<span class="se-shortcut">'+(l.indexOf("indent")>-1?"":i+'+<span class="se-shortcut-key">'+s[1]+"</span>")+"</span>","outdent","",r[1]],fullScreen:["se-code-view-enabled se-resizing-enabled",n.toolbar.fullScreen,"fullScreen","",t.expansion],showBlocks:["",n.toolbar.showBlocks,"showBlocks","",t.show_blocks],codeView:["se-code-view-enabled se-resizing-enabled",n.toolbar.codeView,"codeView","",t.code_view],undo:["",n.toolbar.undo+'<span class="se-shortcut">'+(l.indexOf("undo")>-1?"":i+'+<span class="se-shortcut-key">Z</span>')+"</span>","undo","",t.undo],redo:["",n.toolbar.redo+'<span class="se-shortcut">'+(l.indexOf("undo")>-1?"":i+'+<span class="se-shortcut-key">Y</span> / '+i+o+'+<span class="se-shortcut-key">Z</span>')+"</span>","redo","",t.redo],preview:["se-resizing-enabled",n.toolbar.preview,"preview","",t.preview],print:["se-resizing-enabled",n.toolbar.print,"print","",t.print],dir:["",n.toolbar[e.rtl?"dir_ltr":"dir_rtl"],"dir","",t[e.rtl?"dir_ltr":"dir_rtl"]],dir_ltr:["",n.toolbar.dir_ltr,"dir_ltr","",t.dir_ltr],dir_rtl:["",n.toolbar.dir_rtl,"dir_rtl","",t.dir_rtl],save:["se-resizing-enabled",n.toolbar.save+'<span class="se-shortcut">'+(l.indexOf("save")>-1?"":i+'+<span class="se-shortcut-key">S</span>')+"</span>","save","",t.save],blockquote:["",n.toolbar.tag_blockquote,"blockquote","command",t.blockquote],font:["se-btn-select se-btn-tool-font",n.toolbar.font,"font","submenu",'<span class="txt">'+n.toolbar.font+"</span>"+t.arrow_down],formatBlock:["se-btn-select se-btn-tool-format",n.toolbar.formats,"formatBlock","submenu",'<span class="txt">'+n.toolbar.formats+"</span>"+t.arrow_down],fontSize:["se-btn-select se-btn-tool-size",n.toolbar.fontSize,"fontSize","submenu",'<span class="txt">'+n.toolbar.fontSize+"</span>"+t.arrow_down],fontColor:["",n.toolbar.fontColor,"fontColor","submenu",t.font_color],hiliteColor:["",n.toolbar.hiliteColor,"hiliteColor","submenu",t.highlight_color],align:["se-btn-align",n.toolbar.align,"align","submenu",e.rtl?t.align_right:t.align_left],list:["",n.toolbar.list,"list","submenu",t.list_number],horizontalRule:["btn_line",n.toolbar.horizontalRule,"horizontalRule","submenu",t.horizontal_rule],table:["",n.toolbar.table,"table","submenu",t.table],lineHeight:["",n.toolbar.lineHeight,"lineHeight","submenu",t.line_height],template:["",n.toolbar.template,"template","submenu",t.template],paragraphStyle:["",n.toolbar.paragraphStyle,"paragraphStyle","submenu",t.paragraph_style],textStyle:["",n.toolbar.textStyle,"textStyle","submenu",t.text_style],link:["",n.toolbar.link,"link","dialog",t.link],image:["",n.toolbar.image,"image","dialog",t.image],video:["",n.toolbar.video,"video","dialog",t.video],audio:["",n.toolbar.audio,"audio","dialog",t.audio],math:["",n.toolbar.math,"math","dialog",t.math],imageGallery:["",n.toolbar.imageGallery,"imageGallery","fileBrowser",t.image_gallery]}},_createModuleGroup:function(){const e=k.createElement("DIV");e.className="se-btn-module se-btn-module-border";const t=k.createElement("UL");return t.className="se-menu-list",e.appendChild(t),{div:e,ul:t}},_createButton:function(e,t,n,i,o,l,s){const r=k.createElement("LI"),a=k.createElement("BUTTON"),c=t||n;return a.setAttribute("type","button"),a.setAttribute("class","se-btn"+(e?" "+e:"")+" se-tooltip"),a.setAttribute("data-command",n),a.setAttribute("data-display",i),a.setAttribute("aria-label",c.replace(/<span .+<\/span>/,"")),a.setAttribute("tabindex","-1"),o||(o='<span class="se-icon-text">!</span>'),/^default\./i.test(o)&&(o=s[o.replace(/^default\./i,"")]),/^text\./i.test(o)&&(o=o.replace(/^text\./i,""),a.className+=" se-btn-more-text"),o+='<span class="se-tooltip-inner"><span class="se-tooltip-text">'+c+"</span></span>",l&&a.setAttribute("disabled",!0),a.innerHTML=o,r.appendChild(a),{li:r,button:a}},_createToolBar:function(e,t,n,i){const o=e.createElement("DIV");o.className="se-toolbar-separator-vertical";const l=e.createElement("DIV");l.className="se-toolbar sun-editor-common";const s=e.createElement("DIV");s.className="se-btn-tray",l.appendChild(s),t=JSON.parse(JSON.stringify(t));const r=i.icons,a=this._defaultButtons(i),c={},u=[];let d=null,h=null,p=null,f=null,g="",m=!1;const v=k.createElement("DIV");v.className="se-toolbar-more-layer";e:for(let i,l,y,b,_,w=0;w<t.length;w++)if(i=!1,_="",b=t[w],p=this._createModuleGroup(),"object"==typeof b){for(let e,o=0;o<b.length;o++){if(h=b[o],e=!1,/^\%\d+/.test(h)&&0===o){b[0]=h.replace(/[^\d]/g,""),u.push(b),t.splice(w--,1);continue e}if("object"==typeof h)"function"==typeof h.add?(g=h.name,d=a[g],n[g]=h):(g=h.name,d=[h.buttonClass,h.title,h.name,h.dataDisplay,h.innerHTML,h._disabled]);else{if(/^\-/.test(h)){_=h.substr(1),p.div.className+=" module-float-"+_;continue}if(/^\#/.test(h)){"fix"===h.substr(1)&&(p.ul.className+=" se-menu-dir-fix");continue}if(/^\:/.test(h)){e=!0;const t=h.match(/^\:([^\-]+)\-([^\-]+)\-([^\-]+)/);y="__se__"+t[1].trim();d=["se-btn-more",t[2].trim(),y,"MORE",t[3].trim()]}else d=a[h];if(g=h,!d){const e=n[g];if(!e)throw Error("[SUNEDITOR.create.toolbar.fail] The button name of a plugin that does not exist. ["+g+"]");d=[e.buttonClass,e.title,e.name,e.display,e.innerHTML,e._disabled]}}f=this._createButton(d[0],d[1],d[2],d[3],d[4],d[5],r),(i?l:p.ul).appendChild(f.li),n[g]&&(c[g]=f.button),e&&(i=!0,l=k.createElement("DIV"),l.className="se-more-layer "+y,l.innerHTML='<div class="se-more-form"><ul class="se-menu-list"'+(_?' style="float: '+_+';"':"")+"></ul></div>",v.appendChild(l),l=l.firstElementChild.firstElementChild)}if(m){const e=o.cloneNode(!1);s.appendChild(e)}s.appendChild(p.div),m=!0}else if(/^\/$/.test(b)){const t=e.createElement("DIV");t.className="se-btn-module-enter",s.appendChild(t),m=!1}switch(s.children.length){case 0:s.style.display="none";break;case 1:k.removeClass(s.firstElementChild,"se-btn-module-border");break;default:if(i.rtl){const e=o.cloneNode(!1);e.style.float=s.lastElementChild.style.float,s.appendChild(e)}}u.length>0&&u.unshift(t),v.children.length>0&&s.appendChild(v);const y=e.createElement("DIV");y.className="se-menu-tray",l.appendChild(y);const b=e.createElement("DIV");return b.className="se-toolbar-cover",l.appendChild(b),i.hideToolbar&&(l.style.display="none"),{element:l,plugins:n,pluginCallButtons:c,responsiveButtons:u,_menuTray:y,_buttonTray:s}}};var B=function(e,t,n){return{element:{originElement:e,topArea:t._top,relative:t._relative,toolbar:t._toolBar,_toolbarShadow:t._toolbarShadow,_buttonTray:t._toolBar.querySelector(".se-btn-tray"),_menuTray:t._menuTray,resizingBar:t._resizingBar,navigation:t._navigation,charWrapper:t._charWrapper,charCounter:t._charCounter,editorArea:t._editorArea,wysiwygFrame:t._wysiwygArea,wysiwyg:t._wysiwygArea,code:t._codeArea,placeholder:t._placeholder,loading:t._loading,lineBreaker:t._lineBreaker,lineBreaker_t:t._lineBreaker_t,lineBreaker_b:t._lineBreaker_b,resizeBackground:t._resizeBack,_stickyDummy:t._stickyDummy,_arrow:t._arrow},tool:{cover:t._toolBar.querySelector(".se-toolbar-cover"),bold:t._toolBar.querySelector('[data-command="bold"]'),underline:t._toolBar.querySelector('[data-command="underline"]'),italic:t._toolBar.querySelector('[data-command="italic"]'),strike:t._toolBar.querySelector('[data-command="strike"]'),sub:t._toolBar.querySelector('[data-command="SUB"]'),sup:t._toolBar.querySelector('[data-command="SUP"]'),undo:t._toolBar.querySelector('[data-command="undo"]'),redo:t._toolBar.querySelector('[data-command="redo"]'),save:t._toolBar.querySelector('[data-command="save"]'),outdent:t._toolBar.querySelector('[data-command="outdent"]'),indent:t._toolBar.querySelector('[data-command="indent"]'),fullScreen:t._toolBar.querySelector('[data-command="fullScreen"]'),showBlocks:t._toolBar.querySelector('[data-command="showBlocks"]'),codeView:t._toolBar.querySelector('[data-command="codeView"]'),dir:t._toolBar.querySelector('[data-command="dir"]'),dir_ltr:t._toolBar.querySelector('[data-command="dir_ltr"]'),dir_rtl:t._toolBar.querySelector('[data-command="dir_rtl"]')},options:n,option:n}},M={name:"notice",add:function(e){const t=e.context;t.notice={};let n=e.util.createElement("DIV"),i=e.util.createElement("SPAN"),o=e.util.createElement("BUTTON");n.className="se-notice",o.className="close",o.setAttribute("aria-label","Close"),o.setAttribute("title",e.lang.dialogBox.close),o.innerHTML=e.icons.cancel,n.appendChild(i),n.appendChild(o),t.notice.modal=n,t.notice.message=i,o.addEventListener("click",this.onClick_cancel.bind(e)),t.element.editorArea.appendChild(n),n=null},onClick_cancel:function(e){e.preventDefault(),e.stopPropagation(),this.plugins.notice.close.call(this)},open:function(e){this.context.notice.message.textContent=e,this.context.notice.modal.style.display="block"},close:function(){this.context.notice.modal.style.display="none"}},I=n("h8zM");const z=new(n.n(I).a)({}),O=new Event("pastingInitEvent"),R=new Event("pastingEndEvent");var H={init:function(e){return{create:function(t,n){return this.create(t,n,e)}.bind(this)}},create:function(e,t,n){k._propertiesInit(),"object"!=typeof t&&(t={}),n&&(t=[n,t].reduce((function(e,t){for(let n in t)if(k.hasOwn(t,n))if("plugins"===n&&t[n]&&e[n]){let i=e[n],o=t[n];i=i.length?i:Object.keys(i).map((function(e){return i[e]})),o=o.length?o:Object.keys(o).map((function(e){return o[e]})),e[n]=o.filter((function(e){return-1===i.indexOf(e)})).concat(i)}else e[n]=t[n];return e}),{}));const i="string"==typeof e?document.getElementById(e):e;if(!i){if("string"==typeof e)throw Error('[SUNEDITOR.create.fail] The element for that id was not found (ID:"'+e+'")');throw Error("[SUNEDITOR.create.fail] suneditor requires textarea's element or id value")}const o=A.init(i,t);if(o.constructed._top.id&&document.getElementById(o.constructed._top.id))throw Error('[SUNEDITOR.create.fail] The ID of the suneditor you are trying to create already exists (ID:"'+o.constructed._top.id+'")');return function(e,t,n,i,o,l){const s=e.element.originElement.ownerDocument||document,r=s.defaultView||window,a=k,c=o.icons,u={_d:s,_w:r,_parser:new r.DOMParser,_prevRtl:o.rtl,_editorHeight:0,_editorHeightPadding:0,_listCamel:o.__listCommonStyle,_listKebab:a.camelToKebabCase(o.__listCommonStyle),_wd:null,_ww:null,_shadowRoot:null,_shadowRootControllerEventTarget:null,util:a,functions:null,options:null,wwComputedStyle:null,notice:M,icons:c,history:null,context:e,pluginCallButtons:t,plugins:n||{},initPlugins:{},_targetPlugins:{},_menuTray:{},lang:i,effectNode:null,submenu:null,container:null,_submenuName:"",_bindedSubmenuOff:null,_bindedContainerOff:null,submenuActiveButton:null,containerActiveButton:null,controllerArray:[],currentControllerName:"",currentControllerTarget:null,currentFileComponentInfo:null,codeViewDisabledButtons:[],resizingDisabledButtons:[],_moreLayerActiveButton:null,_htmlCheckWhitelistRegExp:null,_htmlCheckBlacklistRegExp:null,_disallowedTextTagsRegExp:null,editorTagsWhitelistRegExp:null,editorTagsBlacklistRegExp:null,pasteTagsWhitelistRegExp:null,pasteTagsBlacklistRegExp:null,hasFocus:!1,isDisabled:!1,isReadOnly:!1,_attributesWhitelistRegExp:null,_attributesWhitelistRegExp_all_data:null,_attributesBlacklistRegExp:null,_attributesTagsWhitelist:null,_attributesTagsBlacklist:null,_bindControllersOff:null,_isInline:null,_isBalloon:null,_isBalloonAlways:null,_inlineToolbarAttr:{top:"",width:"",isShow:!1},_notHideToolbar:!1,_sticky:!1,_antiBlur:!1,_lineBreaker:null,_lineBreakerButton:null,_componentsInfoInit:!0,_componentsInfoReset:!1,activePlugins:null,managedTagsInfo:null,_charTypeHTML:!1,_fileInfoPluginsCheck:null,_fileInfoPluginsReset:null,_fileManager:{tags:null,regExp:null,queryString:null,pluginRegExp:null,pluginMap:null},commandMap:null,_commandMapStyles:{STRONG:["font-weight"],U:["text-decoration"],EM:["font-style"],DEL:["text-decoration"]},_styleCommandMap:null,_cleanStyleRegExp:{span:new r.RegExp("\\s*[^-a-zA-Z](font-family|font-size|color|background-color)\\s*:[^;]+(?!;)*","ig"),format:new r.RegExp("\\s*[^-a-zA-Z](text-align|margin-left|margin-right)\\s*:[^;]+(?!;)*","ig"),fontSizeUnit:new r.RegExp("\\d+"+o.fontSizeUnit+"$","i")},_variable:{isChanged:!1,isCodeView:!1,isFullScreen:!1,innerHeight_fullScreen:0,resizeClientY:0,tabSize:4,codeIndent:2,minResizingSize:a.getNumber(e.element.wysiwygFrame.style.minHeight||"65",0),currentNodes:[],currentNodesMap:[],_range:null,_selectionNode:null,_originCssText:e.element.topArea.style.cssText,_bodyOverflow:"",_editorAreaOriginCssText:"",_wysiwygOriginCssText:"",_codeOriginCssText:"",_fullScreenAttrs:{sticky:!1,balloon:!1,inline:!1},_lineBreakComp:null,_lineBreakDir:""},_saveButtonStates:function(){this.allCommandButtons||(this.allCommandButtons={});const e=this.context.element._buttonTray.querySelectorAll(".se-menu-list button[data-display]");for(let t,n,i=0;i<e.length;i++)t=e[i],n=t.getAttribute("data-command"),this.allCommandButtons[n]=t},_recoverButtonStates:function(){if(this.allCommandButtons){const e=this.context.element._buttonTray.querySelectorAll(".se-menu-list button[data-display]");for(let t,n,i,o=0;o<e.length;o++)t=e[o],n=t.getAttribute("data-command"),i=this.allCommandButtons[n],i&&(t.parentElement.replaceChild(i,t),this.context.tool[n]&&(this.context.tool[n]=i))}},callPlugin:function(e,n,i){if(i=i||t[e],!this.plugins[e])throw Error('[SUNEDITOR.core.callPlugin.fail] The called plugin does not exist or is in an invalid format. (pluginName:"'+e+'")');this.initPlugins[e]?"object"==typeof this._targetPlugins[e]&&i&&this.initMenuTarget(e,i,this._targetPlugins[e]):(this.plugins[e].add(this,i),this.initPlugins[e]=!0),this.plugins[e].active&&!this.commandMap[e]&&i&&(this.commandMap[e]=i,this.activePlugins.push(e)),"function"==typeof n&&n()},addModule:function(e){for(let t,n=0,i=e.length;n<i;n++)t=e[n].name,this.plugins[t]||(this.plugins[t]=e[n]),this.initPlugins[t]||(this.initPlugins[t]=!0,"function"==typeof this.plugins[t].add&&this.plugins[t].add(this))},getGlobalScrollOffset:function(){let t=0,n=0,i=e.element.topArea;for(;i;)t+=i.scrollTop,n+=i.scrollLeft,i=i.parentElement;for(i=this._shadowRoot?this._shadowRoot.host:null;i;)t+=i.scrollTop,n+=i.scrollLeft,i=i.parentElement;return{top:t,left:n}},initMenuTarget:function(t,n,i){n?(e.element._menuTray.appendChild(i),this._targetPlugins[t]=!0,this._menuTray[n.getAttribute("data-command")]=i):this._targetPlugins[t]=i},submenuOn:function(e){this._bindedSubmenuOff&&this._bindedSubmenuOff(),this._bindControllersOff&&this.controllersOff();const t=this._submenuName=e.getAttribute("data-command"),n=this.submenu=this._menuTray[t];this.submenuActiveButton=e,this._setMenuPosition(e,n),this._bindedSubmenuOff=this.submenuOff.bind(this),this.addDocEvent("mousedown",this._bindedSubmenuOff,!1),this.plugins[t].on&&this.plugins[t].on.call(this),this._antiBlur=!0},submenuOff:function(){this.removeDocEvent("mousedown",this._bindedSubmenuOff),this._bindedSubmenuOff=null,this.submenu&&(this._submenuName="",this.submenu.style.display="none",this.submenu=null,a.removeClass(this.submenuActiveButton,"on"),this.submenuActiveButton=null,this._notHideToolbar=!1),this._antiBlur=!1},moreLayerOff:function(){if(this._moreLayerActiveButton){e.element.toolbar.querySelector("."+this._moreLayerActiveButton.getAttribute("data-command")).style.display="none",a.removeClass(this._moreLayerActiveButton,"on"),this._moreLayerActiveButton=null}},containerOn:function(e){this._bindedContainerOff&&this._bindedContainerOff();const t=this._containerName=e.getAttribute("data-command"),n=this.container=this._menuTray[t];this.containerActiveButton=e,this._setMenuPosition(e,n),this._bindedContainerOff=this.containerOff.bind(this),this.addDocEvent("mousedown",this._bindedContainerOff,!1),this.plugins[t].on&&this.plugins[t].on.call(this),this._antiBlur=!0},containerOff:function(){this.removeDocEvent("mousedown",this._bindedContainerOff),this._bindedContainerOff=null,this.container&&(this._containerName="",this.container.style.display="none",this.container=null,a.removeClass(this.containerActiveButton,"on"),this.containerActiveButton=null,this._notHideToolbar=!1),this._antiBlur=!1},_setMenuPosition:function(t,n){n.style.visibility="hidden",n.style.display="block",n.style.height="",a.addClass(t,"on");const i=this.context.element.toolbar,l=i.offsetWidth,s=d._getEditorOffsets(e.element.toolbar),c=n.offsetWidth,u=t.parentElement.offsetLeft+3;if(o.rtl){const e=t.offsetWidth,i=c>e?c-e:0,o=i>0?0:e-c;n.style.left=u-i+o+"px",s.left>d._getEditorOffsets(n).left&&(n.style.left="0px")}else{const e=l<=c?0:l-(u+c);n.style.left=e<0?u+e+"px":u+"px"}let h=0,p=t;for(;p&&p!==i;)h+=p.offsetTop,p=p.offsetParent;const f=h;this._isBalloon?h+=i.offsetTop+t.offsetHeight:h-=t.offsetHeight;const g=s.top,m=n.offsetHeight,v=this.getGlobalScrollOffset().top,y=r.innerHeight-(g-v+f+t.parentElement.offsetHeight);if(y<m){let e=-1*(m-f+3);const i=g-v+e,o=m+(i<0?i:0);o>y?(n.style.height=o+"px",e=-1*(o-f+3)):(n.style.height=y+"px",e=f+t.parentElement.offsetHeight),n.style.top=e+"px"}else n.style.top=f+t.parentElement.offsetHeight+"px";n.style.visibility=""},controllersOn:function(){this._bindControllersOff&&this._bindControllersOff(),this.controllerArray=[];for(let e,t=0;t<arguments.length;t++)e=arguments[t],e&&("string"!=typeof e?"function"!=typeof e?a.hasClass(e,"se-controller")?(e.style&&(e.style.display="block",this._shadowRoot&&-1===this._shadowRootControllerEventTarget.indexOf(e)&&(e.addEventListener("mousedown",(function(e){e.preventDefault(),e.stopPropagation()})),this._shadowRootControllerEventTarget.push(e))),this.controllerArray.push(e)):(this.currentControllerTarget=e,this.currentFileComponentInfo=this.getFileComponent(e)):this.controllerArray.push(e):this.currentControllerName=e);this._bindControllersOff=this.controllersOff.bind(this),this.addDocEvent("mousedown",this._bindControllersOff,!1),this.addDocEvent("keydown",this._bindControllersOff,!1),this._antiBlur=!0,"function"==typeof h.showController&&h.showController(this.currentControllerName,this.controllerArray,this)},controllersOff:function(t){this._lineBreaker.style.display="none";const n=this.controllerArray.length;if(t&&t.target&&n>0)for(let e=0;e<n;e++)if("function"==typeof this.controllerArray[e].contains&&this.controllerArray[e].contains(t.target))return;if((!this._fileManager.pluginRegExp.test(this.currentControllerName)||!t||"keydown"!==t.type||27===t.keyCode)&&(e.element.lineBreaker_t.style.display=e.element.lineBreaker_b.style.display="none",this._variable._lineBreakComp=null,this.currentControllerName="",this.currentControllerTarget=null,this.currentFileComponentInfo=null,this.effectNode=null,this._bindControllersOff)){if(this.removeDocEvent("mousedown",this._bindControllersOff),this.removeDocEvent("keydown",this._bindControllersOff),this._bindControllersOff=null,n>0){for(let e=0;e<n;e++)"function"==typeof this.controllerArray[e]?this.controllerArray[e]():this.controllerArray[e].style.display="none";this.controllerArray=[]}this._antiBlur=!1}},setControllerPosition:function(t,n,i,l){o.rtl&&(l.left*=-1);const s=a.getOffset(n,e.element.wysiwygFrame);t.style.visibility="hidden",t.style.display="block";const r="top"===i?-(t.offsetHeight+2):n.offsetHeight+12;t.style.top=s.top+r+l.top+"px";const c=s.left-e.element.wysiwygFrame.scrollLeft+l.left,u=t.offsetWidth,d=n.offsetWidth,h=a.hasClass(t.firstElementChild,"se-arrow")?t.firstElementChild:null;if(o.rtl){const n=u>d?u-d:0,i=n>0?0:d-u;t.style.left=c-n+i+"px",n>0&&h&&(h.style.left=(u-14<10+n?u-14:10+n)+"px");const o=e.element.wysiwygFrame.offsetLeft-t.offsetLeft;o>0&&(t.style.left="0px",h&&(h.style.left=o+"px"))}else{t.style.left=c+"px";const n=e.element.wysiwygFrame.offsetWidth-(t.offsetLeft+u);n<0?(t.style.left=t.offsetLeft+n+"px",h&&(h.style.left=20-n+"px")):h&&(h.style.left="20px")}t.style.visibility=""},execCommand:function(e,t,n){this._wd.execCommand(e,t,"formatBlock"===e?"<"+n+">":n),this.history.push(!0)},nativeFocus:function(){this.__focus(),this._editorRange()},__focus:function(){const t=a.getParentElement(this.getSelectionNode(),"figcaption");t?t.focus():e.element.wysiwyg.focus()},focus:function(){if("none"!==e.element.wysiwygFrame.style.display){if(o.iframe)this.nativeFocus();else try{const t=this.getRange();if(t.startContainer===t.endContainer&&a.isWysiwygDiv(t.startContainer)){const n=t.commonAncestorContainer.children[t.startOffset];if(!a.isFormatElement(n)&&!a.isComponent(n)){const t=a.createElement(o.defaultTag),i=a.createElement("BR");return t.appendChild(i),e.element.wysiwyg.insertBefore(t,n),void this.setRange(i,0,i,0)}}this.setRange(t.startContainer,t.startOffset,t.endContainer,t.endOffset)}catch(e){this.nativeFocus()}d._applyTagEffects(),this._isBalloon&&d._toggleToolbarBalloon()}},focusEdge:function(t){t||(t=e.element.wysiwyg.lastElementChild);const n=this.getFileComponent(t);n?this.selectComponent(n.target,n.pluginName):t?(t=a.getChildElement(t,(function(e){return 0===e.childNodes.length||3===e.nodeType}),!0))?this.setRange(t,t.textContent.length,t,t.textContent.length):this.nativeFocus():this.focus()},blur:function(){o.iframe?e.element.wysiwygFrame.blur():e.element.wysiwyg.blur()},setRange:function(e,t,n,i){if(!e||!n)return;t>e.textContent.length&&(t=e.textContent.length),i>n.textContent.length&&(i=n.textContent.length),a.isFormatElement(e)&&(e=e.childNodes[t]||e.childNodes[t-1]||e,t=t>0?1===e.nodeType?1:e.textContent?e.textContent.length:0:0),a.isFormatElement(n)&&(n=n.childNodes[i]||n.childNodes[i-1]||n,i=i>0?1===n.nodeType?1:n.textContent?n.textContent.length:0:0);const l=this._wd.createRange();try{l.setStart(e,t),l.setEnd(n,i)}catch(e){return console.warn("[SUNEDITOR.core.focus.error] "+e),void this.nativeFocus()}const s=this.getSelection();return s.removeAllRanges&&s.removeAllRanges(),s.addRange(l),this._rangeInfo(l,this.getSelection()),o.iframe&&this.__focus(),l},removeRange:function(){this._variable._range=null,this._variable._selectionNode=null,this.hasFocus&&this.getSelection().removeAllRanges(),this._setKeyEffect([])},getRange:function(){const t=this._variable._range||this._createDefaultRange(),n=this.getSelection();if(t.collapsed===n.isCollapsed||!e.element.wysiwyg.contains(n.focusNode))return t;if(n.rangeCount>0)return this._variable._range=n.getRangeAt(0),this._variable._range;{const e=n.anchorNode,t=n.focusNode,i=n.anchorOffset,o=n.focusOffset,l=a.compareElements(e,t),s=l.ancestor&&(0===l.result?i<=o:l.result>1);return this.setRange(s?e:t,s?i:o,s?t:e,s?o:i)}},getRange_addLine:function(t,n){if(this._selectionVoid(t)){const i=e.element.wysiwyg,l=a.createElement(o.defaultTag);l.innerHTML="<br>",i.insertBefore(l,n&&n!==i?n.nextElementSibling:i.firstElementChild),this.setRange(l.firstElementChild,0,l.firstElementChild,1),t=this._variable._range}return t},getSelection:function(){return this._shadowRoot&&this._shadowRoot.getSelection?this._shadowRoot.getSelection():this._ww.getSelection()},getSelectionNode:function(){if(e.element.wysiwyg.contains(this._variable._selectionNode)||this._editorRange(),!this._variable._selectionNode){const t=a.getChildElement(e.element.wysiwyg.firstChild,(function(e){return 0===e.childNodes.length||3===e.nodeType}),!1);if(t)return this._variable._selectionNode=t,t;this._editorRange()}return this._variable._selectionNode},_editorRange:function(){const e=this.getSelection();if(!e)return null;let t=null;t=e.rangeCount>0?e.getRangeAt(0):this._createDefaultRange(),a.isFormatElement(t.endContainer)&&0===t.endOffset&&(t=this.setRange(t.startContainer,t.startOffset,t.startContainer,t.startContainer.length)),this._rangeInfo(t,e)},_rangeInfo:function(e,t){let n=null;this._variable._range=e,n=e.collapsed?a.isWysiwygDiv(e.commonAncestorContainer)&&e.commonAncestorContainer.children[e.startOffset]||e.commonAncestorContainer:t.extentNode||t.anchorNode,this._variable._selectionNode=n},_createDefaultRange:function(){const t=e.element.wysiwyg;t.focus();const n=this._wd.createRange();let i=t.firstElementChild;return i||(i=a.createElement(o.defaultTag),i.innerHTML="<br>",t.appendChild(i)),n.setStart(i,0),n.setEnd(i,0),n},_selectionVoid:function(e){const t=e.commonAncestorContainer;return a.isWysiwygDiv(e.startContainer)&&a.isWysiwygDiv(e.endContainer)||/FIGURE/i.test(t.nodeName)||this._fileManager.regExp.test(t.nodeName)||a.isMediaComponent(t)},_resetRangeToTextNode:function(){const t=this.getRange();if(this._selectionVoid(t))return!1;let n,i,l,s=t.startContainer,r=t.startOffset,c=t.endContainer,u=t.endOffset;if(a.isFormatElement(s))for(s.childNodes[r]?(s=s.childNodes[r]||s,r=0):(s=s.lastChild||s,r=s.textContent.length);s&&1===s.nodeType&&s.firstChild;)s=s.firstChild||s,r=0;if(a.isFormatElement(c)){for(c=c.childNodes[u]||c.lastChild||c;c&&1===c.nodeType&&c.lastChild;)c=c.lastChild;u=c.textContent.length}if(n=a.isWysiwygDiv(s)?e.element.wysiwyg.firstChild:s,i=r,a.isBreak(n)||1===n.nodeType&&n.childNodes.length>0){const e=a.isBreak(n);if(!e){for(;n&&!a.isBreak(n)&&1===n.nodeType;)n=n.childNodes[i]||n.nextElementSibling||n.nextSibling,i=0;let e=a.getFormatElement(n,null);e===a.getRangeFormatElement(e,null)&&(e=a.createElement(a.getParentElement(n,a.isCell)?"DIV":o.defaultTag),n.parentNode.insertBefore(e,n),e.appendChild(n))}if(a.isBreak(n)){const t=a.createTextNode(a.zeroWidthSpace);n.parentNode.insertBefore(t,n),n=t,e&&s===c&&(c=n,u=1)}}if(s=n,r=i,n=a.isWysiwygDiv(c)?e.element.wysiwyg.lastChild:c,i=u,a.isBreak(n)||1===n.nodeType&&n.childNodes.length>0){const e=a.isBreak(n);if(!e){for(;n&&!a.isBreak(n)&&1===n.nodeType&&(l=n.childNodes,0!==l.length);)n=l[i>0?i-1:i]||!/FIGURE/i.test(l[0].nodeName)?l[0]:n.previousElementSibling||n.previousSibling||s,i=i>0?n.textContent.length:i;let e=a.getFormatElement(n,null);e===a.getRangeFormatElement(e,null)&&(e=a.createElement(a.isCell(e)?"DIV":o.defaultTag),n.parentNode.insertBefore(e,n),e.appendChild(n))}if(a.isBreak(n)){const t=a.createTextNode(a.zeroWidthSpace);n.parentNode.insertBefore(t,n),n=t,i=1,e&&!n.previousSibling&&a.removeItem(c)}}return c=n,u=i,this.setRange(s,r,c,u),!0},getSelectedElements:function(t){if(!this._resetRangeToTextNode())return[];let n=this.getRange();if(a.isWysiwygDiv(n.startContainer)){const t=e.element.wysiwyg.children;if(0===t.length)return[];this.setRange(t[0],0,t[t.length-1],t[t.length-1].textContent.trim().length),n=this.getRange()}const i=n.startContainer,o=n.endContainer,l=n.commonAncestorContainer,s=a.getListChildren(l,(function(e){return t?t(e):a.isFormatElement(e)}));if(a.isWysiwygDiv(l)||a.isRangeFormatElement(l)||s.unshift(a.getFormatElement(l,null)),i===o||1===s.length)return s;let r=a.getFormatElement(i,null),c=a.getFormatElement(o,null),u=null,d=null;const h=function(e){return!a.isTable(e)||/^TABLE$/i.test(e.nodeName)};let p=a.getRangeFormatElement(r,h),f=a.getRangeFormatElement(c,h);a.isTable(p)&&a.isListCell(p.parentNode)&&(p=p.parentNode),a.isTable(f)&&a.isListCell(f.parentNode)&&(f=f.parentNode);const g=p===f;for(let e,t=0,n=s.length;t<n;t++)if(e=s[t],r===e||!g&&e===p)u=t;else if(c===e||!g&&e===f){d=t;break}return null===u&&(u=0),null===d&&(d=s.length-1),s.slice(u,d+1)},getSelectedElementsAndComponents:function(e){const t=this.getRange().commonAncestorContainer,n=a.getParentElement(t,a.isComponent),i=a.isTable(t)?this.getSelectedElements(null):this.getSelectedElements(function(e){const t=this.getParentElement(e,this.isComponent);return this.isFormatElement(e)&&(!t||t===n)||this.isComponent(e)&&!this.getFormatElement(e)}.bind(a));if(e)for(let e=0,t=i.length;e<t;e++)for(let n=e-1;n>=0;n--)if(i[n].contains(i[e])){i.splice(e,1),e--,t--;break}return i},isEdgePoint:function(e,t,n){return"end"!==n&&0===t||(!n||"front"!==n)&&!e.nodeValue&&1===t||(!n||"end"===n)&&!!e.nodeValue&&t===e.nodeValue.length},_isEdgeFormat:function(e,t,n){if(!this.isEdgePoint(e,t,n))return!1;const i=[];for(n="front"===n?"previousSibling":"nextSibling";e&&!a.isFormatElement(e)&&!a.isWysiwygDiv(e);){if(e[n]&&(!a.isBreak(e[n])||e[n][n]))return null;1===e.nodeType&&i.push(e.cloneNode(!1)),e=e.parentNode}return i},showLoading:function(){e.element.loading.style.display="block"},closeLoading:function(){e.element.loading.style.display="none"},appendFormatTag:function(e,t){if(!e||!e.parentNode)return null;const n=a.getFormatElement(this.getSelectionNode(),null);let i=null;if(!a.isFormatElement(e)&&a.isFreeFormatElement(n||e.parentNode))i=a.createElement("BR");else{const e=t?"string"==typeof t?t:t.nodeName:!a.isFormatElement(n)||a.isRangeFormatElement(n)||a.isFreeFormatElement(n)?o.defaultTag:n.nodeName;i=a.createElement(e),i.innerHTML="<br>",(t&&"string"!=typeof t||!t&&a.isFormatElement(n))&&a.copyTagAttributes(i,t||n)}return a.isCell(e)?e.insertBefore(i,e.nextElementSibling):e.parentNode.insertBefore(i,e.nextElementSibling),i},insertComponent:function(e,t,n,i){if(this.isReadOnly||n&&!this.checkCharCount(e,null))return null;const o=this.removeNode();this.getRange_addLine(this.getRange(),o.container);let l=null,s=this.getSelectionNode(),r=a.getFormatElement(s,null);if(a.isListCell(r))this.insertNode(e,s===r?null:o.container.nextSibling,!1),e.nextSibling||e.parentNode.appendChild(a.createElement("BR"));else{if(this.getRange().collapsed&&(3===o.container.nodeType||a.isBreak(o.container))){const e=a.getParentElement(o.container,function(e){return this.isRangeFormatElement(e)}.bind(a));l=a.splitElement(o.container,o.offset,e?a.getElementDepth(e)+1:0),l&&(r=l.previousSibling)}this.insertNode(e,a.isRangeFormatElement(r)?null:r,!1),r&&a.onlyZeroWidthSpace(r)&&a.removeItem(r)}if(!i){this.setRange(e,0,e,0);const t=this.getFileComponent(e);t?this.selectComponent(t.target,t.pluginName):l&&(l=a.getEdgeChildNodes(l,null).sc||l,this.setRange(l,0,l,0))}return t||this.history.push(1),l||e},getFileComponent:function(e){if(!this._fileManager.queryString||!e)return null;let t,n;return(/^FIGURE$/i.test(e.nodeName)||/se-component/.test(e.className))&&(t=e.querySelector(this._fileManager.queryString)),!t&&e.nodeName&&this._fileManager.regExp.test(e.nodeName)&&(t=e),t&&(n=this._fileManager.pluginMap[t.nodeName.toLowerCase()],n)?{target:t,component:a.getParentElement(t,a.isComponent),pluginName:n}:null},selectComponent:function(e,t){if(a.isUneditableComponent(a.getParentElement(e,a.isComponent))||a.isUneditableComponent(e))return!1;this.hasFocus||this.focus();const n=this.plugins[t];n&&r.setTimeout(function(){"function"==typeof n.select&&this.callPlugin(t,n.select.bind(this,e),null),this._setComponentLineBreaker(e)}.bind(this))},_setComponentLineBreaker:function(t){this._lineBreaker.style.display="none";const n=a.getParentElement(t,a.isComponent),i=e.element.lineBreaker_t.style,o=e.element.lineBreaker_b.style,l="block"===this.context.resizing.resizeContainer.style.display?this.context.resizing.resizeContainer:t,s=a.isListCell(n.parentNode);let r,c,u;(s?n.previousSibling:a.isFormatElement(n.previousElementSibling))?i.display="none":(this._variable._lineBreakComp=n,c=e.element.wysiwyg.scrollTop,r=a.getOffset(t,e.element.wysiwygFrame).top+c,u=l.offsetWidth/2/2,i.top=r-c-12+"px",i.left=a.getOffset(l).left+u+"px",i.display="block"),(s?n.nextSibling:a.isFormatElement(n.nextElementSibling))?o.display="none":(r||(this._variable._lineBreakComp=n,c=e.element.wysiwyg.scrollTop,r=a.getOffset(t,e.element.wysiwygFrame).top+c,u=l.offsetWidth/2/2),o.top=r+l.offsetHeight-c-12+"px",o.left=a.getOffset(l).left+l.offsetWidth-u-24+"px",o.display="block")},_checkDuplicateNode:function(e,t){!function e(n){u._dupleCheck(n,t);const i=n.childNodes;for(let t=0,n=i.length;t<n;t++)e(i[t])}(e)},_dupleCheck:function(e,t){if(!a.isTextStyleElement(e))return;const n=(e.style.cssText.match(/[^;]+;/g)||[]).map((function(e){return e.trim()})),i=e.nodeName;if(/^span$/i.test(i)&&0===n.length)return e;let o=!1;return function t(l){if(!a.isWysiwygDiv(l)&&a.isTextStyleElement(l)){if(l.nodeName===i){o=!0;const t=l.style.cssText.match(/[^;]+;/g)||[];for(let e,i=0,o=t.length;i<o;i++)(e=n.indexOf(t[i].trim()))>-1&&n.splice(e,1);for(let t=0,n=l.classList.length;t<n;t++)e.classList.remove(l.classList[t])}t(l.parentElement)}}(t),o&&((e.style.cssText=n.join(" "))||(e.setAttribute("style",""),e.removeAttribute("style")),e.attributes.length||e.setAttribute("data-se-duple","true")),e},insertNode:function(t,n,i){if(this.isReadOnly||i&&!this.checkCharCount(t,null))return null;let l,s,r,c=this.getRange(),u=a.isListCell(c.commonAncestorContainer)?c.commonAncestorContainer:a.getFormatElement(this.getSelectionNode(),null),d=a.isListCell(u)&&(a.isListCell(t)||a.isList(t)),h=null;const p=a.isFreeFormatElement(u),f=!p&&(a.isFormatElement(t)||a.isRangeFormatElement(t))||a.isComponent(t);if(d&&(r=n||a.isList(t)?u.lastChild:u.nextElementSibling,h=a.isList(t)?u:(r||u).parentNode),!n&&(f||a.isComponent(t)||a.isMedia(t))){const e=this.isEdgePoint(c.endContainer,c.endOffset,"end"),t=this.removeNode(),i=t.container,o=i===t.prevContainer&&c.collapsed?null:t.prevContainer;if(d&&o)if(h=3===o.nodeType?o.parentNode:o,h.contains(i)){let e=!0;for(r=i;r.parentNode&&r.parentNode!==h;)r=r.parentNode,e=!1;e&&i===o&&(r=r.nextSibling)}else r=null;else if(d&&a.isListCell(i)&&!u.parentElement)u=a.createElement("LI"),h.appendChild(u),i.appendChild(h),r=null;else if(3===i.nodeType||a.isBreak(i)||d){const o=a.getParentElement(i,function(e){return this.isRangeFormatElement(e)||this.isListCell(e)}.bind(a));if(n=a.splitElement(i,t.offset,o?a.getElementDepth(o)+1:0))if(d){if(u.contains(i)){const t=a.isList(u.lastElementChild);let i=null;e||(i=u.cloneNode(!1),i.appendChild(n.textContent.trim()?n:a.createTextNode(a.zeroWidthSpace))),t&&(i||(i=u.cloneNode(!1),i.appendChild(a.createTextNode(a.zeroWidthSpace))),i.appendChild(u.lastElementChild)),i&&(u.parentNode.insertBefore(i,u.nextElementSibling),r=n=i)}}else n=n.previousSibling}}c=n||f?this.getRange():this.getRange_addLine(this.getRange(),null);const g=c.commonAncestorContainer,m=c.startOffset,v=c.endOffset,y=c.startContainer===g&&a.isFormatElement(g),b=y&&(g.childNodes[m]||g.childNodes[0])||c.startContainer,_=y&&(g.childNodes[v]||g.childNodes[g.childNodes.length-1])||c.endContainer;if(!d)if(n)l=n.parentNode,n=n.nextSibling,s=!0;else if(l=b,3===b.nodeType&&(l=b.parentNode),c.collapsed)if(3===g.nodeType)n=g.textContent.length>v?g.splitText(v):g.nextSibling;else if(a.isBreak(l))n=l,l=l.parentNode;else{let e=l.childNodes[m];const i=e&&3===e.nodeType&&a.onlyZeroWidthSpace(e)&&a.isBreak(e.nextSibling)?e.nextSibling:e;i?!i.nextSibling&&a.isBreak(i)?(l.removeChild(i),n=null):n=a.isBreak(i)&&!a.isBreak(t)?i:i.nextSibling:n=null}else{if(b===_){n=this.isEdgePoint(_,v)?_.nextSibling:_.splitText(v);let e=b;this.isEdgePoint(b,m)||(e=b.splitText(m)),l.removeChild(e),0===l.childNodes.length&&f&&(l.innerHTML="<br>")}else{const e=this.removeNode(),i=e.container,s=e.prevContainer;if(i&&0===i.childNodes.length&&f&&(a.isFormatElement(i)?i.innerHTML="<br>":a.isRangeFormatElement(i)&&(i.innerHTML="<"+o.defaultTag+"><br></"+o.defaultTag+">")),a.isListCell(i)&&3===t.nodeType)l=i,n=null;else if(!f&&s)if(l=3===s.nodeType?s.parentNode:s,l.contains(i)){let e=!0;for(n=i;n.parentNode&&n.parentNode!==l;)n=n.parentNode,e=!1;e&&i===s&&(n=n.nextSibling)}else n=null;else l=(n=f?_:i===s?i.nextSibling:i)&&n.parentNode?n.parentNode:g;for(;n&&!a.isFormatElement(n)&&n.parentNode!==g;)n=n.parentNode}}try{if(!d){if((a.isWysiwygDiv(n)||l===e.element.wysiwyg.parentNode)&&(l=e.element.wysiwyg,n=null),a.isFormatElement(t)||a.isRangeFormatElement(t)||!a.isListCell(l)&&a.isComponent(t)){const e=l;if(a.isList(n))l=n,n=null;else if(a.isListCell(n))l=n.previousElementSibling||n;else if(!s&&!n){const e=this.removeNode(),t=3===e.container.nodeType?a.isListCell(a.getFormatElement(e.container,null))?e.container:a.getFormatElement(e.container,null)||e.container.parentNode:e.container,i=a.isWysiwygDiv(t)||a.isRangeFormatElement(t);l=i?t:t.parentNode,n=i?null:t.nextSibling}0===e.childNodes.length&&l!==e&&a.removeItem(e)}if(!f||p||a.isRangeFormatElement(l)||a.isListCell(l)||a.isWysiwygDiv(l)||(n=l.nextElementSibling,l=l.parentNode),a.isWysiwygDiv(l)&&(3===t.nodeType||a.isBreak(t))){const e=a.createElement(o.defaultTag);e.appendChild(t),t=e}}if(d?h.parentNode?(l=h,n=r):(l=e.element.wysiwyg,n=null):n=l===n?l.lastChild:n,a.isListCell(t)&&!a.isList(l)){if(a.isListCell(l))n=l.nextElementSibling,l=l.parentNode;else{const e=a.createElement("ol");l.insertBefore(e,n),l=e,n=null}d=!0}if(this._checkDuplicateNode(t,l),l.insertBefore(t,n),d)if(a.onlyZeroWidthSpace(u.textContent.trim()))a.removeItem(u),t=t.lastChild;else{const e=a.getArrayItem(u.children,a.isList);e&&(t!==e?(t.appendChild(e),t=e.previousSibling):(l.appendChild(t),t=l),a.onlyZeroWidthSpace(u.textContent.trim())&&a.removeItem(u))}}catch(e){l.appendChild(t),console.warn("[SUNEDITOR.insertNode.warn] "+e)}finally{const e=l.querySelectorAll("[data-se-duple]");if(e.length>0)for(let n,i,o,l,s=0,r=e.length;s<r;s++){for(n=e[s],o=n.childNodes,l=n.parentNode;o[0];)i=o[0],l.insertBefore(i,n);n===t&&(t=i),a.removeItem(n)}if((a.isFormatElement(t)||a.isComponent(t))&&b===_){const e=a.getFormatElement(g,null);e&&1===e.nodeType&&a.isEmptyLine(e)&&a.removeItem(e)}if(p&&(a.isFormatElement(t)||a.isRangeFormatElement(t))&&(t=this._setIntoFreeFormat(t)),!a.isComponent(t)){let e=1;if(3===t.nodeType){const e=t.previousSibling,n=t.nextSibling,i=!e||1===e.nodeType||a.onlyZeroWidthSpace(e)?"":e.textContent,o=!n||1===n.nodeType||a.onlyZeroWidthSpace(n)?"":n.textContent;e&&i.length>0&&(t.textContent=i+t.textContent,a.removeItem(e)),n&&n.length>0&&(t.textContent+=o,a.removeItem(n));const l={container:t,startOffset:i.length,endOffset:t.textContent.length-o.length};return this.setRange(t,l.startOffset,t,l.endOffset),l}if(!a.isBreak(t)&&!a.isListCell(t)&&a.isFormatElement(l)){let n=null;t.previousSibling&&!a.isBreak(t.previousSibling)||(n=a.createTextNode(a.zeroWidthSpace),t.parentNode.insertBefore(n,t)),t.nextSibling&&!a.isBreak(t.nextSibling)||(n=a.createTextNode(a.zeroWidthSpace),t.parentNode.insertBefore(n,t.nextSibling)),a._isIgnoreNodeChange(t)&&(t=t.nextSibling,e=0)}this.setRange(t,e,t,e)}return this.history.push(!0),t}},_setIntoFreeFormat:function(e){const t=e.parentNode;let n,i;for(;a.isFormatElement(e)||a.isRangeFormatElement(e);){for(n=e.childNodes,i=null;n[0];)if(i=n[0],a.isFormatElement(i)||a.isRangeFormatElement(i)){if(this._setIntoFreeFormat(i),!e.parentNode)break;n=e.childNodes}else t.insertBefore(i,e);0===e.childNodes.length&&a.removeItem(e),e=a.createElement("BR"),t.insertBefore(e,i.nextSibling)}return e},removeNode:function(){this._resetRangeToTextNode();const t=this.getRange();let n,i=0,o=t.startContainer,l=t.endContainer,s=t.startOffset,r=t.endOffset;const c=3===t.commonAncestorContainer.nodeType&&t.commonAncestorContainer.parentNode===o.parentNode?o.parentNode:t.commonAncestorContainer;if(c===o&&c===l&&(o=c.children[s],l=c.children[r],s=r=0),o===l&&t.collapsed&&o.textContent&&a.onlyZeroWidthSpace(o.textContent.substr(s)))return{container:o,offset:i,prevContainer:o&&o.parentNode?o:null};let u=null,d=null;const h=a.getListChildNodes(c,null);let p=a.getArrayIndex(h,o),f=a.getArrayIndex(h,l);if(h.length>0&&p>-1&&f>-1){for(let e=p+1,t=o;e>=0;e--)h[e]===t.parentNode&&h[e].firstChild===t&&0===s&&(p=e,t=t.parentNode);for(let e=f-1,t=l;e>p;e--)h[e]===t.parentNode&&1===h[e].nodeType&&(h.splice(e,1),t=t.parentNode,--f)}else{if(0===h.length){if(a.isFormatElement(c)||a.isRangeFormatElement(c)||a.isWysiwygDiv(c)||a.isBreak(c)||a.isMedia(c))return{container:c,offset:0};if(3===c.nodeType)return{container:c,offset:r};h.push(c),o=l=c}else if(o=l=h[0],a.isBreak(o)||a.onlyZeroWidthSpace(o))return{container:a.isMedia(c)?c:o,offset:0};p=f=0}for(let e=p;e<=f;e++){const t=h[e];if(0===t.length||3===t.nodeType&&void 0===t.data)this._nodeRemoveListItem(t);else if(t!==o)if(t!==l)this._nodeRemoveListItem(t);else{if(1===l.nodeType){if(a.isComponent(l))continue;d=a.createTextNode(l.textContent)}else d=a.createTextNode(l.substringData(r,l.length-r));d.length>0?l.data=d.data:this._nodeRemoveListItem(l)}else{if(1===o.nodeType){if(a.isComponent(o))continue;u=a.createTextNode(o.textContent)}else t===l?(u=a.createTextNode(o.substringData(0,s)+l.substringData(r,l.length-r)),i=s):u=a.createTextNode(o.substringData(0,s));if(u.length>0?o.data=u.data:this._nodeRemoveListItem(o),t===l)break}}const g=a.getParentElement(l,"ul"),m=a.getParentElement(o,"li");if(g&&m&&m.contains(g)?(n=g.previousSibling,i=n.textContent.length):n=l&&l.parentNode?l:o&&o.parentNode?o:t.endContainer||t.startContainer,!a.isWysiwygDiv(n)&&0===n.childNodes.length){const t=a.removeItemAllParents(n,null,null);t&&(n=t.sc||t.ec||e.element.wysiwyg)}return this.setRange(n,i,n,i),this.history.push(!0),{container:n,offset:i,prevContainer:o&&o.parentNode?o:null}},_nodeRemoveListItem:function(e){const t=a.getFormatElement(e,null);a.removeItem(e),a.isListCell(t)&&(a.removeItemAllParents(t,null,null),t&&a.isList(t.firstChild)&&t.insertBefore(a.createTextNode(a.zeroWidthSpace),t.firstChild))},applyRangeFormatElement:function(e){this.getRange_addLine(this.getRange(),null);const t=this.getSelectedElementsAndComponents(!1);if(!t||0===t.length)return;e:for(let e,n,i,o,l,s,r=0,c=t.length;r<c;r++)if(e=t[r],a.isListCell(e))if(n=e.lastElementChild,n&&a.isListCell(e.nextElementSibling)&&t.indexOf(e.nextElementSibling)>-1&&(o=n.lastElementChild,t.indexOf(o)>-1)){let e=null;for(;e=o.lastElementChild;)if(a.isList(e)){if(!(t.indexOf(e.lastElementChild)>-1))continue e;o=e.lastElementChild}i=n.firstElementChild,l=t.indexOf(i),s=t.indexOf(o),t.splice(l,s-l+1),c=t.length}else;let n,i,o,l=t[t.length-1];n=a.isRangeFormatElement(l)||a.isFormatElement(l)?l:a.getRangeFormatElement(l,null)||a.getFormatElement(l,null),a.isCell(n)?(i=null,o=n):(i=n.nextSibling,o=n.parentNode);let s=a.getElementDepth(n),r=null;const c=[],u=function(e,t,n){let i=null;if(e!==t&&!a.isTable(t)){if(t&&a.getElementDepth(e)===a.getElementDepth(t))return n;i=a.removeItemAllParents(t,null,e)}return i?i.ec:n};for(let n,l,d,h,p,f,g,m=0,v=t.length;m<v;m++)if(n=t[m],l=n.parentNode,l&&!e.contains(l))if(d=a.getElementDepth(n),a.isList(l)){if(null===r&&(f?(r=f,g=!0,f=null):r=l.cloneNode(!1)),c.push(n),p=t[m+1],m===v-1||p&&p.parentNode!==l){p&&n.contains(p.parentNode)&&(f=p.parentNode.cloneNode(!1));let t,m=l.parentNode;for(;a.isList(m);)t=a.createElement(m.nodeName),t.appendChild(r),r=t,m=m.parentNode;const v=this.detachRangeFormatElement(l,c,null,!0,!0);s>=d?(s=d,o=v.cc,i=u(o,l,v.ec),i&&(o=i.parentNode)):o===v.cc&&(i=v.ec),o!==v.cc&&(h=u(o,v.cc,h),i=void 0!==h?h:v.cc);for(let e=0,t=v.removeArray.length;e<t;e++)r.appendChild(v.removeArray[e]);g||e.appendChild(r),f&&v.removeArray[v.removeArray.length-1].appendChild(f),r=null,g=!1}}else s>=d&&(s=d,o=l,i=n.nextSibling),e.appendChild(n),o!==l&&(h=u(o,l),void 0!==h&&(i=h));if(this.effectNode=null,a.mergeSameTags(e,null,!1),a.mergeNestedTags(e,function(e){return this.isList(e)}.bind(a)),i&&a.getElementDepth(i)>0&&(a.isList(i.parentNode)||a.isList(i.parentNode.parentNode))){const t=a.getParentElement(i,function(e){return this.isRangeFormatElement(e)&&!this.isList(e)}.bind(a)),n=a.splitElement(i,null,t?a.getElementDepth(t)+1:0);n.parentNode.insertBefore(e,n)}else o.insertBefore(e,i),u(e,i);const d=a.getEdgeChildNodes(e.firstElementChild,e.lastElementChild);t.length>1?this.setRange(d.sc,0,d.ec,d.ec.textContent.length):this.setRange(d.ec,d.ec.textContent.length,d.ec,d.ec.textContent.length),this.history.push(!1)},detachRangeFormatElement:function(e,t,n,i,l){const s=this.getRange(),r=s.startOffset,c=s.endOffset;let u=a.getListChildNodes(e,(function(t){return t.parentNode===e})),d=e.parentNode,h=null,p=null,f=e.cloneNode(!1);const g=[],m=a.isList(n);let v=!1,y=!1,b=!1;function _(t,n,i,o){if(a.onlyZeroWidthSpace(n)&&(n.innerHTML=a.zeroWidthSpace),3===n.nodeType)return t.insertBefore(n,i),n;const l=(b?n:o).childNodes;let s=n.cloneNode(!1),r=null,c=null;for(;l[0];)c=l[0],!a._notTextNode(c)||a.isBreak(c)||a.isListCell(s)?s.appendChild(c):(s.childNodes.length>0&&(r||(r=s),t.insertBefore(s,i),s=n.cloneNode(!1)),t.insertBefore(c,i),r||(r=c));if(s.childNodes.length>0){if(a.isListCell(t)&&a.isListCell(s)&&a.isList(i))if(m){for(r=i;i;)s.appendChild(i),i=i.nextSibling;t.parentNode.insertBefore(s,t.nextElementSibling)}else{const t=o.nextElementSibling,n=a.detachNestedList(o,!1);if(e!==n||t!==o.nextElementSibling){const t=s.childNodes;for(;t[0];)o.appendChild(t[0]);e=n,y=!0}}else t.insertBefore(s,i);r||(r=s)}return r}for(let l,s,r,c=0,w=u.length;c<w;c++)if(l=u[c],3!==l.nodeType||!a.isList(f))if(b=!1,i&&0===c&&(h=t&&t.length!==w&&t[0]!==l?f:e.previousSibling),t&&(s=t.indexOf(l)),t&&-1===s)f||(f=e.cloneNode(!1)),f.appendChild(l);else{if(t&&(r=t[s+1]),f&&f.children.length>0&&(d.insertBefore(f,e),f=null),!m&&a.isListCell(l))if(r&&a.getElementDepth(l)!==a.getElementDepth(r)&&(a.isListCell(d)||a.getArrayItem(l.children,a.isList,!1))){const t=l.nextElementSibling,n=a.detachNestedList(l,!1);e===n&&t===l.nextElementSibling||(e=n,y=!0)}else{const t=l;l=a.createElement(i?t.nodeName:a.isList(e.parentNode)||a.isListCell(e.parentNode)?"LI":a.isCell(e.parentNode)?"DIV":o.defaultTag);const n=a.isListCell(l),s=t.childNodes;for(;s[0]&&(!a.isList(s[0])||n);)l.appendChild(s[0]);a.copyFormatAttributes(l,t),b=!0}else l=l.cloneNode(!1);if(!y&&(i?(g.push(l),a.removeItem(u[c])):(n?(v||(d.insertBefore(n,e),v=!0),l=_(n,l,null,u[c])):l=_(d,l,e,u[c]),y||(t?(p=l,h||(h=l)):h||(h=p=l))),y)){y=b=!1,u=a.getListChildNodes(e,(function(t){return t.parentNode===e})),f=e.cloneNode(!1),d=e.parentNode,c=-1,w=u.length;continue}}const w=e.parentNode;let C=e.nextSibling;f&&f.children.length>0&&w.insertBefore(f,C),n?h=n.previousSibling:h||(h=e.previousSibling),C=e.nextSibling!==f?e.nextSibling:f?f.nextSibling:null,0===e.children.length||0===e.textContent.length?a.removeItem(e):a.removeEmptyNode(e,null);let x=null;if(i)x={cc:w,sc:h,ec:C,removeArray:g};else{h||(h=p),p||(p=h);const e=a.getEdgeChildNodes(h,p.parentNode?h:p);x={cc:(e.sc||e.ec).parentNode,sc:e.sc,ec:e.ec}}if(this.effectNode=null,l)return x;!i&&x&&(t?this.setRange(x.sc,r,x.ec,c):this.setRange(x.sc,0,x.sc,0)),this.history.push(!1)},detachList:function(e,t){let n={},i=!1,o=!1,l=null,s=null;const r=function(e){return!this.isComponent(e)}.bind(a);for(let c,u,d,h,p=0,f=e.length;p<f;p++){if(d=p===f-1,u=a.getRangeFormatElement(e[p],r),h=a.isList(u),!c&&h)c=u,n={r:c,f:[a.getParentElement(e[p],"LI")]},0===p&&(i=!0);else if(c&&h)if(c!==u){const r=this.detachRangeFormatElement(n.f[0].parentNode,n.f,null,t,!0);u=e[p].parentNode,i&&(l=r.sc,i=!1),d&&(s=r.ec),h?(c=u,n={r:c,f:[a.getParentElement(e[p],"LI")]},d&&(o=!0)):c=null}else n.f.push(a.getParentElement(e[p],"LI")),d&&(o=!0);if(d&&a.isList(c)){const e=this.detachRangeFormatElement(n.f[0].parentNode,n.f,null,t,!0);(o||1===f)&&(s=e.ec),i&&(l=e.sc||s)}}return{sc:l,ec:s}},nodeChange:function(e,t,n,i){this._resetRangeToTextNode();let o=this.getRange_addLine(this.getRange(),null);t=!!(t&&t.length>0)&&t,n=!!(n&&n.length>0)&&n;const l=!e,s=l&&!n&&!t;let c=o.startContainer,u=o.startOffset,d=o.endContainer,h=o.endOffset;if(s&&o.collapsed&&a.isFormatElement(c.parentNode)||c===d&&1===c.nodeType&&a.isNonEditable(c)){const e=c.parentNode;if(!a.isListCell(e)||!a.getValues(e.style).some(function(e){return this._listKebab.indexOf(e)>-1}.bind(this)))return}if(o.collapsed&&!s&&1===c.nodeType&&!a.isBreak(c)&&!a.isComponent(c)){let e=null;const t=c.childNodes[u];t&&(e=t.nextSibling?a.isBreak(t)?t:t.nextSibling:null);const n=a.createTextNode(a.zeroWidthSpace);c.insertBefore(n,e),this.setRange(n,1,n,1),o=this.getRange(),c=o.startContainer,u=o.startOffset,d=o.endContainer,h=o.endOffset}a.isFormatElement(c)&&(c=c.childNodes[u]||c.firstChild,u=0),a.isFormatElement(d)&&(d=d.childNodes[h]||d.lastChild,h=d.textContent.length),l&&(e=a.createElement("DIV"));const p=r.RegExp,f=e.nodeName;if(!s&&c===d&&!n&&e){let t=c,n=0;const i=[],o=e.style;for(let e=0,t=o.length;e<t;e++)i.push(o[e]);const s=e.classList;for(let e=0,t=s.length;e<t;e++)i.push("."+s[e]);if(i.length>0){for(;!a.isFormatElement(t)&&!a.isWysiwygDiv(t);){for(let o=0;o<i.length;o++)if(1===t.nodeType){const s=i[o],r=!!/^\./.test(s)&&new p("\\s*"+s.replace(/^\./,"")+"(\\s+|$)","ig"),a=l?!!t.style[s]:!!t.style[s]&&!!e.style[s]&&t.style[s]===e.style[s],c=!1!==r&&(l?!!t.className.match(r):!!t.className.match(r)&&!!e.className.match(r));(a||c)&&n++}t=t.parentNode}if(n>=i.length)return}}let g,m={},v={},y="",b="",_="";if(t){for(let e,n=0,i=t.length;n<i;n++)e=t[n],/^\./.test(e)?b+=(b?"|":"\\s*(?:")+e.replace(/^\./,""):y+=(y?"|":"(?:;|^|\\s)(?:")+e;y&&(y+=")\\s*:[^;]*\\s*(?:;|$)",y=new p(y,"ig")),b&&(b+=")(?=\\s+|$)",b=new p(b,"ig"))}if(n){_="^(?:"+n[0];for(let e=1;e<n.length;e++)_+="|"+n[e];_+=")$",_=new p(_,"i")}const w=r.Boolean,C={v:!1},x=function(e){const t=e.cloneNode(!1);if(3===t.nodeType||a.isBreak(t))return t;if(s)return null;const n=!_&&l||_&&_.test(t.nodeName);if(n&&!i)return C.v=!0,null;const o=t.style.cssText;let r="";y&&o.length>0&&(r=o.replace(y,"").trim(),r!==o&&(C.v=!0));const c=t.className;let u="";return b&&c.length>0&&(u=c.replace(b,"").trim(),u!==c&&(C.v=!0)),(!l||!b&&c||!y&&o||r||u||!n)&&(r||u||t.nodeName!==f||w(y)!==w(o)||w(b)!==w(c))?(y&&o.length>0&&(t.style.cssText=r),t.style.cssText||t.removeAttribute("style"),b&&c.length>0&&(t.className=u.trim()),t.className.trim()||t.removeAttribute("class"),t.style.cssText||t.className||t.nodeName!==f&&!n?t:(C.v=!0,null)):(C.v=!0,null)},E=this.getSelectedElements(null);o=this.getRange(),c=o.startContainer,u=o.startOffset,d=o.endContainer,h=o.endOffset,a.getFormatElement(c,null)||(c=a.getChildElement(E[0],(function(e){return 3===e.nodeType}),!1),u=0),a.getFormatElement(d,null)||(d=a.getChildElement(E[E.length-1],(function(e){return 3===e.nodeType}),!1),h=d.textContent.length);const S=a.getFormatElement(c,null)===a.getFormatElement(d,null),T=E.length-(S?0:1);g=e.cloneNode(!1);const N=s||l&&function(e){for(let t=0,n=e.length;t<n;t++)if(a._isMaintainedNode(e[t])||a._isSizeNode(e[t]))return!0;return!1}(n),L=l||a._isSizeNode(g),k=this._util_getMaintainedNode.bind(a,N,L),A=this._util_isMaintainedNode.bind(a,N,L);if(S){this._resetCommonListCell(E[0],t)&&(o=this.setRange(c,u,d,h));const e=this._nodeChange_oneLine(E[0],g,x,c,u,d,h,s,l,o.collapsed,C,k,A);m.container=e.startContainer,m.offset=e.startOffset,v.container=e.endContainer,v.offset=e.endOffset,m.container===v.container&&a.onlyZeroWidthSpace(m.container)&&(m.offset=v.offset=1),this._setCommonListStyle(e.ancestor,null)}else{let n=!1;T>0&&this._resetCommonListCell(E[T],t)&&(n=!0),this._resetCommonListCell(E[0],t)&&(n=!0),n&&this.setRange(c,u,d,h),T>0&&(g=e.cloneNode(!1),v=this._nodeChange_endLine(E[T],g,x,d,h,s,l,C,k,A));for(let n,i=T-1;i>0;i--)this._resetCommonListCell(E[i],t),g=e.cloneNode(!1),n=this._nodeChange_middleLine(E[i],g,x,s,l,C,v.container),n.endContainer&&n.ancestor.contains(n.endContainer)&&(v.ancestor=null,v.container=n.endContainer),this._setCommonListStyle(n.ancestor,null);g=e.cloneNode(!1),m=this._nodeChange_startLine(E[0],g,x,c,u,s,l,C,k,A,v.container),m.endContainer&&(v.ancestor=null,v.container=m.endContainer),T<=0?v=m:v.container||(v.ancestor=null,v.container=m.container,v.offset=m.container.textContent.length),this._setCommonListStyle(m.ancestor,null),this._setCommonListStyle(v.ancestor||a.getFormatElement(v.container),null)}this.controllersOff(),this.setRange(m.container,m.offset,v.container,v.offset),this.history.push(!1)},_resetCommonListCell:function(e,t){if(!a.isListCell(e))return;t||(t=this._listKebab);const n=a.getArrayItem(e.childNodes,(function(e){return!a.isBreak(e)}),!0),i=e.style,l=[],s=[],r=a.getValues(i);for(let e=0,n=this._listKebab.length;e<n;e++)r.indexOf(this._listKebab[e])>-1&&t.indexOf(this._listKebab[e])>-1&&(l.push(this._listCamel[e]),s.push(this._listKebab[e]));if(!l.length)return;const c=a.createElement("SPAN");for(let e=0,t=l.length;e<t;e++)c.style[l[e]]=i[s[e]],i.removeProperty(s[e]);let u=c.cloneNode(!1),d=null,h=!1;for(let t,i,s=0,r=n.length;s<r;s++)t=n[s],o._textTagsMap[t.nodeName.toLowerCase()]||(i=a.getValues(t.style),0===i.length||l.some((function(e){return-1===i.indexOf(e)}))&&i.some((function(e){l.indexOf(e)}))?(d=t.nextSibling,u.appendChild(t)):u.childNodes.length>0&&(e.insertBefore(u,d),u=c.cloneNode(!1),d=null,h=!0));return u.childNodes.length>0&&(e.insertBefore(u,d),h=!0),i.length||e.removeAttribute("style"),h},_setCommonListStyle:function(e,t){if(!a.isListCell(e))return;const n=a.getArrayItem((t||e).childNodes,(function(e){return!a.isBreak(e)}),!0);if(!(t=n[0])||n.length>1||1!==t.nodeType)return;const i=t.style,l=e.style,s=t.nodeName.toLowerCase();let r=!1;o._textTagsMap[s]===o._defaultCommand.bold.toLowerCase()&&(l.fontWeight="bold"),o._textTagsMap[s]===o._defaultCommand.italic.toLowerCase()&&(l.fontStyle="italic");const c=a.getValues(i);if(c.length>0)for(let e=0,t=this._listCamel.length;e<t;e++)c.indexOf(this._listKebab[e])>-1&&(l[this._listCamel[e]]=i[this._listCamel[e]],i.removeProperty(this._listKebab[e]),r=!0);if(this._setCommonListStyle(e,t),r&&!i.length){const e=t.childNodes,n=t.parentNode,i=t.nextSibling;for(;e.length>0;)n.insertBefore(e[0],i);a.removeItem(t)}},_stripRemoveNode:function(e){const t=e.parentNode;if(!e||3===e.nodeType||!t)return;const n=e.childNodes;for(;n[0];)t.insertBefore(n[0],e);t.removeChild(e)},_util_getMaintainedNode:function(e,t,n){return!n||e?null:this.getParentElement(n,this._isMaintainedNode.bind(this))||(t?null:this.getParentElement(n,this._isSizeNode.bind(this)))},_util_isMaintainedNode:function(e,t,n){if(!n||e||1!==n.nodeType)return!1;const i=this._isMaintainedNode(n);return this.getParentElement(n,this._isMaintainedNode.bind(this))?i:i||!t&&this._isSizeNode(n)},_nodeChange_oneLine:function(e,t,n,i,o,l,s,c,u,d,h,p,f){let g=i.parentNode;for(;!(g.nextSibling||g.previousSibling||a.isFormatElement(g.parentNode)||a.isWysiwygDiv(g.parentNode))&&g.nodeName!==t.nodeName;)g=g.parentNode;if(!u&&g===l.parentNode&&g.nodeName===t.nodeName&&a.onlyZeroWidthSpace(i.textContent.slice(0,o))&&a.onlyZeroWidthSpace(l.textContent.slice(s))){const n=g.childNodes;let r=!0;for(let e,t,o,s,c=0,u=n.length;c<u;c++)if(e=n[c],s=!a.onlyZeroWidthSpace(e),e!==i)if(e!==l){if(!t&&s||t&&o&&s){r=!1;break}}else o=!0;else t=!0;if(r)return a.copyTagAttributes(g,t),{ancestor:e,startContainer:i,startOffset:o,endContainer:l,endOffset:s}}h.v=!1;const m=e,v=[t],y=e.cloneNode(!1),b=i===l;let _,w,C,x,E,S=i,T=o,N=l,L=s,k=!1,A=!1;const B=r.RegExp;function M(e){const t=new B("(?:;|^|\\s)(?:"+x+"null)\\s*:[^;]*\\s*(?:;|$)","ig");let n="";return t&&e.style.cssText.length>0&&(n=t.test(e.style.cssText)),!n}if(function e(i,o){const l=i.childNodes;for(let i,s=0,r=l.length;s<r;s++){let r=l[s];if(!r)continue;let u,h=o;if(!k&&r===S){let e=y;E=p(r);const l=a.createTextNode(1===S.nodeType?"":S.substringData(0,T)),s=a.createTextNode(1===S.nodeType?"":S.substringData(T,b&&L>=T?L-T:S.data.length-T));if(E){const t=p(o);if(t&&t.parentNode!==e){let n=t,i=null;for(;n.parentNode!==e;){for(o=i=n.parentNode.cloneNode(!1);n.childNodes[0];)i.appendChild(n.childNodes[0]);n.appendChild(i),n=n.parentNode}n.parentNode.appendChild(t)}E=E.cloneNode(!1)}a.onlyZeroWidthSpace(l)||o.appendChild(l);const c=p(o);for(c&&(E=c),E&&(e=E),w=r,_=[],x="";w!==e&&w!==m&&null!==w;)i=f(w)?null:n(w),i&&1===w.nodeType&&M(w)&&(_.push(i),x+=w.style.cssText.substr(0,w.style.cssText.indexOf(":"))+"|"),w=w.parentNode;const u=_.pop()||s;for(C=w=u;_.length>0;)w=_.pop(),C.appendChild(w),C=w;if(t.appendChild(u),e.appendChild(t),E&&!p(N)&&(t=t.cloneNode(!1),y.appendChild(t),v.push(t)),S=s,T=0,k=!0,w!==s&&w.appendChild(S),!b)continue}if(A||r!==N){if(k){if(1===r.nodeType&&!a.isBreak(r)){a._isIgnoreNodeChange(r)?(y.appendChild(r.cloneNode(!0)),d||(t=t.cloneNode(!1),y.appendChild(t),v.push(t))):e(r,r);continue}w=r,_=[],x="";const l=[];for(;null!==w.parentNode&&w!==m&&w!==t;)i=A?w.cloneNode(!1):n(w),1===w.nodeType&&!a.isBreak(r)&&i&&M(w)&&(f(w)?E||l.push(i):_.push(i),x+=w.style.cssText.substr(0,w.style.cssText.indexOf(":"))+"|"),w=w.parentNode;_=_.concat(l);const s=_.pop()||r;for(C=w=s;_.length>0;)w=_.pop(),C.appendChild(w),C=w;if(!f(t.parentNode)||f(s)||a.onlyZeroWidthSpace(t)||(t=t.cloneNode(!1),y.appendChild(t),v.push(t)),A||E||!f(s))s===r?o=A?y:t:A?(y.appendChild(s),o=w):(t.appendChild(s),o=w);else{t=t.cloneNode(!1);const e=s.childNodes;for(let n=0,i=e.length;n<i;n++)t.appendChild(e[n]);s.appendChild(t),y.appendChild(s),v.push(t),o=t.children.length>0?w:t}if(E&&3===r.nodeType)if(p(r)){const e=a.getParentElement(o,function(e){return this._isMaintainedNode(e.parentNode)||e.parentNode===y}.bind(a));E.appendChild(e),t=e.cloneNode(!1),v.push(t),y.appendChild(t)}else E=null}u=r.cloneNode(!1),o.appendChild(u),1!==r.nodeType||a.isBreak(r)||(h=u),e(r,h)}else{E=p(r);const e=a.createTextNode(1===N.nodeType?"":N.substringData(L,N.length-L)),o=a.createTextNode(b||1===N.nodeType?"":N.substringData(0,L));if(E?E=E.cloneNode(!1):f(t.parentNode)&&!E&&(t=t.cloneNode(!1),y.appendChild(t),v.push(t)),!a.onlyZeroWidthSpace(e)){w=r,x="",_=[];const t=[];for(;w!==y&&w!==m&&null!==w;)1===w.nodeType&&M(w)&&(f(w)?t.push(w.cloneNode(!1)):_.push(w.cloneNode(!1)),x+=w.style.cssText.substr(0,w.style.cssText.indexOf(":"))+"|"),w=w.parentNode;for(_=_.concat(t),u=C=w=_.pop()||e;_.length>0;)w=_.pop(),C.appendChild(w),C=w;y.appendChild(u),w.textContent=e.data}if(E&&u){const e=p(u);e&&(E=e)}for(w=r,_=[],x="";w!==y&&w!==m&&null!==w;)i=f(w)?null:n(w),i&&1===w.nodeType&&M(w)&&(_.push(i),x+=w.style.cssText.substr(0,w.style.cssText.indexOf(":"))+"|"),w=w.parentNode;const l=_.pop()||o;for(C=w=l;_.length>0;)w=_.pop(),C.appendChild(w),C=w;E?((t=t.cloneNode(!1)).appendChild(l),E.insertBefore(t,E.firstChild),y.appendChild(E),v.push(t),E=null):t.appendChild(l),N=o,L=o.data.length,A=!0,!c&&d&&(t=o,o.textContent=a.zeroWidthSpace),w!==o&&w.appendChild(N)}}}(e,y),u&&!c&&!h.v)return{ancestor:e,startContainer:i,startOffset:o,endContainer:l,endOffset:s};if(c=c&&u)for(let e=0;e<v.length;e++){let t,n,i,o=v[e];if(d)t=a.createTextNode(a.zeroWidthSpace),y.replaceChild(t,o);else{const e=o.childNodes;for(n=e[0];e[0];)i=e[0],y.insertBefore(i,o);a.removeItem(o)}0===e&&(d?S=N=t:(S=n,N=i))}else{if(u)for(let e=0;e<v.length;e++)this._stripRemoveNode(v[e]);d&&(S=N=t)}a.removeEmptyNode(y,t),d&&(T=S.textContent.length,L=N.textContent.length);const I=c||0===N.textContent.length;a.isBreak(N)||0!==N.textContent.length||(a.removeItem(N),N=S),L=I?N.textContent.length:L;const z={s:0,e:0},O=a.getNodePath(S,y,z),R=!N.parentNode;R&&(N=S);const H={s:0,e:0},D=a.getNodePath(N,y,R||I?null:H);T+=z.s,L=d?T:R?S.textContent.length:I?L+z.s:L+H.s;const F=a.mergeSameTags(y,[O,D],!0);return e.parentNode.replaceChild(y,e),S=a.getNodeFromPath(O,y),N=a.getNodeFromPath(D,y),{ancestor:y,startContainer:S,startOffset:T+F[0],endContainer:N,endOffset:L+F[1]}},_nodeChange_startLine:function(e,t,n,i,o,l,s,r,c,u,d){let h=i.parentNode;for(;!(h.nextSibling||h.previousSibling||a.isFormatElement(h.parentNode)||a.isWysiwygDiv(h.parentNode))&&h.nodeName!==t.nodeName;)h=h.parentNode;if(!s&&h.nodeName===t.nodeName&&!a.isFormatElement(h)&&!h.nextSibling&&a.onlyZeroWidthSpace(i.textContent.slice(0,o))){let n=!0,l=i.previousSibling;for(;l;){if(!a.onlyZeroWidthSpace(l)){n=!1;break}l=l.previousSibling}if(n)return a.copyTagAttributes(h,t),{ancestor:e,container:i,offset:o}}r.v=!1;const p=e,f=[t],g=e.cloneNode(!1);let m,v,y,b,_=i,w=o,C=!1;if(function e(i,o){const l=i.childNodes;for(let i,s,r=0,h=l.length;r<h;r++){const h=l[r];if(!h)continue;let x=o;if(C&&!a.isBreak(h)){if(1===h.nodeType){if(a._isIgnoreNodeChange(h)){if(t=t.cloneNode(!1),s=h.cloneNode(!0),g.appendChild(s),g.appendChild(t),f.push(t),d&&h.contains(d)){const e=a.getNodePath(d,h);d=a.getNodeFromPath(e,s)}}else e(h,h);continue}v=h,m=[];const l=[];for(;null!==v.parentNode&&v!==p&&v!==t;)i=n(v),1===v.nodeType&&i&&(u(v)?b||l.push(i):m.push(i)),v=v.parentNode;m=m.concat(l);const r=m.length>0,_=m.pop()||h;for(y=v=_;m.length>0;)v=m.pop(),y.appendChild(v),y=v;if(u(t.parentNode)&&!u(_)&&(t=t.cloneNode(!1),g.appendChild(t),f.push(t)),!b&&u(_)){t=t.cloneNode(!1);const e=_.childNodes;for(let n=0,i=e.length;n<i;n++)t.appendChild(e[n]);_.appendChild(t),g.appendChild(_),o=u(v)?t:v,f.push(t)}else r?(t.appendChild(_),o=v):o=t;if(b&&3===h.nodeType)if(c(h)){const e=a.getParentElement(o,function(e){return this._isMaintainedNode(e.parentNode)||e.parentNode===g}.bind(a));b.appendChild(e),t=e.cloneNode(!1),f.push(t),g.appendChild(t)}else b=null}if(C||h!==_)i=C?n(h):h.cloneNode(!1),i&&(o.appendChild(i),1!==h.nodeType||a.isBreak(h)||(x=i)),e(h,x);else{let e=g;b=c(h);const l=a.createTextNode(1===_.nodeType?"":_.substringData(0,w)),s=a.createTextNode(1===_.nodeType?"":_.substringData(w,_.length-w));if(b){const t=c(o);if(t&&t.parentNode!==e){let n=t,i=null;for(;n.parentNode!==e;){for(o=i=n.parentNode.cloneNode(!1);n.childNodes[0];)i.appendChild(n.childNodes[0]);n.appendChild(i),n=n.parentNode}n.parentNode.appendChild(t)}b=b.cloneNode(!1)}a.onlyZeroWidthSpace(l)||o.appendChild(l);const r=c(o);for(r&&(b=r),b&&(e=b),v=o,m=[];v!==e&&null!==v;)i=n(v),1===v.nodeType&&i&&m.push(i),v=v.parentNode;const u=m.pop()||o;for(y=v=u;m.length>0;)v=m.pop(),y.appendChild(v),y=v;u!==o?(t.appendChild(u),o=v):o=t,a.isBreak(h)&&t.appendChild(h.cloneNode(!1)),e.appendChild(t),_=s,w=0,C=!0,o.appendChild(_)}}}(e,g),s&&!l&&!r.v)return{ancestor:e,container:i,offset:o,endContainer:d};if(l=l&&s)for(let e=0;e<f.length;e++){let t=f[e];const n=t.childNodes,i=n[0];for(;n[0];)g.insertBefore(n[0],t);a.removeItem(t),0===e&&(_=i)}else if(s){t=t.firstChild;for(let e=0;e<f.length;e++)this._stripRemoveNode(f[e])}if(l||0!==g.childNodes.length){a.removeEmptyNode(g,t),a.onlyZeroWidthSpace(g.textContent)&&(_=g.firstChild,w=0);const n={s:0,e:0},i=a.getNodePath(_,g,n);w+=n.s;const o=a.mergeSameTags(g,[i],!0);e.parentNode.replaceChild(g,e),_=a.getNodeFromPath(i,g),w+=o[0]}else e.childNodes?_=e.childNodes[0]:(_=a.createTextNode(a.zeroWidthSpace),e.appendChild(_));return{ancestor:g,container:_,offset:w,endContainer:d}},_nodeChange_middleLine:function(e,t,n,i,o,l,s){if(!o){let n=null;s&&e.contains(s)&&(n=a.getNodePath(s,e));const i=e.cloneNode(!0),o=t.nodeName,l=t.style.cssText,r=t.className;let c,u=i.childNodes,d=0,h=u.length;for(;d<h&&(c=u[d],3!==c.nodeType);d++){if(c.nodeName!==o){if(!a.isBreak(c)&&a._isIgnoreNodeChange(c))continue;if(1===h){u=c.childNodes,h=u.length,d=-1;continue}break}c.style.cssText+=l,a.addClass(c,r)}if(h>0&&d===h)return e.innerHTML=i.innerHTML,{ancestor:e,endContainer:n?a.getNodeFromPath(n,e):null}}l.v=!1;const r=e.cloneNode(!1),c=[t];let u=!0;if(function e(i,o){const l=i.childNodes;for(let i,d,h=0,p=l.length;h<p;h++){let p=l[h];if(!p)continue;let f=o;if(a.isBreak(p)||!a._isIgnoreNodeChange(p))i=n(p),i&&(u=!1,o.appendChild(i),1===p.nodeType&&(f=i)),a.isBreak(p)||e(p,f);else if(t.childNodes.length>0&&(r.appendChild(t),t=t.cloneNode(!1)),d=p.cloneNode(!0),r.appendChild(d),r.appendChild(t),c.push(t),o=t,s&&p.contains(s)){const e=a.getNodePath(s,p);s=a.getNodeFromPath(e,d)}}}(e,t),u||o&&!i&&!l.v)return{ancestor:e,endContainer:s};if(r.appendChild(t),i&&o)for(let e=0;e<c.length;e++){let t=c[e];const n=t.childNodes;for(;n[0];)r.insertBefore(n[0],t);a.removeItem(t)}else if(o){t=t.firstChild;for(let e=0;e<c.length;e++)this._stripRemoveNode(c[e])}return a.removeEmptyNode(r,t),a.mergeSameTags(r,null,!0),e.parentNode.replaceChild(r,e),{ancestor:r,endContainer:s}},_nodeChange_endLine:function(e,t,n,i,o,l,s,r,c,u){let d=i.parentNode;for(;!(d.nextSibling||d.previousSibling||a.isFormatElement(d.parentNode)||a.isWysiwygDiv(d.parentNode))&&d.nodeName!==t.nodeName;)d=d.parentNode;if(!s&&d.nodeName===t.nodeName&&!a.isFormatElement(d)&&!d.previousSibling&&a.onlyZeroWidthSpace(i.textContent.slice(o))){let n=!0,l=i.nextSibling;for(;l;){if(!a.onlyZeroWidthSpace(l)){n=!1;break}l=l.nextSibling}if(n)return a.copyTagAttributes(d,t),{ancestor:e,container:i,offset:o}}r.v=!1;const h=e,p=[t],f=e.cloneNode(!1);let g,m,v,y,b=i,_=o,w=!1;if(function e(i,o){const l=i.childNodes;for(let i,s=l.length-1;0<=s;s--){const r=l[s];if(!r)continue;let d=o;if(w&&!a.isBreak(r)){if(1===r.nodeType){if(a._isIgnoreNodeChange(r)){t=t.cloneNode(!1);const e=r.cloneNode(!0);f.insertBefore(e,o),f.insertBefore(t,e),p.push(t)}else e(r,r);continue}m=r,g=[];const l=[];for(;null!==m.parentNode&&m!==h&&m!==t;)i=n(m),i&&1===m.nodeType&&(u(m)?y||l.push(i):g.push(i)),m=m.parentNode;g=g.concat(l);const s=g.length>0,d=g.pop()||r;for(v=m=d;g.length>0;)m=g.pop(),v.appendChild(m),v=m;if(u(t.parentNode)&&!u(d)&&(t=t.cloneNode(!1),f.insertBefore(t,f.firstChild),p.push(t)),!y&&u(d)){t=t.cloneNode(!1);const e=d.childNodes;for(let n=0,i=e.length;n<i;n++)t.appendChild(e[n]);d.appendChild(t),f.insertBefore(d,f.firstChild),p.push(t),o=t.children.length>0?m:t}else s?(t.insertBefore(d,t.firstChild),o=m):o=t;if(y&&3===r.nodeType)if(c(r)){const e=a.getParentElement(o,function(e){return this._isMaintainedNode(e.parentNode)||e.parentNode===f}.bind(a));y.appendChild(e),t=e.cloneNode(!1),p.push(t),f.insertBefore(t,f.firstChild)}else y=null}if(w||r!==b)i=w?n(r):r.cloneNode(!1),i&&(o.insertBefore(i,o.firstChild),1!==r.nodeType||a.isBreak(r)||(d=i)),e(r,d);else{y=c(r);const e=a.createTextNode(1===b.nodeType?"":b.substringData(_,b.length-_)),l=a.createTextNode(1===b.nodeType?"":b.substringData(0,_));if(y){y=y.cloneNode(!1);const e=c(o);if(e&&e.parentNode!==f){let t=e,n=null;for(;t.parentNode!==f;){for(o=n=t.parentNode.cloneNode(!1);t.childNodes[0];)n.appendChild(t.childNodes[0]);t.appendChild(n),t=t.parentNode}t.parentNode.insertBefore(e,t.parentNode.firstChild)}y=y.cloneNode(!1)}else u(t.parentNode)&&!y&&(t=t.cloneNode(!1),f.appendChild(t),p.push(t));for(a.onlyZeroWidthSpace(e)||o.insertBefore(e,o.firstChild),m=o,g=[];m!==f&&null!==m;)i=u(m)?null:n(m),i&&1===m.nodeType&&g.push(i),m=m.parentNode;const s=g.pop()||o;for(v=m=s;g.length>0;)m=g.pop(),v.appendChild(m),v=m;s!==o?(t.insertBefore(s,t.firstChild),o=m):o=t,a.isBreak(r)&&t.appendChild(r.cloneNode(!1)),y?(y.insertBefore(t,y.firstChild),f.insertBefore(y,f.firstChild),y=null):f.insertBefore(t,f.firstChild),b=l,_=l.data.length,w=!0,o.insertBefore(b,o.firstChild)}}}(e,f),s&&!l&&!r.v)return{ancestor:e,container:i,offset:o};if(l=l&&s)for(let e=0;e<p.length;e++){let t=p[e];const n=t.childNodes;let i=null;for(;n[0];)i=n[0],f.insertBefore(i,t);a.removeItem(t),e===p.length-1&&(b=i,_=i.textContent.length)}else if(s){t=t.firstChild;for(let e=0;e<p.length;e++)this._stripRemoveNode(p[e])}if(l||0!==f.childNodes.length){if(!s&&0===t.textContent.length)return a.removeEmptyNode(f,null),{ancestor:null,container:null,offset:0};a.removeEmptyNode(f,t),a.onlyZeroWidthSpace(f.textContent)?(b=f.firstChild,_=b.textContent.length):a.onlyZeroWidthSpace(b)&&(b=t,_=1);const n={s:0,e:0},i=a.getNodePath(b,f,n);_+=n.s;const o=a.mergeSameTags(f,[i],!0);e.parentNode.replaceChild(f,e),b=a.getNodeFromPath(i,f),_+=o[0]}else e.childNodes?b=e.childNodes[0]:(b=a.createTextNode(a.zeroWidthSpace),e.appendChild(b));return{ancestor:f,container:b,offset:1===b.nodeType&&1===_?b.childNodes.length:_}},actionCall:function(t,n,i){if(n){if(/more/i.test(n)){if(i!==this._moreLayerActiveButton){const n=e.element.toolbar.querySelector("."+t);n&&(this._moreLayerActiveButton&&this.moreLayerOff(),this._moreLayerActiveButton=i,n.style.display="block",d._showToolbarBalloon(),d._showToolbarInline()),a.addClass(i,"on")}else{e.element.toolbar.querySelector("."+this._moreLayerActiveButton.getAttribute("data-command"))&&(this.moreLayerOff(),d._showToolbarBalloon(),d._showToolbarInline())}return}if(/container/.test(n)&&(null===this._menuTray[t]||i!==this.containerActiveButton))return void this.callPlugin(t,this.containerOn.bind(this,i),i);if(this.isReadOnly&&a.arrayIncludes(this.resizingDisabledButtons,i))return;if(/submenu/.test(n)&&(null===this._menuTray[t]||i!==this.submenuActiveButton))return void this.callPlugin(t,this.submenuOn.bind(this,i),i);if(/dialog/.test(n))return void this.callPlugin(t,this.plugins[t].open.bind(this),i);/command/.test(n)?this.callPlugin(t,this.plugins[t].action.bind(this),i):/fileBrowser/.test(n)&&this.callPlugin(t,this.plugins[t].open.bind(this,null),i)}else t&&this.commandHandler(i,t);/submenu/.test(n)?this.submenuOff():/command/.test(n)||(this.submenuOff(),this.containerOff())},commandHandler:function(t,n){if(!u.isReadOnly||/copy|cut|selectAll|codeView|fullScreen|print|preview|showBlocks/.test(n))switch(n){case"copy":case"cut":this.execCommand(n);break;case"paste":break;case"selectAll":this.containerOff();const i=e.element.wysiwyg;let l=a.getChildElement(i.firstChild,(function(e){return 0===e.childNodes.length||3===e.nodeType}),!1)||i.firstChild,s=a.getChildElement(i.lastChild,(function(e){return 0===e.childNodes.length||3===e.nodeType}),!0)||i.lastChild;if(!l||!s)return;if(a.isMedia(l)){const e=this.getFileComponent(l),t=a.createElement("BR"),n=a.createElement(o.defaultTag);n.appendChild(t),l=e?e.component:l,l.parentNode.insertBefore(n,l),l=t}if(a.isMedia(s)){const e=a.createElement("BR"),t=a.createElement(o.defaultTag);t.appendChild(e),i.appendChild(t),s=e}d._showToolbarBalloon(this.setRange(l,0,s,s.textContent.length));break;case"codeView":this.toggleCodeView();break;case"fullScreen":this.toggleFullScreen(t);break;case"indent":case"outdent":this.indent(n);break;case"undo":this.history.undo();break;case"redo":this.history.redo();break;case"removeFormat":this.removeFormat(),this.focus();break;case"print":this.print();break;case"preview":this.preview();break;case"showBlocks":this.toggleDisplayBlocks();break;case"dir":this.setDir(o.rtl?"ltr":"rtl");break;case"dir_ltr":this.setDir("ltr");break;case"dir_rtl":this.setDir("rtl");break;case"save":if("function"==typeof o.callBackSave)o.callBackSave(this.getContents(!1),this._variable.isChanged);else{if(!this._variable.isChanged||"function"!=typeof h.save)throw Error("[SUNEDITOR.core.commandHandler.fail] Please register call back function in creation option. (callBackSave : Function)");h.save()}this._variable.isChanged=!1,e.tool.save&&e.tool.save.setAttribute("disabled",!0);break;default:n=o._defaultCommand[n.toLowerCase()]||n,this.commandMap[n]||(this.commandMap[n]=t);const r=this._variable.currentNodesMap,c=r.indexOf(n)>-1?null:a.createElement(n);let u=n;/^SUB$/i.test(n)&&r.indexOf("SUP")>-1?u="SUP":/^SUP$/i.test(n)&&r.indexOf("SUB")>-1&&(u="SUB"),this.nodeChange(c,this._commandMapStyles[n]||null,[u],!1),this.focus()}},removeFormat:function(){this.nodeChange(null,null,null,null)},indent:function(e){const t=this.getRange(),n=this.getSelectedElements(null),i=[],l="indent"!==e,s=o.rtl?"marginRight":"marginLeft";let r=t.startContainer,c=t.endContainer,u=t.startOffset,d=t.endOffset;for(let e,t,o=0,r=n.length;o<r;o++)e=n[o],a.isListCell(e)&&this.plugins.list?(l||e.previousElementSibling)&&i.push(e):(t=/\d+/.test(e.style[s])?a.getNumber(e.style[s],0):0,l?t-=25:t+=25,a.setStyle(e,s,t<=0?"":t+"px"));i.length>0&&this.plugins.list.editInsideList.call(this,l,i),this.effectNode=null,this.setRange(r,u,c,d),this.history.push(!1)},toggleDisplayBlocks:function(){const t=e.element.wysiwyg;a.toggleClass(t,"se-show-block"),a.hasClass(t,"se-show-block")?a.addClass(this._styleCommandMap.showBlocks,"active"):a.removeClass(this._styleCommandMap.showBlocks,"active"),this._resourcesStateChange()},toggleCodeView:function(){const t=this._variable.isCodeView;this.controllersOff(),a.setDisabledButtons(!t,this.codeViewDisabledButtons),t?(a.isNonEditable(e.element.wysiwygFrame)||this._setCodeDataToEditor(),e.element.wysiwygFrame.scrollTop=0,e.element.code.style.display="none",e.element.wysiwygFrame.style.display="block",this._variable._codeOriginCssText=this._variable._codeOriginCssText.replace(/(\s?display(\s+)?:(\s+)?)[a-zA-Z]+(?=;)/,"display: none"),this._variable._wysiwygOriginCssText=this._variable._wysiwygOriginCssText.replace(/(\s?display(\s+)?:(\s+)?)[a-zA-Z]+(?=;)/,"display: block"),"auto"!==o.height||o.codeMirrorEditor||(e.element.code.style.height="0px"),this._variable.isCodeView=!1,this._variable.isFullScreen||(this._notHideToolbar=!1,/balloon|balloon-always/i.test(o.mode)&&(e.element._arrow.style.display="",this._isInline=!1,this._isBalloon=!0,d._hideToolbar())),this.nativeFocus(),a.removeClass(this._styleCommandMap.codeView,"active"),a.isNonEditable(e.element.wysiwygFrame)||(this.history.push(!1),this.history._resetCachingButton())):(this._setEditorDataToCodeView(),this._variable._codeOriginCssText=this._variable._codeOriginCssText.replace(/(\s?display(\s+)?:(\s+)?)[a-zA-Z]+(?=;)/,"display: block"),this._variable._wysiwygOriginCssText=this._variable._wysiwygOriginCssText.replace(/(\s?display(\s+)?:(\s+)?)[a-zA-Z]+(?=;)/,"display: none"),this._variable.isFullScreen?e.element.code.style.height="100%":"auto"!==o.height||o.codeMirrorEditor||(e.element.code.style.height=e.element.code.scrollHeight>0?e.element.code.scrollHeight+"px":"auto"),o.codeMirrorEditor&&o.codeMirrorEditor.refresh(),this._variable.isCodeView=!0,this._variable.isFullScreen||(this._notHideToolbar=!0,this._isBalloon&&(e.element._arrow.style.display="none",e.element.toolbar.style.left="",this._isInline=!0,this._isBalloon=!1,d._showToolbarInline())),this._variable._range=null,e.element.code.focus(),a.addClass(this._styleCommandMap.codeView,"active")),this._checkPlaceholder(),this.isReadOnly&&a.setDisabledButtons(!0,this.resizingDisabledButtons),"function"==typeof h.toggleCodeView&&h.toggleCodeView(this._variable.isCodeView,this)},_setCodeDataToEditor:function(){const t=this._getCodeView();if(o.fullPage){const e=this._parser.parseFromString(t,"text/html"),n=e.head.children;for(let t=0,i=n.length;t<i;t++)/^script$/i.test(n[t].tagName)&&(e.head.removeChild(n[t]),t--,i--);let i=e.head.innerHTML;e.head.querySelector('link[rel="stylesheet"]')&&("auto"!==this.options.height||e.head.querySelector("style"))||(i+=a._setIframeCssTags(this.options)),this._wd.head.innerHTML=i,this._wd.body.innerHTML=this.convertContentsForEditor(e.body.innerHTML);const l=e.body.attributes;for(let e=0,t=l.length;e<t;e++)"contenteditable"!==l[e].name&&this._wd.body.setAttribute(l[e].name,l[e].value);if(!a.hasClass(this._wd.body,"sun-editor-editable")){const e=o._editableClass.split(" ");for(let t=0;t<e.length;t++)a.addClass(this._wd.body,o._editableClass[t])}}else e.element.wysiwyg.innerHTML=t.length>0?this.convertContentsForEditor(t):"<"+o.defaultTag+"><br></"+o.defaultTag+">"},_setEditorDataToCodeView:function(){const t=this.convertHTMLForCodeView(e.element.wysiwyg,!1);let n="";if(o.fullPage){const e=a.getAttributesToString(this._wd.body,null);n="<!DOCTYPE html>\n<html>\n"+this._wd.head.outerHTML.replace(/>(?!\n)/g,">\n")+"<body "+e+">\n"+t+"</body>\n</html>"}else n=t;e.element.code.style.display="block",e.element.wysiwygFrame.style.display="none",this._setCodeView(n)},toggleFullScreen:function(t){const n=e.element.topArea,i=e.element.toolbar,l=e.element.editorArea,u=e.element.wysiwygFrame,p=e.element.code,f=this._variable;this.controllersOff();const g="none"===i.style.display||this._isInline&&!this._inlineToolbarAttr.isShow;f.isFullScreen?(f.isFullScreen=!1,u.style.cssText=f._wysiwygOriginCssText,p.style.cssText=f._codeOriginCssText,i.style.cssText="",l.style.cssText=f._editorAreaOriginCssText,n.style.cssText=f._originCssText,s.body.style.overflow=f._bodyOverflow,"auto"!==o.height||o.codeMirrorEditor||d._codeViewAutoHeight(),o.toolbarContainer&&o.toolbarContainer.appendChild(i),o.stickyToolbar>-1&&a.removeClass(i,"se-toolbar-sticky"),f._fullScreenAttrs.sticky&&!o.toolbarContainer&&(f._fullScreenAttrs.sticky=!1,e.element._stickyDummy.style.display="block",a.addClass(i,"se-toolbar-sticky")),this._isInline=f._fullScreenAttrs.inline,this._isBalloon=f._fullScreenAttrs.balloon,this._isInline&&d._showToolbarInline(),o.toolbarContainer&&a.removeClass(i,"se-toolbar-balloon"),d.onScroll_window(),t&&a.changeElement(t.firstElementChild,c.expansion),e.element.topArea.style.marginTop="",a.removeClass(this._styleCommandMap.fullScreen,"active")):(f.isFullScreen=!0,f._fullScreenAttrs.inline=this._isInline,f._fullScreenAttrs.balloon=this._isBalloon,(this._isInline||this._isBalloon)&&(this._isInline=!1,this._isBalloon=!1),o.toolbarContainer&&e.element.relative.insertBefore(i,l),n.style.position="fixed",n.style.top="0",n.style.left="0",n.style.width="100%",n.style.maxWidth="100%",n.style.height="100%",n.style.zIndex="2147483647",""!==e.element._stickyDummy.style.display&&(f._fullScreenAttrs.sticky=!0,e.element._stickyDummy.style.display="none",a.removeClass(i,"se-toolbar-sticky")),f._bodyOverflow=s.body.style.overflow,s.body.style.overflow="hidden",f._editorAreaOriginCssText=l.style.cssText,f._wysiwygOriginCssText=u.style.cssText,f._codeOriginCssText=p.style.cssText,l.style.cssText=i.style.cssText="",u.style.cssText=(u.style.cssText.match(/\s?display(\s+)?:(\s+)?[a-zA-Z]+;/)||[""])[0]+o.defaultStyle,p.style.cssText=(p.style.cssText.match(/\s?display(\s+)?:(\s+)?[a-zA-Z]+;/)||[""])[0],i.style.width=u.style.height=p.style.height="100%",i.style.position="relative",i.style.display="block",f.innerHeight_fullScreen=r.innerHeight-i.offsetHeight,l.style.height=f.innerHeight_fullScreen-o.fullScreenOffset+"px",t&&a.changeElement(t.firstElementChild,c.reduction),o.iframe&&"auto"===o.height&&(l.style.overflow="auto",this._iframeAutoHeight()),e.element.topArea.style.marginTop=o.fullScreenOffset+"px",a.addClass(this._styleCommandMap.fullScreen,"active")),g&&h.toolbar.hide(),"function"==typeof h.toggleFullScreen&&h.toggleFullScreen(this._variable.isFullScreen,this)},print:function(){const e=a.createElement("IFRAME");e.style.display="none",s.body.appendChild(e);const t=o.printTemplate?o.printTemplate.replace(/\{\{\s*contents\s*\}\}/i,this.getContents(!0)):this.getContents(!0),n=a.getIframeDocument(e),i=this._wd;if(o.iframe){const e=null!==o._printClass?'class="'+o._printClass+'"':o.fullPage?a.getAttributesToString(i.body,["contenteditable"]):'class="'+o._editableClass+'"';n.write("<!DOCTYPE html><html><head>"+i.head.innerHTML+"</head><body "+e+">"+t+"</body></html>")}else{const e=s.head.getElementsByTagName("link"),i=s.head.getElementsByTagName("style");let l="";for(let t=0,n=e.length;t<n;t++)l+=e[t].outerHTML;for(let e=0,t=i.length;e<t;e++)l+=i[e].outerHTML;n.write("<!DOCTYPE html><html><head>"+l+'</head><body class="'+(null!==o._printClass?o._printClass:o._editableClass)+'">'+t+"</body></html>")}this.showLoading(),r.setTimeout((function(){try{if(e.focus(),a.isIE_Edge||a.isChromium||s.documentMode||r.StyleMedia)try{e.contentWindow.document.execCommand("print",!1,null)}catch(t){e.contentWindow.print()}else e.contentWindow.print()}catch(e){throw Error("[SUNEDITOR.core.print.fail] error: "+e)}finally{u.closeLoading(),a.removeItem(e)}}),1e3)},preview:function(){u.submenuOff(),u.containerOff(),u.controllersOff();const e=o.previewTemplate?o.previewTemplate.replace(/\{\{\s*contents\s*\}\}/i,this.getContents(!0)):this.getContents(!0),t=r.open("","_blank");t.mimeType="text/html";const n=this._wd;if(o.iframe){const i=null!==o._printClass?'class="'+o._printClass+'"':o.fullPage?a.getAttributesToString(n.body,["contenteditable"]):'class="'+o._editableClass+'"';t.document.write("<!DOCTYPE html><html><head>"+n.head.innerHTML+"<style>body {overflow:auto !important; margin: 10px auto !important; height:auto !important; outline:1px dashed #ccc;}</style></head><body "+i+">"+e+"</body></html>")}else{const n=s.head.getElementsByTagName("link"),l=s.head.getElementsByTagName("style");let r="";for(let e=0,t=n.length;e<t;e++)r+=n[e].outerHTML;for(let e=0,t=l.length;e<t;e++)r+=l[e].outerHTML;t.document.write('<!DOCTYPE html><html><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"><title>'+i.toolbar.preview+"</title>"+r+'</head><body class="'+(null!==o._printClass?o._printClass:o._editableClass)+'" style="margin:10px auto !important; height:auto !important; outline:1px dashed #ccc;">'+e+"</body></html>")}},setDir:function(t){const n="rtl"===t,l=this._prevRtl!==n;this._prevRtl=o.rtl=n,l&&(this.plugins.align&&this.plugins.align.exchangeDir.call(this),e.tool.indent&&a.changeElement(e.tool.indent.firstElementChild,c.indent),e.tool.outdent&&a.changeElement(e.tool.outdent.firstElementChild,c.outdent));const s=e.element;n?(a.addClass(s.topArea,"se-rtl"),a.addClass(s.wysiwygFrame,"se-rtl")):(a.removeClass(s.topArea,"se-rtl"),a.removeClass(s.wysiwygFrame,"se-rtl"));const r=a.getListChildren(s.wysiwyg,(function(e){return a.isFormatElement(e)&&(e.style.marginRight||e.style.marginLeft||e.style.textAlign)}));for(let e,t,n,i=0,o=r.length;i<o;i++)e=r[i],n=e.style.marginRight,t=e.style.marginLeft,(n||t)&&(e.style.marginRight=t,e.style.marginLeft=n),n=e.style.textAlign,"left"===n?e.style.textAlign="right":"right"===n&&(e.style.textAlign="left");const u=e.tool;u.dir&&(a.changeTxt(u.dir.querySelector(".se-tooltip-text"),i.toolbar[o.rtl?"dir_ltr":"dir_rtl"]),a.changeElement(u.dir.firstElementChild,c[o.rtl?"dir_ltr":"dir_rtl"])),u.dir_ltr&&(n?a.removeClass(u.dir_ltr,"active"):a.addClass(u.dir_ltr,"active")),u.dir_rtl&&(n?a.addClass(u.dir_rtl,"active"):a.removeClass(u.dir_rtl,"active"))},setContents:function(t){this.removeRange();const n=null==t?"":this.convertContentsForEditor(t);if(this._resetComponents(),this._variable.isCodeView){const e=this.convertHTMLForCodeView(n,!1);this._setCodeView(e)}else e.element.wysiwyg.innerHTML=n,this.history.push(!1)},setIframeContents:function(e){if(!o.iframe)return!1;e.head&&(this._wd.head.innerHTML=e.head.replace(/<script[\s\S]*>[\s\S]*<\/script>/gi,"")),e.body&&(this._wd.body.innerHTML=this.convertContentsForEditor(e.body))},getContents:function(t){const n=this.convertHTMLForCodeView(e.element.wysiwyg,!0),i=a.createElement("DIV");i.innerHTML=n;const l=a.getListChildren(i,(function(e){return/FIGCAPTION/i.test(e.nodeName)}));for(let e=0,t=l.length;e<t;e++)l[e].removeAttribute("contenteditable");if(o.fullPage&&!t){const e=a.getAttributesToString(this._wd.body,["contenteditable"]);return"<!DOCTYPE html><html>"+this._wd.head.outerHTML+"<body "+e+">"+i.innerHTML+"</body></html>"}return i.innerHTML},getFullContents:function(e){return'<div class="sun-editor-editable'+(o.rtl?" se-rtl":"")+'">'+this.getContents(e)+"</div>"},_makeLine:function(e,t){const n=o.defaultTag;if(1===e.nodeType){if(a._disallowedTags(e))return"";const i=a.getListChildNodes(e,(function(e){return a.isSpanWithoutAttr(e)}))||[];for(let e=i.length-1;e>=0;e--)i[e].outerHTML=i[e].innerHTML;return!t||a.isFormatElement(e)||a.isRangeFormatElement(e)||a.isComponent(e)||a.isMedia(e)||a.isAnchor(e)&&a.isMedia(e.firstElementChild)?a.isSpanWithoutAttr(e)?e.innerHTML:e.outerHTML:"<"+n+">"+(a.isSpanWithoutAttr(e)?e.innerHTML:e.outerHTML)+"</"+n+">"}if(3===e.nodeType){if(!t)return a._HTMLConvertor(e.textContent);const i=e.textContent.split(/\n/g);let o="";for(let e,t=0,l=i.length;t<l;t++)e=i[t].trim(),e.length>0&&(o+="<"+n+">"+a._HTMLConvertor(e)+"</"+n+">");return o}return 8===e.nodeType&&this._allowHTMLComments?"\x3c!--"+e.textContent.trim()+"--\x3e":""},_tagConvertor:function(e){if(!this._disallowedTextTagsRegExp)return e;const t=o._textTagsMap;return e.replace(this._disallowedTextTagsRegExp,(function(e,n,i,o){return n+("string"==typeof t[i]?t[i]:i)+(o?" "+o:"")}))},_deleteDisallowedTags:function(e){return e.replace(/\n/g,"").replace(/<(script|style)[\s\S]*>[\s\S]*<\/(script|style)>/gi,"").replace(/<[a-z0-9]+\:[a-z0-9]+[^>^\/]*>[^>]*<\/[a-z0-9]+\:[a-z0-9]+>/gi,"").replace(this.editorTagsWhitelistRegExp,"").replace(this.editorTagsBlacklistRegExp,"")},_convertFontSize:function(e,t){const n=t.match(/(\d+(?:\.\d+)?)(.+)/),i=1*n[1],o=n[2];let l=i;switch(/em/.test(o)?l=this.round(i/.0625):"pt"===o?l=this.round(1.333*i):"%"===o&&(l=i/100),e){case"em":case"rem":case"%":return(.0625*l).toFixed(2)+e;case"pt":return this.floor(l/1.333)+e;default:return l+e}},_cleanStyle:function(e,t,n){const i=e.match(/style\s*=\s*(?:"|')[^"']*(?:"|')/);if(i){t||(t=[]);const e=i[0].replace(/&quot;/g,"").match(this._cleanStyleRegExp[n]);if(e){const n=[];for(let t,i=0,l=e.length;i<l;i++)if(t=e[i].match(/([a-zA-Z0-9-]+)(:)([^:]+$)/),t&&!/inherit|initial/i.test(t[3])){const e=a.kebabToCamelCase(t[1].trim()),i=this.wwComputedStyle[e].replace(/"/g,""),l=t[3].trim();switch(e){case"fontFamily":if(!o.plugins.font||-1===o.font.indexOf(l))continue;break;case"fontSize":if(!o.plugins.fontSize)continue;this._cleanStyleRegExp.fontSizeUnit.test(t[0])||(t[0]=t[0].replace(this._w.RegExp("\\d+"+t[0].match(/\d+(.+$)/)[1]),this._convertFontSize.bind(this._w.Math,o.fontSizeUnit)));break;case"color":if(!o.plugins.fontColor||/rgba\(([0-9]+\s*,\s*){3}0\)|windowtext/i.test(l))continue;break;case"backgroundColor":if(!o.plugins.hiliteColor||/rgba\(([0-9]+\s*,\s*){3}0\)|windowtext/i.test(l))continue}i!==l&&n.push(t[0])}n.length>0&&t.push('style="'+n.join(";")+'"')}}return t},_cleanTags:function(e,t,n){if(/^<[a-z0-9]+\:[a-z0-9]+/i.test(t))return t;let i=null;const o=n.match(/(?!<)[a-zA-Z0-9\-]+/)[0].toLowerCase(),l=this._attributesTagsBlacklist[o];t=t.replace(/\s(?:on[a-z]+)\s*=\s*(")[^"]*\1/gi,""),t=l?t.replace(l,""):t.replace(this._attributesBlacklistRegExp,"");const s=this._attributesTagsWhitelist[o];if(i=s?t.match(s):t.match(e?this._attributesWhitelistRegExp:this._attributesWhitelistRegExp_all_data),e)if("a"===o){const e=t.match(/(?:(?:id|name)\s*=\s*(?:"|')[^"']*(?:"|'))/g);e&&(i||(i=[]),i.push(e[0]))}else i&&/style=/i.test(i.toString())||("span"===o?i=this._cleanStyle(t,i,"span"):/^(P|DIV|H[1-6]|PRE)$/i.test(o)&&(i=this._cleanStyle(t,i,"format")));else{const e=t.match(/style\s*=\s*(?:"|')[^"']*(?:"|')/);e&&!i?i=[e[0]]:e&&!i.some((function(e){return/^style/.test(e.trim())}))&&i.push(e[0])}if("img"===o){let e="",n="";const o=t.match(/style\s*=\s*(?:"|')[^"']*(?:"|')/);if(i||(i=[]),o&&(e=o[0].match(/width:(.+);/),e=a.getNumber(e?e[1]:"",-1)||"",n=o[0].match(/height:(.+);/),n=a.getNumber(n?n[1]:"",-1)||""),!e||!n){const i=t.match(/width\s*=\s*((?:"|')[^"']*(?:"|'))/),o=t.match(/height\s*=\s*((?:"|')[^"']*(?:"|'))/);(i||o)&&(e=e||(a.getNumber(i?i[1]:"")||""),n=n||(a.getNumber(o?o[1]:"")||""))}i.push('data-origin="'+e+","+n+'"')}if(i)for(let t=0,o=i.length;t<o;t++)e&&/^class="(?!(__se__|se-|katex))/.test(i[t].trim())||(n+=" "+(/^(?:href|src)\s*=\s*('|"|\s)*javascript\s*\:/i.test(i[t].trim())?"":i[t]));return n},_editFormat:function(e){let t,n="";const i=e.childNodes;for(let e,l=0,s=i.length;l<s;l++)e=i[l],a.isFormatElement(e)||a.isRangeFormatElement(e)||a.isComponent(e)||/meta/i.test(e.nodeName)?(t&&(n+=t.outerHTML,t=null),n+=e.outerHTML):(t||(t=a.createElement(o.defaultTag)),t.appendChild(e),l--,s--);return t&&(n+=t.outerHTML),s.createRange().createContextualFragment(n)},_convertListCell:function(e){let t="";for(let n,i=0,o=e.length;i<o;i++)n=e[i],1===n.nodeType?a.isList(n)?t+=n.innerHTML:a.isListCell(n)?t+=n.outerHTML:a.isFormatElement(n)?t+="<li>"+(n.innerHTML.trim()||"<br>")+"</li>":a.isRangeFormatElement(n)&&!a.isTable(n)?t+=this._convertListCell(n):t+="<li>"+n.outerHTML+"</li>":t+="<li>"+(n.textContent||"<br>")+"</li>";return t},_isFormatData:function(e){let t=!1;for(let n,i=0,o=e.length;i<o;i++)if(n=e[i],1===n.nodeType&&!a.isTextStyleElement(n)&&!a.isBreak(n)&&!a._disallowedTags(n)){t=!0;break}return t},cleanHTML:function(e,t,n){e=this._deleteDisallowedTags(this._parser.parseFromString(e,"text/html").body.innerHTML).replace(/(<[a-zA-Z0-9\-]+)[^>]*(?=>)/g,this._cleanTags.bind(this,!0));const i=s.createRange().createContextualFragment(e);try{a._consistencyCheckOfHTML(i,this._htmlCheckWhitelistRegExp,this._htmlCheckBlacklistRegExp,!0)}catch(e){console.warn("[SUNEDITOR.cleanHTML.consistencyCheck.fail] "+e)}if(this.managedTagsInfo&&this.managedTagsInfo.query){const e=i.querySelectorAll(this.managedTagsInfo.query);for(let t,n,i=0,o=e.length;i<o;i++){n=[].slice.call(e[i].classList);for(let o=0,l=n.length;o<l;o++)if(t=this.managedTagsInfo.map[n[o]],t){t(e[i]);break}}}let o=i.childNodes,l="";const r=this._isFormatData(o);r&&(o=this._editFormat(i).childNodes);for(let e=0,t=o.length;e<t;e++)l+=this._makeLine(o[e],r);return l=a.htmlRemoveWhiteSpace(l),l?(t&&(l=l.replace("string"==typeof t?a.createTagsWhitelist(t):t,"")),n&&(l=l.replace("string"==typeof n?a.createTagsBlacklist(n):n,""))):l=e,this._tagConvertor(l)},convertContentsForEditor:function(e){e=this._deleteDisallowedTags(this._parser.parseFromString(e,"text/html").body.innerHTML).replace(/(<[a-zA-Z0-9\-]+)[^>]*(?=>)/g,this._cleanTags.bind(this,!1));const t=s.createRange().createContextualFragment(e);try{a._consistencyCheckOfHTML(t,this._htmlCheckWhitelistRegExp,this._htmlCheckBlacklistRegExp,!1)}catch(e){console.warn("[SUNEDITOR.convertContentsForEditor.consistencyCheck.fail] "+e)}if(this.managedTagsInfo&&this.managedTagsInfo.query){const e=t.querySelectorAll(this.managedTagsInfo.query);for(let t,n,i=0,o=e.length;i<o;i++){n=[].slice.call(e[i].classList);for(let o=0,l=n.length;o<l;o++)if(t=this.managedTagsInfo.map[n[o]],t){t(e[i]);break}}}const n=t.childNodes;let i="",l=null;for(let e,t=0;t<n.length;t++){if(e=n[t],!(a.isFormatElement(e)||a.isRangeFormatElement(e)||a.isComponent(e)||a.isMedia(e)||8===e.nodeType)){if(l||(l=a.createElement(o.defaultTag)),l.appendChild(e),t--,n[t+1]&&!a.isFormatElement(n[t+1]))continue;e=l,l=null}l&&(i+=this._makeLine(l,!0),l=null),i+=this._makeLine(e,!0)}return l&&(i+=this._makeLine(l,!0)),0===i.length?"<"+o.defaultTag+"><br></"+o.defaultTag+">":(i=a.htmlRemoveWhiteSpace(i),this._tagConvertor(i))},convertHTMLForCodeView:function(e,t){let n="";const i=r.RegExp,o=new i("^(BLOCKQUOTE|PRE|TABLE|THEAD|TBODY|TR|TH|TD|OL|UL|IMG|IFRAME|VIDEO|AUDIO|FIGURE|FIGCAPTION|HR|BR|CANVAS|SELECT)$","i"),l="string"==typeof e?s.createRange().createContextualFragment(e):e,c=function(e){return this.isFormatElement(e)||this.isComponent(e)}.bind(a),u=t?"":"\n";let d=t?0:1*this._variable.codeIndent;return d=d>0?new r.Array(d+1).join(" "):"",function e(t,l){const s=t.childNodes,h=o.test(t.nodeName),p=h?l:"";for(let f,g,m,v,y,b,_=0,w=s.length;_<w;_++)f=s[_],v=o.test(f.nodeName),g=v?u:"",m=!c(f)||h||/^(TH|TD)$/i.test(t.nodeName)?"":u,8!==f.nodeType?3!==f.nodeType?0!==f.childNodes.length?f.outerHTML?(y=f.nodeName.toLowerCase(),b=p||v?l:"",n+=(m||(h?"":g))+b+f.outerHTML.match(i("<"+y+"[^>]*>","i"))[0]+g,e(f,l+d),n+=(/\n$/.test(n)?b:"")+"</"+y+">"+(m||g||h||/^(TH|TD)$/i.test(f.nodeName)?u:"")):n+=(new r.XMLSerializer).serializeToString(f):n+=(/^HR$/i.test(f.nodeName)?u:"")+(/^PRE$/i.test(f.parentElement.nodeName)&&/^BR$/i.test(f.nodeName)?"":p)+f.outerHTML+g:a.isList(f.parentElement)||(n+=a._HTMLConvertor(/^\n+$/.test(f.data)?"":f.data)):n+="\n\x3c!-- "+f.textContent.trim()+" --\x3e"+g}(l,""),n.trim()+u},addDocEvent:function(e,t,n){s.addEventListener(e,t,n),o.iframe&&this._wd.addEventListener(e,t)},removeDocEvent:function(e,t){s.removeEventListener(e,t),o.iframe&&this._wd.removeEventListener(e,t)},_charCount:function(e){const t=o.maxCharCount,n=o.charCounterType;let i=0;if(e&&(i=this.getCharLength(e,n)),this._setCharCount(),t>0){let e=!1;const o=h.getCharCount(n);if(o>t){if(e=!0,i>0){this._editorRange();const e=this.getRange(),n=e.endOffset-1,i=this.getSelectionNode().textContent,l=e.endOffset-(o-t);this.getSelectionNode().textContent=i.slice(0,l<0?0:l)+i.slice(e.endOffset,i.length),this.setRange(e.endContainer,n,e.endContainer,n)}}else o+i>t&&(e=!0);if(e&&(this._callCounterBlink(),i>0))return!1}return!0},checkCharCount:function(e,t){if(o.maxCharCount){const n=t||o.charCounterType,i=this.getCharLength("string"==typeof e?e:this._charTypeHTML&&1===e.nodeType?e.outerHTML:e.textContent,n);if(i>0&&i+h.getCharCount(n)>o.maxCharCount)return this._callCounterBlink(),!1}return!0},getCharLength:function(e,t){return/byte/.test(t)?a.getByteLength(e):e.length},resetResponsiveToolbar:function(){u.controllersOff();const t=d._responsiveButtonSize;if(t){let n=0;n=(u._isBalloon||u._isInline)&&"auto"===o.toolbarWidth?e.element.topArea.offsetWidth:e.element.toolbar.offsetWidth;let i="default";for(let e=1,o=t.length;e<o;e++)if(n<t[e]){i=t[e]+"";break}d._responsiveCurrentSize!==i&&(d._responsiveCurrentSize=i,h.setToolbarButtons(d._responsiveButtons[i]))}},_setCharCount:function(){e.element.charCounter&&r.setTimeout((function(){e.element.charCounter.textContent=h.getCharCount(o.charCounterType)}))},_callCounterBlink:function(){const t=e.element.charWrapper;t&&!a.hasClass(t,"se-blink")&&(a.addClass(t,"se-blink"),r.setTimeout((function(){a.removeClass(t,"se-blink")}),600))},_checkComponents:function(){for(let e=0,t=this._fileInfoPluginsCheck.length;e<t;e++)this._fileInfoPluginsCheck[e]()},_resetComponents:function(){for(let e=0,t=this._fileInfoPluginsReset.length;e<t;e++)this._fileInfoPluginsReset[e]()},_setCodeView:function(t){o.codeMirrorEditor?o.codeMirrorEditor.getDoc().setValue(t):e.element.code.value=t},_getCodeView:function(){return o.codeMirrorEditor?o.codeMirrorEditor.getDoc().getValue():e.element.code.value},_setKeyEffect:function(e){const t=this.commandMap,i=this.activePlugins;for(let o in t)e.indexOf(o)>-1||!a.hasOwn(t,o)||(i.indexOf(o)>-1?n[o].active.call(this,null):t.OUTDENT&&/^OUTDENT$/i.test(o)?a.isImportantDisabled(t.OUTDENT)||t.OUTDENT.setAttribute("disabled",!0):t.INDENT&&/^INDENT$/i.test(o)?a.isImportantDisabled(t.INDENT)||t.INDENT.removeAttribute("disabled"):a.removeClass(t[o],"active"))},_init:function(i,l){const c=r.RegExp;if(this._ww=o.iframe?e.element.wysiwygFrame.contentWindow:r,this._wd=s,this._charTypeHTML="byte-html"===o.charCounterType,this.wwComputedStyle=r.getComputedStyle(e.element.wysiwyg),this._editorHeight=e.element.wysiwygFrame.offsetHeight,this._editorHeightPadding=a.getNumber(this.wwComputedStyle.getPropertyValue("padding-top"))+a.getNumber(this.wwComputedStyle.getPropertyValue("padding-bottom")),!o.iframe&&"function"==typeof r.ShadowRoot){let t=e.element.wysiwygFrame;for(;t;){if(t.shadowRoot){this._shadowRoot=t.shadowRoot;break}if(t instanceof r.ShadowRoot){this._shadowRoot=t;break}t=t.parentNode}this._shadowRoot&&(this._shadowRootControllerEventTarget=[])}const u=r.Object.keys(o._textTagsMap),d=o.addTagsWhitelist?o.addTagsWhitelist.split("|").filter((function(e){return/b|i|ins|s|strike/i.test(e)})):[];for(let e=0;e<d.length;e++)u.splice(u.indexOf(d[e].toLowerCase()),1);this._disallowedTextTagsRegExp=0===u.length?null:new c("(<\\/?)("+u.join("|")+")\\b\\s*([^>^<]+)?\\s*(?=>)","gi");const h=function(e,t){return e?"*"===e?"[a-z-]+":t?e+"|"+t:e:"^"},p="contenteditable|colspan|rowspan|target|href|download|rel|src|alt|class|type|controls|origin-size";this._allowHTMLComments=o._editorTagsWhitelist.indexOf("//")>-1||"*"===o._editorTagsWhitelist,this._htmlCheckWhitelistRegExp=new c("^("+h(o._editorTagsWhitelist.replace("|//",""),"")+")$","i"),this._htmlCheckBlacklistRegExp=new c("^("+(o.tagsBlacklist||"^")+")$","i"),this.editorTagsWhitelistRegExp=a.createTagsWhitelist(h(o._editorTagsWhitelist.replace("|//","|\x3c!--|--\x3e"),"")),this.editorTagsBlacklistRegExp=a.createTagsBlacklist(o.tagsBlacklist.replace("|//","|\x3c!--|--\x3e")),this.pasteTagsWhitelistRegExp=a.createTagsWhitelist(h(o.pasteTagsWhitelist,"")),this.pasteTagsBlacklistRegExp=a.createTagsBlacklist(o.pasteTagsBlacklist);const f='\\s*=\\s*(")[^"]*\\1',g=o.attributesWhitelist;let m={},v="";if(g)for(let e in g)a.hasOwn(g,e)&&!/^on[a-z]+$/i.test(g[e])&&("all"===e?v=h(g[e],p):m[e]=new c("\\s(?:"+h(g[e],"")+")"+f,"ig"));this._attributesWhitelistRegExp=new c("\\s(?:"+(v||p+"|data-format|data-size|data-file-size|data-file-name|data-origin|data-align|data-image-link|data-rotate|data-proportion|data-percentage|data-exp|data-font-size")+")"+f,"ig"),this._attributesWhitelistRegExp_all_data=new c("\\s(?:"+(v||p)+"|data-[a-z0-9\\-]+)"+f,"ig"),this._attributesTagsWhitelist=m;const y=o.attributesBlacklist;if(m={},v="",y)for(let e in y)a.hasOwn(y,e)&&("all"===e?v=h(y[e],""):m[e]=new c("\\s(?:"+h(y[e],"")+")"+f,"ig"));this._attributesBlacklistRegExp=new c("\\s(?:"+(v||"^")+")"+f,"ig"),this._attributesTagsBlacklist=m,this._isInline=/inline/i.test(o.mode),this._isBalloon=/balloon|balloon-always/i.test(o.mode),this._isBalloonAlways=/balloon-always/i.test(o.mode),this._cachingButtons(),this._fileInfoPluginsCheck=[],this._fileInfoPluginsReset=[],this.managedTagsInfo={query:"",map:{}};const b=[];this.activePlugins=[],this._fileManager.tags=[],this._fileManager.pluginMap={};let _,w,C=[];for(let e in n)if(a.hasOwn(n,e)){if(_=n[e],w=t[e],(_.active||_.action)&&w&&this.callPlugin(e,null,w),"function"==typeof _.checkFileInfo&&"function"==typeof _.resetFileInfo&&(this.callPlugin(e,null,w),this._fileInfoPluginsCheck.push(_.checkFileInfo.bind(this)),this._fileInfoPluginsReset.push(_.resetFileInfo.bind(this))),r.Array.isArray(_.fileTags)){const t=_.fileTags;this.callPlugin(e,null,w),this._fileManager.tags=this._fileManager.tags.concat(t),C.push(e);for(let n=0,i=t.length;n<i;n++)this._fileManager.pluginMap[t[n].toLowerCase()]=e}if(_.managedTags){const e=_.managedTags();b.push("."+e.className),this.managedTagsInfo.map[e.className]=e.method.bind(this)}}this.managedTagsInfo.query=b.toString(),this._fileManager.queryString=this._fileManager.tags.join(","),this._fileManager.regExp=new c("^("+(this._fileManager.tags.join("|")||"^")+")$","i"),this._fileManager.pluginRegExp=new c("^("+(0===C.length?"^":C.join("|"))+")$","i"),this._variable._originCssText=e.element.topArea.style.cssText,this._placeholder=e.element.placeholder,this._lineBreaker=e.element.lineBreaker,this._lineBreakerButton=this._lineBreaker.querySelector("button"),this.history=function(e,t){const n=e._w,i=e.util,o=e.options.historyStackDelayTime;let l=e.context.element,s=e.context.tool.undo,r=e.context.tool.redo,a=null,c=0,u=[];function d(){const n=u[c];l.wysiwyg.innerHTML=n.contents,e.setRange(i.getNodeFromPath(n.s.path,l.wysiwyg),n.s.offset,i.getNodeFromPath(n.e.path,l.wysiwyg),n.e.offset),e.focus(),u.length<=1?(s&&s.setAttribute("disabled",!0),r&&r.setAttribute("disabled",!0)):0===c?(s&&s.setAttribute("disabled",!0),r&&r.removeAttribute("disabled")):c===u.length-1?(s&&s.removeAttribute("disabled"),r&&r.setAttribute("disabled",!0)):(s&&s.removeAttribute("disabled"),r&&r.removeAttribute("disabled")),e.controllersOff(),e._checkComponents(),e._setCharCount(),e._resourcesStateChange(),t()}function h(){e._checkComponents();const n=e.getContents(!0);if(!n||u[c]&&n===u[c].contents)return;c++;const o=e._variable._range;u.length>c&&(u=u.slice(0,c),r&&r.setAttribute("disabled",!0)),u[c]=o?{contents:n,s:{path:i.getNodePath(o.startContainer,null,null),offset:o.startOffset},e:{path:i.getNodePath(o.endContainer,null,null),offset:o.endOffset}}:{contents:n,s:{path:[0,0],offset:[0,0]},e:{path:0,offset:0}},1===c&&s&&s.removeAttribute("disabled"),e._setCharCount(),t()}return{stack:u,push:function(t){n.setTimeout(e._resourcesStateChange.bind(e));const i="number"==typeof t?t>0?t:0:t?o:0;i&&!a||(n.clearTimeout(a),i)?a=n.setTimeout((function(){n.clearTimeout(a),a=null,h()}),i):h()},undo:function(){c>0&&(c--,d())},redo:function(){u.length-1>c&&(c++,d())},go:function(e){c=e<0?u.length-1:e,d()},getCurrentIndex:function(){return c},reset:function(n){s&&s.setAttribute("disabled",!0),r&&r.setAttribute("disabled",!0),e._variable.isChanged=!1,e.context.tool.save&&e.context.tool.save.setAttribute("disabled",!0),u.splice(0),c=0,u[c]={contents:e.getContents(!0),s:{path:[0,0],offset:0},e:{path:[0,0],offset:0}},n||t()},_resetCachingButton:function(){l=e.context.element,s=e.context.tool.undo,r=e.context.tool.redo,0===c?(s&&s.setAttribute("disabled",!0),r&&c===u.length-1&&r.setAttribute("disabled",!0),e._variable.isChanged=!1,e.context.tool.save&&e.context.tool.save.setAttribute("disabled",!0)):c===u.length-1&&r&&r.setAttribute("disabled",!0)},_destroy:function(){a&&n.clearTimeout(a),u=null}}}(this,this._onChange_historyStack.bind(this)),this.addModule([M]),o.iframe&&(this._wd=e.element.wysiwygFrame.contentDocument,e.element.wysiwyg=this._wd.body,o._editorStyles.editor&&(e.element.wysiwyg.style.cssText=o._editorStyles.editor),"auto"===o.height&&(this._iframeAuto=this._wd.body)),this._initWysiwygArea(i,l)},_cachingButtons:function(){this.codeViewDisabledButtons=e.element._buttonTray.querySelectorAll('.se-menu-list button[data-display]:not([class~="se-code-view-enabled"]):not([data-display="MORE"])'),this.resizingDisabledButtons=e.element._buttonTray.querySelectorAll('.se-menu-list button[data-display]:not([class~="se-resizing-enabled"]):not([data-display="MORE"])'),this._saveButtonStates();const t=e.tool;this.commandMap={OUTDENT:t.outdent,INDENT:t.indent},this.commandMap[o.textTags.bold.toUpperCase()]=t.bold,this.commandMap[o.textTags.underline.toUpperCase()]=t.underline,this.commandMap[o.textTags.italic.toUpperCase()]=t.italic,this.commandMap[o.textTags.strike.toUpperCase()]=t.strike,this.commandMap[o.textTags.sub.toUpperCase()]=t.subscript,this.commandMap[o.textTags.sup.toUpperCase()]=t.superscript,this._styleCommandMap={fullScreen:t.fullScreen,showBlocks:t.showBlocks,codeView:t.codeView}},_initWysiwygArea:function(t,n){e.element.wysiwyg.innerHTML=t?n:this.convertContentsForEditor("string"==typeof n?n:e.element.originElement.value)},_resourcesStateChange:function(){this._iframeAutoHeight(),this._checkPlaceholder()},_onChange_historyStack:function(){this.hasFocus&&d._applyTagEffects(),this._variable.isChanged=!0,e.tool.save&&e.tool.save.removeAttribute("disabled"),h.onChange&&h.onChange(this.getContents(!0),this),"block"===e.element.toolbar.style.display&&d._showToolbarBalloon()},_iframeAutoHeight:function(){this._iframeAuto?r.setTimeout((function(){const t=u._iframeAuto.offsetHeight;e.element.wysiwygFrame.style.height=t+"px",a.isIE&&u.__callResizeFunction(t,null)})):a.isIE&&u.__callResizeFunction(e.element.wysiwygFrame.offsetHeight,null)},__callResizeFunction:function(e,t){e=-1===e?t.borderBoxSize&&t.borderBoxSize[0]?t.borderBoxSize[0].blockSize:t.contentRect.height+this._editorHeightPadding:e,this._editorHeight!==e&&("function"==typeof h.onResizeEditor&&h.onResizeEditor(e,this._editorHeight,u,t),this._editorHeight=e)},_checkPlaceholder:function(){if(this._placeholder){if(this._variable.isCodeView)return void(this._placeholder.style.display="none");const t=e.element.wysiwyg;!a.onlyZeroWidthSpace(t.textContent)||t.querySelector(a._allowedEmptyNodeList)||(t.innerText.match(/\n/g)||"").length>1?this._placeholder.style.display="none":this._placeholder.style.display="block"}},_setDefaultFormat:function(e){if(this._fileManager.pluginRegExp.test(this.currentControllerName))return;const t=this.getRange(),n=t.commonAncestorContainer,i=t.startContainer,l=a.getRangeFormatElement(n,null);let s,r,c;const u=a.getParentElement(n,a.isComponent);if(!u||a.isTable(u)){if(1===n.nodeType&&"true"===n.getAttribute("data-se-embed")){let e=n.nextElementSibling;return a.isFormatElement(e)||(e=this.appendFormatTag(n,o.defaultTag)),void this.setRange(e.firstChild,0,e.firstChild,0)}if(!a.isRangeFormatElement(i)&&!a.isWysiwygDiv(i)||!a.isComponent(i.children[t.startOffset])&&!a.isComponent(i.children[t.startOffset-1])){if(a.getParentElement(n,a.isNotCheckingNode))return null;if(l)return c=a.createElement(e||o.defaultTag),c.innerHTML=l.innerHTML,0===c.childNodes.length&&(c.innerHTML=a.zeroWidthSpace),l.innerHTML=c.outerHTML,c=l.firstChild,s=a.getEdgeChildNodes(c,null).sc,s||(s=a.createTextNode(a.zeroWidthSpace),c.insertBefore(s,c.firstChild)),r=s.textContent.length,void this.setRange(s,r,s,r);if(a.isRangeFormatElement(n)&&n.childNodes.length<=1){let e=null;return 1===n.childNodes.length&&a.isBreak(n.firstChild)?e=n.firstChild:(e=a.createTextNode(a.zeroWidthSpace),n.appendChild(e)),void this.setRange(e,1,e,1)}if(this.execCommand("formatBlock",!1,e||o.defaultTag),s=a.getEdgeChildNodes(n,n),s=s?s.ec:n,c=a.getFormatElement(s,null),!c)return this.removeRange(),void this._editorRange();if(a.isBreak(c.nextSibling)&&a.removeItem(c.nextSibling),a.isBreak(c.previousSibling)&&a.removeItem(c.previousSibling),a.isBreak(s)){const e=a.createTextNode(a.zeroWidthSpace);s.parentNode.insertBefore(e,s),s=e}this.effectNode=null,this.nativeFocus()}}},_setOptionsInit:function(t,n){this.context=e=B(t.originElement,this._getConstructed(t),o),this._componentsInfoReset=!0,this._editorInit(!0,n)},_editorInit:function(t,n){this._init(t,n),d._addEvent(),this._setCharCount(),d._offStickyToolbar(),d.onResize_window(),e.element.toolbar.style.visibility="";const i=o.frameAttrbutes;for(let t in i)e.element.wysiwyg.setAttribute(t,i[t]);this._checkComponents(),this._componentsInfoInit=!1,this._componentsInfoReset=!1,this.history.reset(!0),r.setTimeout((function(){d._resizeObserver&&d._resizeObserver.observe(e.element.wysiwygFrame),d._toolbarObserver&&d._toolbarObserver.observe(e.element._toolbarShadow),u._resourcesStateChange(),"function"==typeof h.onload&&h.onload(u,t)}))},_getConstructed:function(e){return{_top:e.topArea,_relative:e.relative,_toolBar:e.toolbar,_toolbarShadow:e._toolbarShadow,_menuTray:e._menuTray,_editorArea:e.editorArea,_wysiwygArea:e.wysiwygFrame,_codeArea:e.code,_placeholder:e.placeholder,_resizingBar:e.resizingBar,_navigation:e.navigation,_charCounter:e.charCounter,_charWrapper:e.charWrapper,_loading:e.loading,_lineBreaker:e.lineBreaker,_lineBreaker_t:e.lineBreaker_t,_lineBreaker_b:e.lineBreaker_b,_resizeBack:e.resizeBackground,_stickyDummy:e._stickyDummy,_arrow:e._arrow}}},d={_IEisComposing:!1,_lineBreakerBind:null,_responsiveCurrentSize:"default",_responsiveButtonSize:null,_responsiveButtons:null,_directionKeyCode:new r.RegExp("^(8|13|3[2-9]|40|46)$"),_nonTextKeyCode:new r.RegExp("^(8|13|1[6-9]|20|27|3[3-9]|40|45|46|11[2-9]|12[0-3]|144|145)$"),_historyIgnoreKeyCode:new r.RegExp("^(1[6-9]|20|27|3[3-9]|40|45|11[2-9]|12[0-3]|144|145)$"),_onButtonsCheck:new r.RegExp("^("+r.Object.keys(o._textTagsMap).join("|")+")$","i"),_frontZeroWidthReg:new r.RegExp(a.zeroWidthSpace+"+",""),_keyCodeShortcut:{65:"A",66:"B",83:"S",85:"U",73:"I",89:"Y",90:"Z",219:"[",221:"]"},_shortcutCommand:function(e,t){let n=null;const i=d._keyCodeShortcut[e];switch(i){case"A":n="selectAll";break;case"B":-1===o.shortcutsDisable.indexOf("bold")&&(n="bold");break;case"S":t&&-1===o.shortcutsDisable.indexOf("strike")?n="strike":t||-1!==o.shortcutsDisable.indexOf("save")||(n="save");break;case"U":-1===o.shortcutsDisable.indexOf("underline")&&(n="underline");break;case"I":-1===o.shortcutsDisable.indexOf("italic")&&(n="italic");break;case"Z":-1===o.shortcutsDisable.indexOf("undo")&&(n=t?"redo":"undo");break;case"Y":-1===o.shortcutsDisable.indexOf("undo")&&(n="redo");break;case"[":-1===o.shortcutsDisable.indexOf("indent")&&(n=o.rtl?"indent":"outdent");break;case"]":-1===o.shortcutsDisable.indexOf("indent")&&(n=o.rtl?"outdent":"indent")}return n?(u.commandHandler(u.commandMap[n],n),!0):!!i},_applyTagEffects:function(){let t=u.getSelectionNode();if(t===u.effectNode)return;u.effectNode=t;const i=o.rtl?"marginRight":"marginLeft",l=u.commandMap,s=d._onButtonsCheck,r=[],c=[],h=u.activePlugins,p=h.length;let f="";for(;t.firstChild;)t=t.firstChild;for(let e=t;!a.isWysiwygDiv(e)&&e;e=e.parentNode)if(1===e.nodeType&&!a.isBreak(e)){if(f=e.nodeName.toUpperCase(),c.push(f),!u.isReadOnly)for(let t,i=0;i<p;i++)t=h[i],-1===r.indexOf(t)&&n[t].active.call(u,e)&&r.push(t);a.isFormatElement(e)?(-1===r.indexOf("OUTDENT")&&l.OUTDENT&&!a.isImportantDisabled(l.OUTDENT)&&(a.isListCell(e)||e.style[i]&&a.getNumber(e.style[i],0)>0)&&(r.push("OUTDENT"),l.OUTDENT.removeAttribute("disabled")),-1===r.indexOf("INDENT")&&l.INDENT&&!a.isImportantDisabled(l.INDENT)&&(r.push("INDENT"),a.isListCell(e)&&!e.previousElementSibling?l.INDENT.setAttribute("disabled",!0):l.INDENT.removeAttribute("disabled"))):s&&s.test(f)&&(r.push(f),a.addClass(l[f],"active"))}u._setKeyEffect(r),u._variable.currentNodes=c.reverse(),u._variable.currentNodesMap=r,o.showPathLabel&&(e.element.navigation.textContent=u._variable.currentNodes.join(" > "))},_cancelCaptionEdit:function(){this.setAttribute("contenteditable",!1),this.removeEventListener("blur",d._cancelCaptionEdit)},_buttonsEventHandler:function(e){let t=e.target;if(u._bindControllersOff&&e.stopPropagation(),/^(input|textarea|select|option)$/i.test(t.nodeName)?u._antiBlur=!1:e.preventDefault(),a.getParentElement(t,".se-submenu"))e.stopPropagation(),u._notHideToolbar=!0;else{let n=t.getAttribute("data-command"),i=t.className;for(;!n&&!/se-menu-list/.test(i)&&!/sun-editor-common/.test(i);)t=t.parentNode,n=t.getAttribute("data-command"),i=t.className;n!==u._submenuName&&n!==u._containerName||e.stopPropagation()}},onClick_toolbar:function(e){let t=e.target,n=t.getAttribute("data-display"),i=t.getAttribute("data-command"),o=t.className;for(u.controllersOff();t.parentNode&&!i&&!/se-menu-list/.test(o)&&!/se-toolbar/.test(o);)t=t.parentNode,i=t.getAttribute("data-command"),n=t.getAttribute("data-display"),o=t.className;(i||n)&&(t.disabled||u.actionCall(i,n,t))},onMouseDown_wysiwyg:function(t){if(u.isReadOnly||a.isNonEditable(e.element.wysiwyg))return;if("function"==typeof h.onMouseDown&&!1===h.onMouseDown(t,u))return;const n=a.getParentElement(t.target,a.isCell);if(n){const e=u.plugins.table;e&&n!==e._fixedCell&&!e._shift&&u.callPlugin("table",(function(){e.onTableCellMultiSelect.call(u,n,!1)}),null)}u._isBalloon&&d._hideToolbar(),/FIGURE/i.test(t.target.nodeName)&&t.preventDefault()},onClick_wysiwyg:function(t){const n=t.target;if(u.isReadOnly)return t.preventDefault(),a.isAnchor(n)&&r.open(n.href,n.target),!1;if(a.isNonEditable(e.element.wysiwyg))return;if("function"==typeof h.onClick&&!1===h.onClick(t,u))return;const i=u.getFileComponent(n);if(i)return t.preventDefault(),void u.selectComponent(i.target,i.pluginName);const l=a.getParentElement(n,"FIGCAPTION");if(l&&(a.isNonEditable(l)||!l.getAttribute("contenteditable"))&&(t.preventDefault(),l.setAttribute("contenteditable",!0),l.focus(),u._isInline&&!u._inlineToolbarAttr.isShow)){d._showToolbarInline();const e=function(){d._hideToolbar(),l.removeEventListener("blur",e)};l.addEventListener("blur",e)}r.setTimeout(u._editorRange.bind(u)),u._editorRange();const s=u.getSelectionNode(),c=a.getFormatElement(s,null),p=a.getRangeFormatElement(s,null);if(c||a.isNonEditable(n)||a.isList(p))d._applyTagEffects();else{const e=u.getRange();if(a.getFormatElement(e.startContainer)===a.getFormatElement(e.endContainer))if(a.isList(p)){t.preventDefault();const e=a.createElement("LI"),n=s.nextElementSibling;e.appendChild(s),p.insertBefore(e,n),u.focus()}else a.isWysiwygDiv(s)||a.isComponent(s)||a.isTable(s)&&!a.isCell(s)||null===u._setDefaultFormat(a.isRangeFormatElement(p)?"DIV":o.defaultTag)?d._applyTagEffects():(t.preventDefault(),u.focus())}u._isBalloon&&r.setTimeout(d._toggleToolbarBalloon)},_balloonDelay:null,_showToolbarBalloonDelay:function(){d._balloonDelay&&r.clearTimeout(d._balloonDelay),d._balloonDelay=r.setTimeout(function(){r.clearTimeout(this._balloonDelay),this._balloonDelay=null,this._showToolbarBalloon()}.bind(d),350)},_toggleToolbarBalloon:function(){u._editorRange();const e=u.getRange();u._bindControllersOff||!u._isBalloonAlways&&e.collapsed?d._hideToolbar():d._showToolbarBalloon(e)},_showToolbarBalloon:function(t){if(!u._isBalloon)return;const n=t||u.getRange(),i=e.element.toolbar,l=e.element.topArea,s=u.getSelection();let c;if(u._isBalloonAlways&&n.collapsed)c=!0;else if(s.focusNode===s.anchorNode)c=s.focusOffset<s.anchorOffset;else{const e=a.getListChildNodes(n.commonAncestorContainer,null);c=a.getArrayIndex(e,s.focusNode)<a.getArrayIndex(e,s.anchorNode)}let h=n.getClientRects();h=h[c?0:h.length-1];const p=u.getGlobalScrollOffset();let f=p.left,g=p.top;const m=l.offsetWidth,v=d._getEditorOffsets(null),y=v.top,b=v.left;if(i.style.top="-10000px",i.style.visibility="hidden",i.style.display="block",!h){const t=u.getSelectionNode();if(a.isFormatElement(t)){const e=a.createTextNode(a.zeroWidthSpace);u.insertNode(e,null,!1),u.setRange(e,1,e,1),u._editorRange(),h=u.getRange().getClientRects(),h=h[c?0:h.length-1]}if(!h){const n=a.getOffset(t,e.element.wysiwygFrame);h={left:n.left,top:n.top,right:n.left,bottom:n.top+t.offsetHeight,noText:!0},f=0,g=0}c=!0}const _=r.Math.round(e.element._arrow.offsetWidth/2),w=i.offsetWidth,C=i.offsetHeight,x=/iframe/i.test(e.element.wysiwygFrame.nodeName)?e.element.wysiwygFrame.getClientRects()[0]:null;if(x&&(h={left:h.left+x.left,top:h.top+x.top,right:h.right+x.right-x.width,bottom:h.bottom+x.bottom-x.height}),d._setToolbarOffset(c,h,i,b,m,f,g,y,_),w===i.offsetWidth&&C===i.offsetHeight||d._setToolbarOffset(c,h,i,b,m,f,g,y,_),o.toolbarContainer){const e=l.parentElement;let t=o.toolbarContainer,n=t.offsetLeft,s=t.offsetTop;for(;!t.parentElement.contains(e)||!/^(BODY|HTML)$/i.test(t.parentElement.nodeName);)t=t.offsetParent,n+=t.offsetLeft,s+=t.offsetTop;i.style.left=i.offsetLeft-n+l.offsetLeft+"px",i.style.top=i.offsetTop-s+l.offsetTop+"px"}i.style.visibility=""},_setToolbarOffset:function(t,n,i,o,l,c,u,h,p){const f=i.offsetWidth,g=n.noText&&!t?0:i.offsetHeight,m=(t?n.left:n.right)-o-f/2+c,v=m+f-l;let y=(t?n.top-g-p:n.bottom+p)-(n.noText?0:h)+u,b=m<0?1:v<0?m:m-v-1-1,_=!1;const w=y+(t?d._getEditorOffsets(null).top:i.offsetHeight-e.element.wysiwyg.offsetHeight);!t&&w>0&&d._getPageBottomSpace()<w?(t=!0,_=!0):t&&s.documentElement.offsetTop>w&&(t=!1,_=!0),_&&(y=(t?n.top-g-p:n.bottom+p)-(n.noText?0:h)+u),i.style.left=r.Math.floor(b)+"px",i.style.top=r.Math.floor(y)+"px",t?(a.removeClass(e.element._arrow,"se-arrow-up"),a.addClass(e.element._arrow,"se-arrow-down"),e.element._arrow.style.top=g+"px"):(a.removeClass(e.element._arrow,"se-arrow-down"),a.addClass(e.element._arrow,"se-arrow-up"),e.element._arrow.style.top=-p+"px");const C=r.Math.floor(f/2+(m-b));e.element._arrow.style.left=(C+p>i.offsetWidth?i.offsetWidth-p:C<p?p:C)+"px"},_showToolbarInline:function(){if(!u._isInline)return;const t=e.element.toolbar;o.toolbarContainer?t.style.position="relative":t.style.position="absolute",t.style.visibility="hidden",t.style.display="block",u._inlineToolbarAttr.width=t.style.width=o.toolbarWidth,u._inlineToolbarAttr.top=t.style.top=(o.toolbarContainer?0:-1-t.offsetHeight)+"px","function"==typeof h.showInline&&h.showInline(t,e,u),d.onScroll_window(),u._inlineToolbarAttr.isShow=!0,t.style.visibility=""},_hideToolbar:function(){u._notHideToolbar||u._variable.isFullScreen||(e.element.toolbar.style.display="none",u._inlineToolbarAttr.isShow=!1)},onInput_wysiwyg:function(e){if(u.isReadOnly||u.isDisabled)return e.preventDefault(),e.stopPropagation(),u.history.go(u.history.getCurrentIndex()),!1;u._editorRange();const t=(null===e.data?"":void 0===e.data?" ":e.data)||"";if(!u._charCount(t))return e.preventDefault(),e.stopPropagation(),!1;"function"==typeof h.onInput&&!1===h.onInput(e,u)||u.history.push(!0)},_isUneditableNode:function(e,t){const n=t?e.startContainer:e.endContainer,i=t?e.startOffset:e.endOffset,o=t?"previousSibling":"nextSibling";let l;return 1===n.nodeType?(l=d._isUneditableNode_getSibling(n.childNodes[i],o,n),l&&1===l.nodeType&&"false"===l.getAttribute("contenteditable")):(l=d._isUneditableNode_getSibling(n,o,n),u.isEdgePoint(n,i,t?"front":"end")&&l&&1===l.nodeType&&"false"===l.getAttribute("contenteditable"))},_isUneditableNode_getSibling:function(e,t,n){if(!e)return null;let i=e[t];if(!i){if(i=a.getFormatElement(n),i=i?i[t]:null,!i||a.isComponent(i))return null;i="previousSibling"===t?i.firstElementChild:i.lastElementChild}return i},_onShortcutKey:!1,onKeyDown_wysiwyg:function(t){const n=t.keyCode,i=t.shiftKey,l=t.ctrlKey||t.metaKey||91===n||92===n||224===n,s=t.altKey;if(d._IEisComposing=229===n,!l&&u.isReadOnly&&!d._directionKeyCode.test(n))return t.preventDefault(),!1;if(u.submenuOff(),u._isBalloon&&d._hideToolbar(),"function"==typeof h.onKeyDown&&!1===h.onKeyDown(t,u))return;if(l&&d._shortcutCommand(n,i))return d._onShortcutKey=!0,t.preventDefault(),t.stopPropagation(),!1;d._onShortcutKey&&(d._onShortcutKey=!1);let c=u.getSelectionNode();const p=u.getRange(),f=!p.collapsed||p.startContainer!==p.endContainer,g=u._fileManager.pluginRegExp.test(u.currentControllerName)?u.currentControllerName:"";let m=a.getFormatElement(c,null)||c,v=a.getRangeFormatElement(m,null);switch(n){case 8:if(!f&&g){t.preventDefault(),t.stopPropagation(),u.plugins[g].destroy.call(u);break}if(f&&d._hardDelete()){t.preventDefault(),t.stopPropagation();break}if(!a.isFormatElement(m)&&!e.element.wysiwyg.firstElementChild&&!a.isComponent(c)&&null!==u._setDefaultFormat(o.defaultTag))return t.preventDefault(),t.stopPropagation(),!1;if(!f&&!m.previousElementSibling&&0===p.startOffset&&!c.previousSibling&&!a.isListCell(m)&&a.isFormatElement(m)&&(!a.isFreeFormatElement(m)||a.isClosureFreeFormatElement(m))){if(a.isClosureRangeFormatElement(m.parentNode))return t.preventDefault(),t.stopPropagation(),!1;if(a.isWysiwygDiv(m.parentNode)&&m.childNodes.length<=1&&(!m.firstChild||a.onlyZeroWidthSpace(m.textContent))){if(t.preventDefault(),t.stopPropagation(),m.nodeName.toUpperCase()===o.defaultTag.toUpperCase()){m.innerHTML="<br>";const e=m.attributes;for(;e[0];)m.removeAttribute(e[0].name)}else{const e=a.createElement(o.defaultTag);e.innerHTML="<br>",m.parentElement.replaceChild(e,m)}return u.nativeFocus(),!1}}if(m&&p.startContainer===p.endContainer&&3===c.nodeType&&!a.isFormatElement(c.parentNode)&&(p.collapsed?1===c.textContent.length:p.endOffset-p.startOffset===c.textContent.length)){t.preventDefault();let e=null,n=c.parentNode.previousSibling;const i=c.parentNode.nextSibling;n||(i?(n=i,e=0):(n=a.createElement("BR"),m.appendChild(n))),c.textContent="",a.removeItemAllParents(c,null,m),e="number"==typeof e?e:3===n.nodeType?n.textContent.length:1,u.setRange(n,e,n,e);break}if(d._isUneditableNode(p,!0)){t.preventDefault(),t.stopPropagation();break}const n=p.commonAncestorContainer;if(m=a.getFormatElement(p.startContainer,null),v=a.getRangeFormatElement(m,null),v&&m&&!a.isCell(v)&&!/^FIGCAPTION$/i.test(v.nodeName)){if(a.isListCell(m)&&a.isList(v)&&(a.isListCell(v.parentNode)||m.previousElementSibling)&&(c===m||3===c.nodeType&&(!c.previousSibling||a.isList(c.previousSibling)))&&(a.getFormatElement(p.startContainer,null)!==a.getFormatElement(p.endContainer,null)?v.contains(p.startContainer):0===p.startOffset&&p.collapsed)){if(p.startContainer!==p.endContainer)t.preventDefault(),u.removeNode(),3===p.startContainer.nodeType&&u.setRange(p.startContainer,p.startContainer.textContent.length,p.startContainer,p.startContainer.textContent.length),u.history.push(!0);else{let e=m.previousElementSibling||v.parentNode;if(a.isListCell(e)){t.preventDefault();let n=e;if(!e.contains(m)&&a.isListCell(n)&&a.isList(n.lastElementChild)){for(n=n.lastElementChild.lastElementChild;a.isListCell(n)&&a.isList(n.lastElementChild);)n=n.lastElementChild&&n.lastElementChild.lastElementChild;e=n}let i=e===v.parentNode?v.previousSibling:e.lastChild;i||(i=a.createTextNode(a.zeroWidthSpace),v.parentNode.insertBefore(i,v.parentNode.firstChild));const o=3===i.nodeType?i.textContent.length:1,l=m.childNodes;let s=i,r=l[0];for(;r=l[0];)e.insertBefore(r,s.nextSibling),s=r;a.removeItem(m),0===v.children.length&&a.removeItem(v),u.setRange(i,o,i,o),u.history.push(!0)}}break}if(!f&&0===p.startOffset){let e=!0,i=n;for(;i&&i!==v&&!a.isWysiwygDiv(i);){if(i.previousSibling&&(1===i.previousSibling.nodeType||!a.onlyZeroWidthSpace(i.previousSibling.textContent.trim()))){e=!1;break}i=i.parentNode}if(e&&v.parentNode){t.preventDefault(),u.detachRangeFormatElement(v,a.isListCell(m)?[m]:null,null,!1,!1),u.history.push(!0);break}}}if(!f&&m&&(0===p.startOffset||c===m&&m.childNodes[p.startOffset])){const e=c===m?m.childNodes[p.startOffset]:c,i=m.previousSibling,o=(3===n.nodeType||a.isBreak(n))&&!n.previousSibling&&0===p.startOffset;if(!e.previousSibling&&(a.isComponent(n.previousSibling)||o&&a.isComponent(i))){const e=u.getFileComponent(i);e?(t.preventDefault(),t.stopPropagation(),0===m.textContent.length&&a.removeItem(m),!1===u.selectComponent(e.target,e.pluginName)&&u.blur()):a.isComponent(i)&&(t.preventDefault(),t.stopPropagation(),a.removeItem(i));break}if(a.isNonEditable(e.previousSibling)){t.preventDefault(),t.stopPropagation(),a.removeItem(e.previousSibling);break}}break;case 46:if(g){t.preventDefault(),t.stopPropagation(),u.plugins[g].destroy.call(u);break}if(f&&d._hardDelete()){t.preventDefault(),t.stopPropagation();break}if(d._isUneditableNode(p,!1)){t.preventDefault(),t.stopPropagation();break}if((a.isFormatElement(c)||null===c.nextSibling||a.onlyZeroWidthSpace(c.nextSibling)&&null===c.nextSibling.nextSibling)&&p.startOffset===c.textContent.length){const e=m.nextElementSibling;if(!e)break;if(a.isComponent(e)){if(t.preventDefault(),a.onlyZeroWidthSpace(m)&&(a.removeItem(m),a.isTable(e))){let t=a.getChildElement(e,a.isCell,!1);t=t.firstElementChild||t,u.setRange(t,0,t,0);break}const n=u.getFileComponent(e);n?(t.stopPropagation(),!1===u.selectComponent(n.target,n.pluginName)&&u.blur()):a.isComponent(e)&&(t.stopPropagation(),a.removeItem(e));break}}if(!f&&(u.isEdgePoint(p.endContainer,p.endOffset)||c===m&&m.childNodes[p.startOffset])){const e=c===m&&m.childNodes[p.startOffset]||c;if(e&&a.isNonEditable(e.nextSibling)){t.preventDefault(),t.stopPropagation(),a.removeItem(e.nextSibling);break}if(a.isComponent(e)){t.preventDefault(),t.stopPropagation(),a.removeItem(e);break}}if(m=a.getFormatElement(p.startContainer,null),v=a.getRangeFormatElement(m,null),a.isListCell(m)&&a.isList(v)&&(c===m||3===c.nodeType&&(!c.nextSibling||a.isList(c.nextSibling))&&(a.getFormatElement(p.startContainer,null)!==a.getFormatElement(p.endContainer,null)?v.contains(p.endContainer):p.endOffset===c.textContent.length&&p.collapsed))){p.startContainer!==p.endContainer&&u.removeNode();let e=a.getArrayItem(m.children,a.isList,!1);if(e=e||m.nextElementSibling||v.parentNode.nextElementSibling,e&&(a.isList(e)||a.getArrayItem(e.children,a.isList,!1))){let n,i;if(t.preventDefault(),a.isList(e)){const t=e.firstElementChild;for(i=t.childNodes,n=i[0];i[0];)m.insertBefore(i[0],e);a.removeItem(t)}else{for(n=e.firstChild,i=e.childNodes;i[0];)m.appendChild(i[0]);a.removeItem(e)}u.setRange(n,0,n,0),u.history.push(!0)}break}break;case 9:if(g||o.tabDisable)break;if(t.preventDefault(),l||s||a.isWysiwygDiv(c))break;const y=!p.collapsed||u.isEdgePoint(p.startContainer,p.startOffset),b=u.getSelectedElements(null);c=u.getSelectionNode();const _=[];let w=[],C=a.isListCell(b[0]),x=a.isListCell(b[b.length-1]),E={sc:p.startContainer,so:p.startOffset,ec:p.endContainer,eo:p.endOffset};for(let e,t=0,n=b.length;t<n;t++)if(e=b[t],a.isListCell(e)){if(!e.previousElementSibling&&!i)continue;_.push(e)}else w.push(e);if(_.length>0&&y&&u.plugins.list)E=u.plugins.list.editInsideList.call(u,i,_);else{const e=a.getParentElement(c,a.isCell);if(e&&y){const t=a.getParentElement(e,"table"),n=a.getListChildren(t,a.isCell);let o=i?a.prevIdx(n,e):a.nextIdx(n,e);o!==n.length||i||(o=0),-1===o&&i&&(o=n.length-1);let l=n[o];if(!l)break;l=l.firstElementChild||l,u.setRange(l,0,l,0);break}w=w.concat(_),C=x=null}if(w.length>0)if(i){const e=w.length-1;for(let t,n=0;n<=e;n++){t=w[n].childNodes;for(let e,n=0,i=t.length;n<i&&(e=t[n],e);n++)if(!a.onlyZeroWidthSpace(e)){/^\s{1,4}$/.test(e.textContent)?a.removeItem(e):/^\s{1,4}/.test(e.textContent)&&(e.textContent=e.textContent.replace(/^\s{1,4}/,""));break}}const t=a.getChildElement(w[0],"text",!1),n=a.getChildElement(w[e],"text",!0);!C&&t&&(E.sc=t,E.so=0),!x&&n&&(E.ec=n,E.eo=n.textContent.length)}else{const e=a.createTextNode(new r.Array(u._variable.tabSize+1).join(" "));if(1===w.length){const t=u.insertNode(e,null,!0);if(!t)return!1;C||(E.sc=e,E.so=t.endOffset),x||(E.ec=e,E.eo=t.endOffset)}else{const t=w.length-1;for(let n,i=0;i<=t;i++)n=w[i].firstChild,n&&(a.isBreak(n)?w[i].insertBefore(e.cloneNode(!1),n):n.textContent=e.textContent+n.textContent);const n=a.getChildElement(w[0],"text",!1),i=a.getChildElement(w[t],"text",!0);!C&&n&&(E.sc=n,E.so=0),!x&&i&&(E.ec=i,E.eo=i.textContent.length)}}u.setRange(E.sc,E.so,E.ec,E.eo),u.history.push(!1);break;case 13:const S=a.getFreeFormatElement(c,null);if(u._charTypeHTML){let e="";if(e=!i&&S||i?"<br>":"<"+m.nodeName+"><br></"+m.nodeName+">",!u.checkCharCount(e,"byte-html"))return t.preventDefault(),!1}if(!i){const e=u._isEdgeFormat(p.endContainer,p.endOffset,"end");if(e&&/^H[1-6]$/i.test(m.nodeName)||/^HR$/i.test(m.nodeName)){t.preventDefault();let n=null;const i=u.appendFormatTag(m,o.defaultTag);if(e&&e.length>0){n=e.pop();const t=n;for(;e.length>0;)n=n.appendChild(e.pop());i.appendChild(t)}n=n?n.appendChild(i.firstChild):i.firstChild,u.setRange(n,0,n,0);break}if(o.lineAttrReset&&m&&!a.isListCell(m)){let e;if(t.preventDefault(),t.stopPropagation(),p.collapsed)e=a.onlyZeroWidthSpace(m)?u.appendFormatTag(m,m.cloneNode(!1)):a.splitElement(p.endContainer,p.endOffset,0);else{const t=a.getFormatElement(p.startContainer,null)!==a.getFormatElement(p.endContainer,null),n=u.removeNode();if(t)if(e=a.getFormatElement(n.container,null),n.prevContainer)e!==m&&e.nextElementSibling===m&&(e=m);else{const t=m.cloneNode(!1);t.innerHTML="<br>",e.parentNode.insertBefore(t,e)}else e=a.splitElement(n.container,n.offset,0)}const n="*"===o.lineAttrReset?null:o.lineAttrReset,i=e.attributes;let l=0;for(;i[l];)n&&n.test(i[l].name)?l++:e.removeAttribute(i[l].name);u.setRange(e.firstChild,0,e.firstChild,0);break}if(S){t.preventDefault();const e=c===S,n=u.getSelection(),i=c.childNodes,o=n.focusOffset,l=c.previousElementSibling,s=c.nextSibling;if(!a.isClosureFreeFormatElement(S)&&i&&(e&&p.collapsed&&i.length-1<=o+1&&a.isBreak(i[o])&&(!i[o+1]||(!i[o+2]||a.onlyZeroWidthSpace(i[o+2].textContent))&&3===i[o+1].nodeType&&a.onlyZeroWidthSpace(i[o+1].textContent))&&o>0&&a.isBreak(i[o-1])||!e&&a.onlyZeroWidthSpace(c.textContent)&&a.isBreak(l)&&(a.isBreak(l.previousSibling)||!a.onlyZeroWidthSpace(l.previousSibling.textContent))&&(!s||!a.isBreak(s)&&a.onlyZeroWidthSpace(s.textContent)))){e?a.removeItem(i[o-1]):a.removeItem(c);const t=u.appendFormatTag(S,a.isFormatElement(S.nextElementSibling)&&!a.isRangeFormatElement(S.nextElementSibling)?S.nextElementSibling:null);a.copyFormatAttributes(t,S),u.setRange(t,1,t,1);break}if(e){h.insertHTML(p.collapsed&&a.isBreak(p.startContainer.childNodes[p.startOffset-1])?"<br>":"<br><br>",!0,!1);let e=n.focusNode;const t=n.focusOffset;S===e&&(e=e.childNodes[t-o>1?t-1:t]),u.setRange(e,1,e,1)}else{const e=n.focusNode.nextSibling,t=a.createElement("BR");u.insertNode(t,null,!1);const i=t.previousSibling,o=t.nextSibling;a.isBreak(e)||a.isBreak(i)||o&&!a.onlyZeroWidthSpace(o)?u.setRange(o,0,o,0):(t.parentNode.insertBefore(t.cloneNode(!1),t),u.setRange(t,1,t,1))}d._onShortcutKey=!0;break}}if(f)break;if(v&&m&&!a.isCell(v)&&!/^FIGCAPTION$/i.test(v.nodeName)){const e=u.getRange();if(u.isEdgePoint(e.endContainer,e.endOffset)&&a.isList(c.nextSibling)){t.preventDefault();const e=a.createElement("LI"),n=a.createElement("BR");e.appendChild(n),m.parentNode.insertBefore(e,m.nextElementSibling),e.appendChild(c.nextSibling),u.setRange(n,1,n,1);break}if((3!==e.commonAncestorContainer.nodeType||!e.commonAncestorContainer.nextElementSibling)&&a.onlyZeroWidthSpace(m.innerText.trim())){t.preventDefault();let e=null;if(a.isListCell(v.parentNode)){if(v=m.parentNode.parentNode.parentNode,e=a.splitElement(m,null,a.getElementDepth(m)-2),!e){const t=a.createElement("LI");t.innerHTML="<br>",v.insertBefore(t,e),e=t}}else{const t=a.isCell(v.parentNode)?"DIV":a.isList(v.parentNode)?"LI":a.isFormatElement(v.nextElementSibling)&&!a.isRangeFormatElement(v.nextElementSibling)?v.nextElementSibling.nodeName:a.isFormatElement(v.previousElementSibling)&&!a.isRangeFormatElement(v.previousElementSibling)?v.previousElementSibling.nodeName:o.defaultTag;e=a.createElement(t);const n=u.detachRangeFormatElement(v,[m],null,!0,!0);n.cc.insertBefore(e,n.ec)}e.innerHTML="<br>",a.removeItemAllParents(m,null,null),u.setRange(e,1,e,1);break}}if(v&&a.getParentElement(v,"FIGCAPTION")&&a.getParentElement(v,a.isList)&&(t.preventDefault(),m=u.appendFormatTag(m,null),u.setRange(m,0,m,0)),g){t.preventDefault(),t.stopPropagation();const n=e[g],i=n._container,l=i.previousElementSibling||i.nextElementSibling;let s=null;a.isListCell(i.parentNode)?s=a.createElement("BR"):(s=a.createElement(a.isFormatElement(l)&&!a.isRangeFormatElement(l)?l.nodeName:o.defaultTag),s.innerHTML="<br>"),i.parentNode.insertBefore(s,i),u.callPlugin(g,(function(){!1===u.selectComponent(n._element,g)&&u.blur()}),null)}break;case 27:if(g)return t.preventDefault(),t.stopPropagation(),u.controllersOff(),!1}if(i&&16===n){t.preventDefault(),t.stopPropagation();const e=u.plugins.table;if(e&&!e._shift&&!e._ref){const t=a.getParentElement(m,a.isCell);if(t)return void e.onTableCellMultiSelect.call(u,t,!0)}}else if(i&&(a.isOSX_IOS?s:l)&&32===n){t.preventDefault(),t.stopPropagation();const e=u.insertNode(a.createTextNode(" "));if(e&&e.container)return void u.setRange(e.container,e.endOffset,e.container,e.endOffset)}if(a.isIE&&!l&&!s&&!f&&!d._nonTextKeyCode.test(n)&&a.isBreak(p.commonAncestorContainer)){const e=a.createTextNode(a.zeroWidthSpace);u.insertNode(e,null,!1),u.setRange(e,1,e,1)}},onKeyUp_wysiwyg:function(e){if(d._onShortcutKey)return;u._editorRange();const t=e.keyCode,n=e.ctrlKey||e.metaKey||91===t||92===t||224===t,i=e.altKey;if(u.isReadOnly)return void(!n&&d._directionKeyCode.test(t)&&d._applyTagEffects());const l=u.getRange();let s=u.getSelectionNode();if(u._isBalloon&&(u._isBalloonAlways&&27!==t||!l.collapsed)){if(!u._isBalloonAlways)return void d._showToolbarBalloon();27!==t&&d._showToolbarBalloonDelay()}if(8===t&&a.isWysiwygDiv(s)&&""===s.textContent&&0===s.children.length){e.preventDefault(),e.stopPropagation(),s.innerHTML="";const t=a.createElement(a.isFormatElement(u._variable.currentNodes[0])?u._variable.currentNodes[0]:o.defaultTag);return t.innerHTML="<br>",s.appendChild(t),u.setRange(t,0,t,0),d._applyTagEffects(),void u.history.push(!1)}const r=a.getFormatElement(s,null),c=a.getRangeFormatElement(s,null);r||!l.collapsed||a.isComponent(s)||a.isList(s)||null===u._setDefaultFormat(a.isRangeFormatElement(c)?"DIV":o.defaultTag)||(s=u.getSelectionNode()),d._directionKeyCode.test(t)&&d._applyTagEffects();if(!n&&!i&&!d._nonTextKeyCode.test(t)&&3===s.nodeType&&a.zeroWidthRegExp.test(s.textContent)&&!(void 0!==e.isComposing?e.isComposing:d._IEisComposing)){let e=l.startOffset,t=l.endOffset;const n=(s.textContent.substring(0,t).match(d._frontZeroWidthReg)||"").length;e=l.startOffset-n,t=l.endOffset-n,s.textContent=s.textContent.replace(a.zeroWidthRegExp,""),u.setRange(s,e<0?0:e,s,t<0?0:t)}u._charCount(""),"function"==typeof h.onKeyUp&&!1===h.onKeyUp(e,u)||n||i||d._historyIgnoreKeyCode.test(t)||u.history.push(!0)},onScroll_wysiwyg:function(e){u.controllersOff(),u._isBalloon&&d._hideToolbar(),"function"==typeof h.onScroll&&h.onScroll(e,u)},onFocus_wysiwyg:function(e){u._antiBlur||(u.hasFocus=!0,r.setTimeout(d._applyTagEffects),u._isInline&&d._showToolbarInline(),"function"==typeof h.onFocus&&h.onFocus(e,u))},onBlur_wysiwyg:function(t){u._antiBlur||u._variable.isCodeView||(u.hasFocus=!1,u.effectNode=null,u.controllersOff(),(u._isInline||u._isBalloon)&&d._hideToolbar(),u._setKeyEffect([]),u._variable.currentNodes=[],u._variable.currentNodesMap=[],o.showPathLabel&&(e.element.navigation.textContent=""),"function"==typeof h.onBlur&&h.onBlur(t,u))},onMouseDown_resizingBar:function(t){t.stopPropagation(),u.submenuOff(),u.controllersOff(),u._variable.resizeClientY=t.clientY,e.element.resizeBackground.style.display="block",s.addEventListener("mousemove",d._resize_editor),s.addEventListener("mouseup",(function t(){e.element.resizeBackground.style.display="none",s.removeEventListener("mousemove",d._resize_editor),s.removeEventListener("mouseup",t)}))},_resize_editor:function(t){const n=e.element.editorArea.offsetHeight+(t.clientY-u._variable.resizeClientY),i=n<u._variable.minResizingSize?u._variable.minResizingSize:n;e.element.wysiwygFrame.style.height=e.element.code.style.height=i+"px",u._variable.resizeClientY=t.clientY,a.isIE&&u.__callResizeFunction(i,null)},onResize_window:function(){if(a.isIE&&u.resetResponsiveToolbar(),0!==e.element.toolbar.offsetWidth){if(e.fileBrowser&&"block"===e.fileBrowser.area.style.display&&(e.fileBrowser.body.style.maxHeight=r.innerHeight-e.fileBrowser.header.offsetHeight-50+"px"),u.submenuActiveButton&&u.submenu&&u._setMenuPosition(u.submenuActiveButton,u.submenu),u._variable.isFullScreen)return u._variable.innerHeight_fullScreen+=r.innerHeight-e.element.toolbar.offsetHeight-u._variable.innerHeight_fullScreen,void(e.element.editorArea.style.height=u._variable.innerHeight_fullScreen+"px");u._variable.isCodeView&&u._isInline?d._showToolbarInline():(u._iframeAutoHeight(),u._sticky&&(e.element.toolbar.style.width=e.element.topArea.offsetWidth-2+"px",d.onScroll_window()))}},onScroll_window:function(){if(u._variable.isFullScreen||0===e.element.toolbar.offsetWidth||o.stickyToolbar<0)return;const t=e.element,n=t.editorArea.offsetHeight,i=(this.scrollY||s.documentElement.scrollTop)+o.stickyToolbar,l=d._getEditorOffsets(o.toolbarContainer).top-(u._isInline?t.toolbar.offsetHeight:0),r=u._isInline&&i-l>0?i-l-e.element.toolbar.offsetHeight:0;i<l?d._offStickyToolbar():i+u._variable.minResizingSize>=n+l?(u._sticky||d._onStickyToolbar(r),t.toolbar.style.top=r+n+l+o.stickyToolbar-i-u._variable.minResizingSize+"px"):i>=l&&d._onStickyToolbar(r)},_getEditorOffsets:function(t){let n=t||e.element.topArea,i=0,o=0,l=0;for(;n;)i+=n.offsetTop,o+=n.offsetLeft,l+=n.scrollTop,n=n.offsetParent;return{top:i,left:o,scroll:l}},_getPageBottomSpace:function(){return s.documentElement.scrollHeight-(d._getEditorOffsets(null).top+e.element.topArea.offsetHeight)},_onStickyToolbar:function(t){const n=e.element;u._isInline||o.toolbarContainer||(n._stickyDummy.style.height=n.toolbar.offsetHeight+"px",n._stickyDummy.style.display="block"),n.toolbar.style.top=o.stickyToolbar+t+"px",n.toolbar.style.width=u._isInline?u._inlineToolbarAttr.width:n.toolbar.offsetWidth+"px",a.addClass(n.toolbar,"se-toolbar-sticky"),u._sticky=!0},_offStickyToolbar:function(){const t=e.element;t._stickyDummy.style.display="none",t.toolbar.style.top=u._isInline?u._inlineToolbarAttr.top:"",t.toolbar.style.width=u._isInline?u._inlineToolbarAttr.width:"",t.editorArea.style.marginTop="",a.removeClass(t.toolbar,"se-toolbar-sticky"),u._sticky=!1},_codeViewAutoHeight:function(){u._variable.isFullScreen||(e.element.code.style.height=e.element.code.scrollHeight+"px")},_hardDelete:function(){const e=u.getRange(),t=e.startContainer,n=e.endContainer,i=a.getRangeFormatElement(t),o=a.getRangeFormatElement(n),l=a.isCell(i),s=a.isCell(o),r=e.commonAncestorContainer;if((l&&!i.previousElementSibling&&!i.parentElement.previousElementSibling||s&&!o.nextElementSibling&&!o.parentElement.nextElementSibling)&&i!==o)if(l){if(s)return a.removeItem(a.getParentElement(i,(function(e){return r===e.parentNode}))),u.nativeFocus(),!0;a.removeItem(a.getParentElement(i,(function(e){return r===e.parentNode})))}else a.removeItem(a.getParentElement(o,(function(e){return r===e.parentNode})));const c=1===t.nodeType?a.getParentElement(t,".se-component"):null,d=1===n.nodeType?a.getParentElement(n,".se-component"):null;return c&&a.removeItem(c),d&&a.removeItem(d),!1},onPaste_wysiwyg:function(e){console.log(u._wd),document.dispatchEvent(O),e.preventDefault(),e.stopPropagation();if(!(a.isIE?r.clipboardData:e.clipboardData))return!0;z.parse(e,(function(e){console.log("USING CUSTOM PARSER"),u._wd.execCommand("insertHTML",!1,e.html),document.dispatchEvent(R)}))},_setClipboardComponent:function(e,t,n){e.preventDefault(),e.stopPropagation(),n.setData("text/html",t.component.outerHTML)},onCopy_wysiwyg:function(e){const t=a.isIE?r.clipboardData:e.clipboardData;if("function"==typeof h.onCopy&&!h.onCopy(e,t,u))return e.preventDefault(),e.stopPropagation(),!1;const n=u.currentFileComponentInfo;n&&!a.isIE&&(d._setClipboardComponent(e,n,t),a.addClass(n.component,"se-component-copy"),r.setTimeout((function(){a.removeClass(n.component,"se-component-copy")}),150))},onSave_wysiwyg:function(e){"function"!=typeof h.onSave||h.onSave(e,u)},onCut_wysiwyg:function(e){const t=a.isIE?r.clipboardData:e.clipboardData;if("function"==typeof h.onCut&&!h.onCut(e,t,u))return e.preventDefault(),e.stopPropagation(),!1;const n=u.currentFileComponentInfo;n&&!a.isIE&&(d._setClipboardComponent(e,n,t),a.removeItem(n.component),u.controllersOff()),r.setTimeout((function(){u.history.push(!1)}))},onDrop_wysiwyg:function(e){if(u.isReadOnly||a.isIE)return e.preventDefault(),e.stopPropagation(),!1;const t=e.dataTransfer;return!t||(u.removeNode(),d._setDropLocationSelection(e),d._dataTransferAction("drop",e,t))},_setDropLocationSelection:function(e){if(e.rangeParent)u.setRange(e.rangeParent,e.rangeOffset,e.rangeParent,e.rangeOffset);else if(u._wd.caretRangeFromPoint){const t=u._wd.caretRangeFromPoint(e.clientX,e.clientY);u.setRange(t.startContainer,t.startOffset,t.endContainer,t.endOffset)}else{const e=u.getRange();u.setRange(e.startContainer,e.startOffset,e.endContainer,e.endOffset)}},_dataTransferAction:function(t,n,i){let o,l;if(a.isIE){o=i.getData("Text");const s=u.getRange(),c=a.createElement("DIV"),h={sc:s.startContainer,so:s.startOffset,ec:s.endContainer,eo:s.endOffset};return c.setAttribute("contenteditable",!0),c.style.cssText="position:absolute; top:0; left:0; width:1px; height:1px; overflow:hidden;",e.element.relative.appendChild(c),c.focus(),r.setTimeout((function(){l=c.innerHTML,a.removeItem(c),u.setRange(h.sc,h.so,h.ec,h.eo),d._setClipboardData(t,n,o,l,i)})),!0}if(o=i.getData("text/plain"),l=i.getData("text/html"),!1===d._setClipboardData(t,n,o,l,i))return n.preventDefault(),n.stopPropagation(),!1},_setClipboardData:function(e,t,n,i,o){const l=/class=["']*Mso(Normal|List)/i.test(i)||/content=["']*Word.Document/i.test(i)||/content=["']*OneNote.File/i.test(i)||/content=["']*Excel.Sheet/i.test(i);!i?i=a._HTMLConvertor(n).replace(/\n/g,"<br>"):(i=i.replace(/^<html>\r?\n?<body>\r?\n?\x3C!--StartFragment--\>|\x3C!--EndFragment-->\r?\n?<\/body\>\r?\n?<\/html>$/g,""),l?(i=i.replace(/\n/g," "),n=n.replace(/\n/g," ")):i=(n===i?n:i).replace(/\n/g,"<br>"),i=u.cleanHTML(i,u.pasteTagsWhitelistRegExp,u.pasteTagsBlacklistRegExp));const s=u._charCount(u._charTypeHTML?i:n);if("paste"===e&&"function"==typeof h.onPaste){const e=h.onPaste(t,i,s,u);if(!e)return!1;"string"==typeof e&&(i=e)}if("drop"===e&&"function"==typeof h.onDrop){const e=h.onDrop(t,i,s,u);if(!e)return!1;"string"==typeof e&&(i=e)}const r=o.files;return r.length>0&&!l?(/^image/.test(r[0].type)&&u.plugins.image&&h.insertImage(r),!1):!!s&&(i?(h.insertHTML(i,!0,!1),!1):void 0)},onMouseMove_wysiwyg:function(t){if(u.isDisabled||u.isReadOnly)return!1;const n=a.getParentElement(t.target,a.isComponent),i=u._lineBreaker.style;if(n&&!u.currentControllerName){const l=e.element;let s=0,r=l.wysiwyg;do{s+=r.scrollTop,r=r.parentElement}while(r&&!/^(BODY|HTML)$/i.test(r.nodeName));const c=l.wysiwyg.scrollTop,h=d._getEditorOffsets(null),p=a.getOffset(n,l.wysiwygFrame).top+c,f=t.pageY+s+(o.iframe&&!o.toolbarContainer?l.toolbar.offsetHeight:0),g=p+(o.iframe?s:h.top),m=a.isListCell(n.parentNode);let v="",y="";if((m?!n.previousSibling:!a.isFormatElement(n.previousElementSibling))&&f<g+20)y=p,v="t";else{if((m?n.nextSibling:a.isFormatElement(n.nextElementSibling))||!(f>g+n.offsetHeight-20))return void(i.display="none");y=p+n.offsetHeight,v="b"}u._variable._lineBreakComp=n,u._variable._lineBreakDir=v,i.top=y-c+"px",u._lineBreakerButton.style.left=a.getOffset(n).left+n.offsetWidth/2-15+"px",i.display="block"}else"none"!==i.display&&(i.display="none")},_onMouseDown_lineBreak:function(e){e.preventDefault()},_onLineBreak:function(e){e.preventDefault();const t=u._variable._lineBreakComp,n=this?this:u._variable._lineBreakDir,i=a.isListCell(t.parentNode),l=a.createElement(i?"BR":a.isCell(t.parentNode)?"DIV":o.defaultTag);if(i||(l.innerHTML="<br>"),u._charTypeHTML&&!u.checkCharCount(l.outerHTML,"byte-html"))return;t.parentNode.insertBefore(l,"t"===n?t:t.nextSibling),u._lineBreaker.style.display="none",u._variable._lineBreakComp=null;const s=i?l:l.firstChild;u.setRange(s,1,s,1),u.history.push(!1)},_resizeObserver:null,_toolbarObserver:null,_addEvent:function(){const t=o.iframe?u._ww:e.element.wysiwyg;a.isIE||(this._resizeObserver=new r.ResizeObserver((function(e){u.__callResizeFunction(-1,e[0])}))),e.element.toolbar.addEventListener("mousedown",d._buttonsEventHandler,!1),e.element._menuTray.addEventListener("mousedown",d._buttonsEventHandler,!1),e.element.toolbar.addEventListener("click",d.onClick_toolbar,!1),t.addEventListener("mousedown",d.onMouseDown_wysiwyg,!1),t.addEventListener("click",d.onClick_wysiwyg,!1),t.addEventListener(a.isIE?"textinput":"input",d.onInput_wysiwyg,!1),t.addEventListener("keydown",d.onKeyDown_wysiwyg,!1),t.addEventListener("keyup",d.onKeyUp_wysiwyg,!1),t.addEventListener("paste",d.onPaste_wysiwyg,!1),t.addEventListener("copy",d.onCopy_wysiwyg,!1),t.addEventListener("cut",d.onCut_wysiwyg,!1),t.addEventListener("drop",d.onDrop_wysiwyg,!1),t.addEventListener("scroll",d.onScroll_wysiwyg,!1),t.addEventListener("focus",d.onFocus_wysiwyg,!1),t.addEventListener("blur",d.onBlur_wysiwyg,!1),d._lineBreakerBind={a:d._onLineBreak.bind(""),t:d._onLineBreak.bind("t"),b:d._onLineBreak.bind("b")},t.addEventListener("mousemove",d.onMouseMove_wysiwyg,!1),u._lineBreakerButton.addEventListener("mousedown",d._onMouseDown_lineBreak,!1),u._lineBreakerButton.addEventListener("click",d._lineBreakerBind.a,!1),e.element.lineBreaker_t.addEventListener("mousedown",d._lineBreakerBind.t,!1),e.element.lineBreaker_b.addEventListener("mousedown",d._lineBreakerBind.b,!1),u.plugins.table&&t.addEventListener("touchstart",d.onMouseDown_wysiwyg,{passive:!0,useCapture:!1}),"auto"!==o.height||o.codeMirrorEditor||(e.element.code.addEventListener("keydown",d._codeViewAutoHeight,!1),e.element.code.addEventListener("keyup",d._codeViewAutoHeight,!1),e.element.code.addEventListener("paste",d._codeViewAutoHeight,!1)),e.element.resizingBar&&(/\d+/.test(o.height)&&o.resizeEnable?e.element.resizingBar.addEventListener("mousedown",d.onMouseDown_resizingBar,!1):a.addClass(e.element.resizingBar,"se-resizing-none")),d._setResponsiveToolbar(),a.isIE||(this._toolbarObserver=new r.ResizeObserver(u.resetResponsiveToolbar)),r.addEventListener("resize",d.onResize_window,!1),o.stickyToolbar>-1&&r.addEventListener("scroll",d.onScroll_window,!1)},_removeEvent:function(){const t=o.iframe?u._ww:e.element.wysiwyg;e.element.toolbar.removeEventListener("mousedown",d._buttonsEventHandler),e.element._menuTray.removeEventListener("mousedown",d._buttonsEventHandler),e.element.toolbar.removeEventListener("click",d.onClick_toolbar),t.removeEventListener("mousedown",d.onMouseDown_wysiwyg),t.removeEventListener("click",d.onClick_wysiwyg),t.removeEventListener(a.isIE?"textinput":"input",d.onInput_wysiwyg),t.removeEventListener("keydown",d.onKeyDown_wysiwyg),t.removeEventListener("keyup",d.onKeyUp_wysiwyg),t.removeEventListener("paste",d.onPaste_wysiwyg),t.removeEventListener("copy",d.onCopy_wysiwyg),t.removeEventListener("cut",d.onCut_wysiwyg),t.removeEventListener("drop",d.onDrop_wysiwyg),t.removeEventListener("scroll",d.onScroll_wysiwyg),t.removeEventListener("mousemove",d.onMouseMove_wysiwyg),u._lineBreakerButton.removeEventListener("mousedown",d._onMouseDown_lineBreak),u._lineBreakerButton.removeEventListener("click",d._lineBreakerBind.a),e.element.lineBreaker_t.removeEventListener("mousedown",d._lineBreakerBind.t),e.element.lineBreaker_b.removeEventListener("mousedown",d._lineBreakerBind.b),d._lineBreakerBind=null,t.removeEventListener("touchstart",d.onMouseDown_wysiwyg,{passive:!0,useCapture:!1}),t.removeEventListener("focus",d.onFocus_wysiwyg),t.removeEventListener("blur",d.onBlur_wysiwyg),e.element.code.removeEventListener("keydown",d._codeViewAutoHeight),e.element.code.removeEventListener("keyup",d._codeViewAutoHeight),e.element.code.removeEventListener("paste",d._codeViewAutoHeight),e.element.resizingBar&&e.element.resizingBar.removeEventListener("mousedown",d.onMouseDown_resizingBar),d._resizeObserver&&(d._resizeObserver.unobserve(e.element.wysiwygFrame),d._resizeObserver=null),d._toolbarObserver&&(d._toolbarObserver.unobserve(e.element._toolbarShadow),d._toolbarObserver=null),r.removeEventListener("resize",d.onResize_window),r.removeEventListener("scroll",d.onScroll_window)},_setResponsiveToolbar:function(){if(0===l.length)return void(l=null);d._responsiveCurrentSize="default";const e=d._responsiveButtonSize=[],t=d._responsiveButtons={default:l[0]};for(let n,i,o=1,s=l.length;o<s;o++)i=l[o],n=1*i[0],e.push(n),t[n]=i[1];e.sort((function(e,t){return e-t})).unshift("default")}},h={core:u,util:a,onload:null,onScroll:null,onMouseDown:null,onClick:null,onInput:null,onKeyDown:null,onKeyUp:null,onCopy:null,onCut:null,onFocus:null,onBlur:null,onChange:null,onSave:null,onDrop:null,onPaste:null,showInline:null,showController:null,toggleCodeView:null,toggleFullScreen:null,imageUploadHandler:null,videoUploadHandler:null,audioUploadHandler:null,onImageUploadBefore:null,onVideoUploadBefore:null,onAudioUploadBefore:null,onImageUpload:null,onVideoUpload:null,onAudioUpload:null,onImageUploadError:null,onVideoUploadError:null,onAudioUploadError:null,onResizeEditor:null,onSetToolbarButtons:null,setToolbarButtons:function(t){u.submenuOff(),u.containerOff(),u.moreLayerOff();const n=A._createToolBar(s,t,u.plugins,o);l=n.responsiveButtons,d._setResponsiveToolbar(),e.element.toolbar.replaceChild(n._buttonTray,e.element._buttonTray);const i=B(e.element.originElement,u._getConstructed(e.element),o);e.element=i.element,e.tool=i.tool,o.iframe&&(e.element.wysiwyg=u._wd.body),u._recoverButtonStates(),u._cachingButtons(),u.history._resetCachingButton(),u.effectNode=null,u.hasFocus&&d._applyTagEffects(),u.isReadOnly&&a.setDisabledButtons(!0,u.resizingDisabledButtons),"function"==typeof h.onSetToolbarButtons&&h.onSetToolbarButtons(n._buttonTray.querySelectorAll("button"),u)},setOptions:function(s){d._removeEvent(),u._resetComponents(),a.removeClass(u._styleCommandMap.showBlocks,"active"),a.removeClass(u._styleCommandMap.codeView,"active"),u._variable.isCodeView=!1,u._iframeAuto=null,u.plugins=s.plugins||u.plugins;const c=[o,s].reduce((function(e,t){for(let n in t)if(a.hasOwn(t,n))if("plugins"===n&&t[n]&&e[n]){let i=e[n],o=t[n];i=i.length?i:r.Object.keys(i).map((function(e){return i[e]})),o=o.length?o:r.Object.keys(o).map((function(e){return o[e]})),e[n]=o.filter((function(e){return-1===i.indexOf(e)})).concat(i)}else e[n]=t[n];return e}),{}),h=e.element,p=h.wysiwyg.innerHTML,f=A._setOptions(c,e,o);f.callButtons&&(t=f.callButtons,u.initPlugins={}),f.plugins&&(u.plugins=n=f.plugins),0===h._menuTray.children.length&&(this._menuTray={}),l=f.toolbar.responsiveButtons,u.options=o=c,u.lang=i=o.lang,o.iframe&&h.wysiwygFrame.addEventListener("load",(function(){a._setIframeDocument(this,o),u._setOptionsInit(h,p)})),h.editorArea.appendChild(h.wysiwygFrame),o.iframe||u._setOptionsInit(h,p)},setDefaultStyle:function(t){const n=o._editorStyles=a._setDefaultOptionStyle(o,t),i=e.element;i.topArea.style.cssText=n.top,i.code.style.cssText=o._editorStyles.frame,i.code.style.display="none","auto"===o.height?i.code.style.overflow="hidden":i.code.style.overflow="",o.iframe?(i.wysiwygFrame.style.cssText=n.frame,i.wysiwyg.style.cssText=n.editor):i.wysiwygFrame.style.cssText=n.frame+n.editor},noticeOpen:function(e){u.notice.open.call(u,e)},noticeClose:function(){u.notice.close.call(u)},save:function(){const t=u.getContents(!1);e.element.originElement.value=t,d.onSave_wysiwyg(t,u)},getContext:function(){return e},getContents:function(e){return u.getContents(e)},getText:function(){return e.element.wysiwyg.textContent},getCharCount:function(t){return t="string"==typeof t?t:o.charCounterType,u.getCharLength(u._charTypeHTML?e.element.wysiwyg.innerHTML:e.element.wysiwyg.textContent,t)},getImagesInfo:function(){return e.image?e.image._infoList:[]},getFilesInfo:function(t){return e[t]?e[t]._infoList:[]},insertImage:function(e){u.plugins.image&&e&&(u.initPlugins.image?u.plugins.image.submitAction.call(u,e):u.callPlugin("image",u.plugins.image.submitAction.bind(u,e),null),u.focus())},insertHTML:function(t,n,i,o){if(e.element.wysiwygFrame.contains(u.getSelection().focusNode)||u.focus(),"string"==typeof t){n||(t=u.cleanHTML(t,null,null));try{if(a.isListCell(a.getFormatElement(u.getSelectionNode(),null))){const e=s.createRange().createContextualFragment(t).childNodes;u._isFormatData(e)&&(t=u._convertListCell(e))}const e=s.createRange().createContextualFragment(t).childNodes;if(i){const t=u._charTypeHTML?"outerHTML":"textContent";let n="";for(let i=0,o=e.length;i<o;i++)n+=e[i][t];if(!u.checkCharCount(n,null))return}let n,l,r,c,d;for(;n=e[0];)c&&3===c.nodeType&&l&&1===l.nodeType&&a.isBreak(n)?(c=n,a.removeItem(n)):(r=u.insertNode(n,l,!1),l=r.container||r,d||(d=r),c=n);3===c.nodeType&&1===l.nodeType&&(l=c);const h=3===l.nodeType?r.endOffset||l.textContent.length:l.childNodes.length;o?u.setRange(d.container||d,d.startOffset||0,l,h):u.setRange(l,h,l,h)}catch(e){if(u.isDisabled||u.isReadOnly)return;console.warn("[SUNEDITOR.insertHTML.fail] "+e),u.execCommand("insertHTML",!1,t)}}else if(a.isComponent(t))u.insertComponent(t,!1,i,!1);else{let e=null;(a.isFormatElement(t)||a.isMedia(t))&&(e=a.getFormatElement(u.getSelectionNode(),null)),u.insertNode(t,e,i)}u.effectNode=null,u.focus(),u.history.push(!1)},setContents:function(e){u.setContents(e)},appendContents:function(t){const n=u.convertContentsForEditor(t);if(u._variable.isCodeView)u._setCodeView(u._getCodeView()+"\n"+u.convertHTMLForCodeView(n,!1));else{const t=a.createElement("DIV");t.innerHTML=n;const i=e.element.wysiwyg,o=t.children;for(let e=0,t=o.length;e<t;e++)o[e]&&i.appendChild(o[e])}u.history.push(!1)},readOnly:function(t){u.isReadOnly=t,a.setDisabledButtons(!!t,u.resizingDisabledButtons),t?(u.controllersOff(),u.submenuActiveButton&&u.submenuActiveButton.disabled&&u.submenuOff(),u._moreLayerActiveButton&&u._moreLayerActiveButton.disabled&&u.moreLayerOff(),u.containerActiveButton&&u.containerActiveButton.disabled&&u.containerOff(),u.modalForm&&u.plugins.dialog.close.call(u),e.element.code.setAttribute("readOnly","true"),a.addClass(e.element.wysiwygFrame,"se-read-only")):(e.element.code.removeAttribute("readOnly"),a.removeClass(e.element.wysiwygFrame,"se-read-only")),o.codeMirrorEditor&&o.codeMirrorEditor.setOption("readOnly",!!t)},disable:function(){this.toolbar.disable(),this.wysiwyg.disable()},disabled:function(){this.disable()},enable:function(){this.toolbar.enable(),this.wysiwyg.enable()},enabled:function(){this.enable()},show:function(){const t=e.element.topArea.style;"none"===t.display&&(t.display=o.display)},hide:function(){e.element.topArea.style.display="none"},destroy:function(){u.submenuOff(),u.containerOff(),u.controllersOff(),u.notice&&u.notice.close.call(u),u.modalForm&&u.plugins.dialog.close.call(u),u.history._destroy(),d._removeEvent(),a.removeItem(e.element.toolbar),a.removeItem(e.element.topArea);for(let e in u.functions)a.hasOwn(u,e)&&delete u.functions[e];for(let e in u)a.hasOwn(u,e)&&delete u[e];for(let e in d)a.hasOwn(d,e)&&delete d[e];for(let t in e)a.hasOwn(e,t)&&delete e[t];for(let e in t)a.hasOwn(t,e)&&delete t[e];for(let e in this)a.hasOwn(this,e)&&delete this[e]},toolbar:{disable:function(){u.submenuOff(),u.moreLayerOff(),u.containerOff(),e.tool.cover.style.display="block"},disabled:function(){this.disable()},enable:function(){e.tool.cover.style.display="none"},enabled:function(){this.enable()},show:function(){u._isInline?d._showToolbarInline():(e.element.toolbar.style.display="",e.element._stickyDummy.style.display="")},hide:function(){u._isInline?d._hideToolbar():(e.element.toolbar.style.display="none",e.element._stickyDummy.style.display="none")}},wysiwyg:{disable:function(){u.controllersOff(),u.modalForm&&u.plugins.dialog.close.call(u),e.element.wysiwyg.setAttribute("contenteditable",!1),u.isDisabled=!0,o.codeMirrorEditor?o.codeMirrorEditor.setOption("readOnly",!0):e.element.code.setAttribute("disabled","disabled")},enable:function(){e.element.wysiwyg.setAttribute("contenteditable",!0),u.isDisabled=!1,o.codeMirrorEditor?o.codeMirrorEditor.setOption("readOnly",!1):e.element.code.removeAttribute("disabled")}}};u.functions=h,u.options=o;let p=e.element,f=p.originElement,g=p.topArea;return f.style.display="none",g.style.display="block",o.iframe&&p.wysiwygFrame.addEventListener("load",(function(){a._setIframeDocument(this,o),u._editorInit(!1,o.value),o.value=null})),"object"==typeof f.nextElementSibling?f.parentNode.insertBefore(g,f.nextElementSibling):f.parentNode.appendChild(g),p.editorArea.appendChild(p.wysiwygFrame),p=f=g=null,o.iframe||(u._editorInit(!1,o.value),o.value=null),h}(B(i,o.constructed,o.options),o.pluginCallButtons,o.plugins,o.options.lang,t,o._responsiveButtons)}};window.SUNEDITOR||Object.defineProperty(window,"SUNEDITOR",{enumerable:!0,writable:!1,configurable:!1,value:H.init({plugins:E})})},ZED3:function(e,t,n){"use strict";var i,o;i="undefined"!=typeof window?window:this,o=function(e,t){const n={name:"component",set_container:function(e,t){const n=this.util.createElement("DIV");return n.className="se-component "+t,n.setAttribute("contenteditable",!1),n.appendChild(e),n},set_cover:function(e){const t=this.util.createElement("FIGURE");return t.appendChild(e),t},create_caption:function(){const e=this.util.createElement("FIGCAPTION");return e.setAttribute("contenteditable",!0),e.innerHTML="<div>"+this.lang.dialogBox.caption+"</div>",e}};return void 0===t&&(e.SUNEDITOR_MODULES||Object.defineProperty(e,"SUNEDITOR_MODULES",{enumerable:!0,writable:!1,configurable:!1,value:{}}),Object.defineProperty(e.SUNEDITOR_MODULES,"component",{enumerable:!0,writable:!1,configurable:!1,value:n})),n},"object"==typeof e.exports?e.exports=i.document?o(i,!0):function(e){if(!e.document)throw new Error("SUNEDITOR_MODULES a window with a document");return o(e)}:o(i)},ee5k:function(e,t,n){"use strict";var i,o;i="undefined"!=typeof window?window:this,o=function(e,t){const n={name:"resizing",add:function(e){const t=e.icons,n=e.context;n.resizing={_resizeClientX:0,_resizeClientY:0,_resize_plugin:"",_resize_w:0,_resize_h:0,_origin_w:0,_origin_h:0,_rotateVertical:!1,_resize_direction:"",_move_path:null,_isChange:!1,alignIcons:{basic:t.align_justify,left:t.align_left,right:t.align_right,center:t.align_center}};let i=this.setController_resize(e);n.resizing.resizeContainer=i,n.resizing.resizeDiv=i.querySelector(".se-modal-resize"),n.resizing.resizeDot=i.querySelector(".se-resize-dot"),n.resizing.resizeDisplay=i.querySelector(".se-resize-display");let o=this.setController_button(e);n.resizing.resizeButton=o;let l=n.resizing.resizeHandles=n.resizing.resizeDot.querySelectorAll("span");n.resizing.resizeButtonGroup=o.querySelector("._se_resizing_btn_group"),n.resizing.rotationButtons=o.querySelectorAll("._se_resizing_btn_group ._se_rotation"),n.resizing.percentageButtons=o.querySelectorAll("._se_resizing_btn_group ._se_percentage"),n.resizing.alignMenu=o.querySelector(".se-resizing-align-list"),n.resizing.alignMenuList=n.resizing.alignMenu.querySelectorAll("button"),n.resizing.alignButton=o.querySelector("._se_resizing_align_button"),n.resizing.autoSizeButton=o.querySelector("._se_resizing_btn_group ._se_auto_size"),n.resizing.captionButton=o.querySelector("._se_resizing_caption_button"),i.addEventListener("mousedown",(function(e){e.preventDefault()})),l[0].addEventListener("mousedown",this.onMouseDown_resize_handle.bind(e)),l[1].addEventListener("mousedown",this.onMouseDown_resize_handle.bind(e)),l[2].addEventListener("mousedown",this.onMouseDown_resize_handle.bind(e)),l[3].addEventListener("mousedown",this.onMouseDown_resize_handle.bind(e)),l[4].addEventListener("mousedown",this.onMouseDown_resize_handle.bind(e)),l[5].addEventListener("mousedown",this.onMouseDown_resize_handle.bind(e)),l[6].addEventListener("mousedown",this.onMouseDown_resize_handle.bind(e)),l[7].addEventListener("mousedown",this.onMouseDown_resize_handle.bind(e)),o.addEventListener("click",this.onClick_resizeButton.bind(e)),n.element.relative.appendChild(i),n.element.relative.appendChild(o),i=null,o=null,l=null},setController_resize:function(e){const t=e.util.createElement("DIV");return t.className="se-controller se-resizing-container",t.style.display="none",t.innerHTML='<div class="se-modal-resize"></div><div class="se-resize-dot"><span class="tl"></span><span class="tr"></span><span class="bl"></span><span class="br"></span><span class="lw"></span><span class="th"></span><span class="rw"></span><span class="bh"></span><div class="se-resize-display"></div></div>',t},setController_button:function(e){const t=e.lang,n=e.icons,i=e.util.createElement("DIV");return i.className="se-controller se-controller-resizing",i.innerHTML='<div class="se-arrow se-arrow-up"></div><div class="se-btn-group _se_resizing_btn_group"><button type="button" data-command="percent" data-value="1" class="se-tooltip _se_percentage"><span>100%</span><span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.resize100+'</span></span></button><button type="button" data-command="percent" data-value="0.75" class="se-tooltip _se_percentage"><span>75%</span><span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.resize75+'</span></span></button><button type="button" data-command="percent" data-value="0.5" class="se-tooltip _se_percentage"><span>50%</span><span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.resize50+'</span></span></button><button type="button" data-command="auto" class="se-btn se-tooltip _se_auto_size">'+n.auto_size+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.autoSize+'</span></span></button><button type="button" data-command="rotate" data-value="-90" class="se-btn se-tooltip _se_rotation">'+n.rotate_left+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.rotateLeft+'</span></span></button><button type="button" data-command="rotate" data-value="90" class="se-btn se-tooltip _se_rotation">'+n.rotate_right+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.rotateRight+'</span></span></button></div><div class="se-btn-group" style="padding-top: 0;"><button type="button" data-command="mirror" data-value="h" class="se-btn se-tooltip">'+n.mirror_horizontal+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.mirrorHorizontal+'</span></span></button><button type="button" data-command="mirror" data-value="v" class="se-btn se-tooltip">'+n.mirror_vertical+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.mirrorVertical+'</span></span></button><button type="button" data-command="onalign" class="se-btn se-tooltip _se_resizing_align_button">'+n.align_justify+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.toolbar.align+'</span></span></button><div class="se-btn-group-sub sun-editor-common se-list-layer se-resizing-align-list"><div class="se-list-inner"><ul class="se-list-basic"><li><button type="button" class="se-btn-list se-tooltip" data-command="align" data-value="basic">'+n.align_justify+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.dialogBox.basic+'</span></span></button></li><li><button type="button" class="se-btn-list se-tooltip" data-command="align" data-value="left">'+n.align_left+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.dialogBox.left+'</span></span></button></li><li><button type="button" class="se-btn-list se-tooltip" data-command="align" data-value="center">'+n.align_center+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.dialogBox.center+'</span></span></button></li><li><button type="button" class="se-btn-list se-tooltip" data-command="align" data-value="right">'+n.align_right+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.dialogBox.right+'</span></span></button></li></ul></div></div><button type="button" data-command="caption" class="se-btn se-tooltip _se_resizing_caption_button">'+n.caption+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.dialogBox.caption+'</span></span></button><button type="button" data-command="revert" class="se-btn se-tooltip">'+n.revert+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.dialogBox.revertButton+'</span></span></button><button type="button" data-command="update" class="se-btn se-tooltip">'+n.modify+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.edit+'</span></span></button><button type="button" data-command="delete" class="se-btn se-tooltip">'+n.delete+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.remove+"</span></span></button></div>",i},_module_getSizeX:function(e,t,n,i){return t||(t=e._element),n||(n=e._cover),i||(i=e._container),t?/%$/.test(t.style.width)?(i&&this.util.getNumber(i.style.width,2)||100)+"%":t.style.width:""},_module_getSizeY:function(e,t,n,i){return t||(t=e._element),n||(n=e._cover),i||(i=e._container),i&&n?this.util.getNumber(n.style.paddingBottom,0)>0&&!this.context.resizing._rotateVertical?n.style.height:/%$/.test(t.style.height)&&/%$/.test(t.style.width)?(i&&this.util.getNumber(i.style.height,2)||100)+"%":t.style.height:t&&t.style.height||""},_module_setModifyInputSize:function(e,t){const n=e._onlyPercentage&&this.context.resizing._rotateVertical;e.proportion.checked=e._proportionChecked="false"!==e._element.getAttribute("data-proportion");let i=n?"":this.plugins.resizing._module_getSizeX.call(this,e);if(i===e._defaultSizeX&&(i=""),e._onlyPercentage&&(i=this.util.getNumber(i,2)),e.inputX.value=i,t.setInputSize.call(this,"x"),!e._onlyPercentage){let t=n?"":this.plugins.resizing._module_getSizeY.call(this,e);t===e._defaultSizeY&&(t=""),e._onlyPercentage&&(t=this.util.getNumber(t,2)),e.inputY.value=t}e.inputX.disabled=!!n,e.inputY.disabled=!!n,e.proportion.disabled=!!n,t.setRatio.call(this)},_module_setInputSize:function(e,t){if(e._onlyPercentage)"x"===t&&e.inputX.value>100&&(e.inputX.value=100);else if(e.proportion.checked&&e._ratio&&/\d/.test(e.inputX.value)&&/\d/.test(e.inputY.value)){const n=e.inputX.value.replace(/\d+|\./g,"")||e.sizeUnit,i=e.inputY.value.replace(/\d+|\./g,"")||e.sizeUnit;if(n!==i)return;const o="%"===n?2:0;"x"===t?e.inputY.value=this.util.getNumber(e._ratioY*this.util.getNumber(e.inputX.value,o),o)+i:e.inputX.value=this.util.getNumber(e._ratioX*this.util.getNumber(e.inputY.value,o),o)+n}},_module_setRatio:function(e){const t=e.inputX.value,n=e.inputY.value;if(e.proportion.checked&&/\d+/.test(t)&&/\d+/.test(n)){if((t.replace(/\d+|\./g,"")||e.sizeUnit)!==(n.replace(/\d+|\./g,"")||e.sizeUnit))e._ratio=!1;else if(!e._ratio){const i=this.util.getNumber(t,0),o=this.util.getNumber(n,0);e._ratio=!0,e._ratioX=i/o,e._ratioY=o/i}}else e._ratio=!1},_module_sizeRevert:function(e){e._onlyPercentage?e.inputX.value=e._origin_w>100?100:e._origin_w:(e.inputX.value=e._origin_w,e.inputY.value=e._origin_h)},_module_saveCurrentSize:function(e){const t=this.plugins.resizing._module_getSizeX.call(this,e),n=this.plugins.resizing._module_getSizeY.call(this,e);e._element.setAttribute("data-size",t+","+n),e._videoRatio&&(e._videoRatio=n)},call_controller_resize:function(e,t){const n=this.context.resizing,i=this.context[t];n._resize_plugin=t;const o=n.resizeContainer,l=n.resizeDiv,s=this.util.getOffset(e,this.context.element.wysiwygFrame),r=n._rotateVertical=/^(90|270)$/.test(Math.abs(e.getAttribute("data-rotate")).toString()),a=r?e.offsetHeight:e.offsetWidth,c=r?e.offsetWidth:e.offsetHeight,u=s.top,d=s.left-this.context.element.wysiwygFrame.scrollLeft;o.style.top=u+"px",o.style.left=d+"px",o.style.width=a+"px",o.style.height=c+"px",l.style.top="0px",l.style.left="0px",l.style.width=a+"px",l.style.height=c+"px";let h=e.getAttribute("data-align")||"basic";h="none"===h?"basic":h;const p=this.util.getParentElement(e,this.util.isComponent),f=this.util.getParentElement(e,"FIGURE"),g=this.plugins.resizing._module_getSizeX.call(this,i,e,f,p)||"auto",m=i._onlyPercentage&&"image"===t?"":", "+(this.plugins.resizing._module_getSizeY.call(this,i,e,f,p)||"auto");this.util.changeTxt(n.resizeDisplay,this.lang.dialogBox[h]+" ("+g+m+")"),n.resizeButtonGroup.style.display=i._resizing?"":"none";const v=!i._resizing||i._resizeDotHide||i._onlyPercentage?"none":"flex",y=n.resizeHandles;for(let e=0,t=y.length;e<t;e++)y[e].style.display=v;if(i._resizing){const e=n.rotationButtons;e[0].style.display=e[1].style.display=i._rotation?"":"none"}if(i._alignHide)n.alignButton.style.display="none";else{n.alignButton.style.display="";const e=n.alignMenuList;this.util.changeElement(n.alignButton.firstElementChild,n.alignIcons[h]);for(let t=0,n=e.length;t<n;t++)e[t].getAttribute("data-value")===h?this.util.addClass(e[t],"on"):this.util.removeClass(e[t],"on")}const b=n.percentageButtons,_=/%$/.test(e.style.width)&&/%$/.test(p.style.width)?this.util.getNumber(p.style.width,0)/100+"":"";for(let e=0,t=b.length;e<t;e++)b[e].getAttribute("data-value")===_?this.util.addClass(b[e],"active"):this.util.removeClass(b[e],"active");i._captionShow?(n.captionButton.style.display="",this.util.getChildElement(e.parentNode,"figcaption")?(this.util.addClass(n.captionButton,"active"),i._captionChecked=!0):(this.util.removeClass(n.captionButton,"active"),i._captionChecked=!1)):n.captionButton.style.display="none",o.style.display="block";const w={left:0,top:50};this.options.iframe&&(w.left-=this.context.element.wysiwygFrame.parentElement.offsetLeft,w.top-=this.context.element.wysiwygFrame.parentElement.offsetTop),this.setControllerPosition(n.resizeButton,o,"bottom",w),this.controllersOn(o,n.resizeButton,this.util.setDisabledButtons.bind(this.util,!1,this.resizingDisabledButtons),e,t),this.util.setDisabledButtons(!0,this.resizingDisabledButtons),n._resize_w=a,n._resize_h=c;const C=(e.getAttribute("origin-size")||"").split(",");return n._origin_w=C[0]||e.naturalWidth,n._origin_h=C[1]||e.naturalHeight,{w:a,h:c,t:u,l:d}},_closeAlignMenu:null,openAlignMenu:function(){const e=this.context.resizing.alignButton;this.util.addClass(e,"on"),this.context.resizing.alignMenu.style.top=e.offsetTop+e.offsetHeight+"px",this.context.resizing.alignMenu.style.left=e.offsetLeft-e.offsetWidth/2+"px",this.context.resizing.alignMenu.style.display="block",this.plugins.resizing._closeAlignMenu=function(){this.util.removeClass(this.context.resizing.alignButton,"on"),this.context.resizing.alignMenu.style.display="none",this.removeDocEvent("click",this.plugins.resizing._closeAlignMenu),this.plugins.resizing._closeAlignMenu=null}.bind(this),this.addDocEvent("click",this.plugins.resizing._closeAlignMenu)},onClick_resizeButton:function(e){e.stopPropagation();const t=e.target,n=t.getAttribute("data-command")||t.parentNode.getAttribute("data-command");if(!n)return;const i=t.getAttribute("data-value")||t.parentNode.getAttribute("data-value"),o=this.context.resizing._resize_plugin,l=this.context[o],s=l._element,r=this.plugins[o];if(e.preventDefault(),"function"!=typeof this.plugins.resizing._closeAlignMenu||(this.plugins.resizing._closeAlignMenu(),"onalign"!==n)){switch(n){case"auto":this.plugins.resizing.resetTransform.call(this,s),r.setAutoSize.call(this),this.selectComponent(s,o);break;case"percent":let e=this.plugins.resizing._module_getSizeY.call(this,l);if(this.context.resizing._rotateVertical){const t=s.getAttribute("data-percentage");t&&(e=t.split(",")[1])}this.plugins.resizing.resetTransform.call(this,s),r.setPercentSize.call(this,100*i,null!==this.util.getNumber(e,0)&&/%$/.test(e)?e:""),this.selectComponent(s,o);break;case"mirror":const t=s.getAttribute("data-rotate")||"0";let n=s.getAttribute("data-rotateX")||"",a=s.getAttribute("data-rotateY")||"";"h"===i&&!this.context.resizing._rotateVertical||"v"===i&&this.context.resizing._rotateVertical?a=a?"":"180":n=n?"":"180",s.setAttribute("data-rotateX",n),s.setAttribute("data-rotateY",a),this.plugins.resizing._setTransForm(s,t,n,a);break;case"rotate":const c=this.context.resizing,u=1*s.getAttribute("data-rotate")+1*i,d=this._w.Math.abs(u)>=360?0:u;s.setAttribute("data-rotate",d),c._rotateVertical=/^(90|270)$/.test(this._w.Math.abs(d).toString()),this.plugins.resizing.setTransformSize.call(this,s,null,null),this.selectComponent(s,o);break;case"onalign":return void this.plugins.resizing.openAlignMenu.call(this);case"align":const h="basic"===i?"none":i;r.setAlign.call(this,h,null,null,null),this.selectComponent(s,o);break;case"caption":const p=!l._captionChecked;if(r.openModify.call(this,!0),l._captionChecked=l.captionCheckEl.checked=p,r.update_image.call(this,!1,!1,!1),p){const e=this.util.getChildElement(l._caption,(function(e){return 3===e.nodeType}));e?this.setRange(e,0,e,e.textContent.length):l._caption.focus(),this.controllersOff()}else this.selectComponent(s,o),r.openModify.call(this,!0);break;case"revert":r.setOriginSize.call(this),this.selectComponent(s,o);break;case"update":r.openModify.call(this),this.controllersOff();break;case"delete":r.destroy.call(this)}this.history.push(!1)}},resetTransform:function(e){const t=(e.getAttribute("data-size")||e.getAttribute("data-origin")||"").split(",");this.context.resizing._rotateVertical=!1,e.style.maxWidth="",e.style.transform="",e.style.transformOrigin="",e.setAttribute("data-rotate",""),e.setAttribute("data-rotateX",""),e.setAttribute("data-rotateY",""),this.plugins[this.context.resizing._resize_plugin].setSize.call(this,t[0]?t[0]:"auto",t[1]?t[1]:"",!0)},setTransformSize:function(e,t,n){let i=e.getAttribute("data-percentage");const o=this.context.resizing._rotateVertical,l=1*e.getAttribute("data-rotate");let s="";if(i&&!o)i=i.split(","),"auto"===i[0]&&"auto"===i[1]?this.plugins[this.context.resizing._resize_plugin].setAutoSize.call(this):this.plugins[this.context.resizing._resize_plugin].setPercentSize.call(this,i[0],i[1]);else{const i=this.util.getParentElement(e,"FIGURE"),r=t||e.offsetWidth,a=n||e.offsetHeight,c=(o?a:r)+"px",u=(o?r:a)+"px";if(this.plugins[this.context.resizing._resize_plugin].cancelPercentAttr.call(this),this.plugins[this.context.resizing._resize_plugin].setSize.call(this,r+"px",a+"px",!0),i.style.width=c,i.style.height=this.context[this.context.resizing._resize_plugin]._caption?"":u,o){let e=r/2+"px "+r/2+"px 0",t=a/2+"px "+a/2+"px 0";s=90===l||-270===l?t:e}}e.style.transformOrigin=s,this.plugins.resizing._setTransForm(e,l.toString(),e.getAttribute("data-rotateX")||"",e.getAttribute("data-rotateY")||""),e.style.maxWidth=o?"none":"",this.plugins.resizing.setCaptionPosition.call(this,e)},_setTransForm:function(e,t,n,i){let o=(e.offsetWidth-e.offsetHeight)*(/-/.test(t)?1:-1),l="";if(/[1-9]/.test(t)&&(n||i))switch(l=n?"Y":"X",t){case"90":l=n&&i?"X":i?l:"";break;case"270":o*=-1,l=n&&i?"Y":n?l:"";break;case"-90":l=n&&i?"Y":n?l:"";break;case"-270":o*=-1,l=n&&i?"X":i?l:"";break;default:l=""}t%180==0&&(e.style.maxWidth=""),e.style.transform="rotate("+t+"deg)"+(n?" rotateX("+n+"deg)":"")+(i?" rotateY("+i+"deg)":"")+(l?" translate"+l+"("+o+"px)":"")},setCaptionPosition:function(e){const t=this.util.getChildElement(this.util.getParentElement(e,"FIGURE"),"FIGCAPTION");t&&(t.style.marginTop=(this.context.resizing._rotateVertical?e.offsetWidth-e.offsetHeight:0)+"px")},onMouseDown_resize_handle:function(e){e.stopPropagation(),e.preventDefault();const t=this.context.resizing,n=t._resize_direction=e.target.classList[0];t._resizeClientX=e.clientX,t._resizeClientY=e.clientY,this.context.element.resizeBackground.style.display="block",t.resizeButton.style.display="none",t.resizeDiv.style.float=/l/.test(n)?"right":/r/.test(n)?"left":"none";const i=function(e){if("keydown"===e.type&&27!==e.keyCode)return;const l=t._isChange;t._isChange=!1,this.removeDocEvent("mousemove",o),this.removeDocEvent("mouseup",i),this.removeDocEvent("keydown",i),"keydown"===e.type?(this.controllersOff(),this.context.element.resizeBackground.style.display="none",this.plugins[this.context.resizing._resize_plugin].init.call(this)):(this.plugins.resizing.cancel_controller_resize.call(this,n),l&&this.history.push(!1))}.bind(this),o=this.plugins.resizing.resizing_element.bind(this,t,n,this.context[t._resize_plugin]);this.addDocEvent("mousemove",o),this.addDocEvent("mouseup",i),this.addDocEvent("keydown",i)},resizing_element:function(e,t,n,i){const o=i.clientX,l=i.clientY;let s=n._element_w,r=n._element_h;const a=n._element_w+(/r/.test(t)?o-e._resizeClientX:e._resizeClientX-o),c=n._element_h+(/b/.test(t)?l-e._resizeClientY:e._resizeClientY-l),u=n._element_h/n._element_w*a;/t/.test(t)&&(e.resizeDiv.style.top=n._element_h-(/h/.test(t)?c:u)+"px"),/l/.test(t)&&(e.resizeDiv.style.left=n._element_w-a+"px"),/r|l/.test(t)&&(e.resizeDiv.style.width=a+"px",s=a),/^(t|b)[^h]$/.test(t)?(e.resizeDiv.style.height=u+"px",r=u):/^(t|b)h$/.test(t)&&(e.resizeDiv.style.height=c+"px",r=c),e._resize_w=s,e._resize_h=r,this.util.changeTxt(e.resizeDisplay,this._w.Math.round(s)+" x "+this._w.Math.round(r)),e._isChange=!0},cancel_controller_resize:function(e){const t=this.context.resizing._rotateVertical;this.controllersOff(),this.context.element.resizeBackground.style.display="none";let n=this._w.Math.round(t?this.context.resizing._resize_h:this.context.resizing._resize_w),i=this._w.Math.round(t?this.context.resizing._resize_w:this.context.resizing._resize_h);if(!t&&!/%$/.test(n)){const e=16,t=this.context.element.wysiwygFrame.clientWidth-2*e-2;this.util.getNumber(n,0)>t&&(i=this._w.Math.round(i/n*t),n=t)}const o=this.context.resizing._resize_plugin;this.plugins[o].setSize.call(this,n,i,!1,e),t&&this.plugins.resizing.setTransformSize.call(this,this.context[this.context.resizing._resize_plugin]._element,n,i),this.selectComponent(this.context[o]._element,o)}};return void 0===t&&(e.SUNEDITOR_MODULES||Object.defineProperty(e,"SUNEDITOR_MODULES",{enumerable:!0,writable:!1,configurable:!1,value:{}}),Object.defineProperty(e.SUNEDITOR_MODULES,"resizing",{enumerable:!0,writable:!1,configurable:!1,value:n})),n},"object"==typeof e.exports?e.exports=i.document?o(i,!0):function(e){if(!e.document)throw new Error("SUNEDITOR_MODULES a window with a document");return o(e)}:o(i)},"gjS+":function(e,t,n){"use strict";var i,o;i="undefined"!=typeof window?window:this,o=function(e,t){const n={name:"fileManager",_xmlHttp:null,_checkMediaComponent:function(e){return!/IMG/i.test(e)||!/FIGURE/i.test(e.parentElement.nodeName)||!/FIGURE/i.test(e.parentElement.parentElement.nodeName)},upload:function(e,t,n,i,o){this.showLoading();const l=this.plugins.fileManager,s=l._xmlHttp=this.util.getXMLHttpRequest();if(s.onreadystatechange=l._callBackUpload.bind(this,s,i,o),s.open("post",e,!0),null!==t&&"object"==typeof t&&this._w.Object.keys(t).length>0)for(let e in t)s.setRequestHeader(e,t[e]);s.send(n)},_callBackUpload:function(e,t,n){if(4===e.readyState)if(200===e.status)try{t(e)}catch(e){throw Error('[SUNEDITOR.fileManager.upload.callBack.fail] cause : "'+e.message+'"')}finally{this.closeLoading()}else{this.closeLoading();const t=e.responseText?JSON.parse(e.responseText):e;if("function"!=typeof n||n("",t,this)){const n="[SUNEDITOR.fileManager.upload.serverException] status: "+e.status+", response: "+(t.errorMessage||e.responseText);throw this.functions.noticeOpen(n),Error(n)}}},checkInfo:function(e,t,n,i,o){let l=[];for(let e=0,n=t.length;e<n;e++)l=l.concat([].slice.call(this.context.element.wysiwyg.querySelectorAll(t[e]+':not([data-se-embed="true"])')));const s=this.plugins.fileManager,r=this.context[e],a=r._infoList,c=s.setInfo.bind(this);if(l.length===a.length){if(this._componentsInfoReset){for(let t=0,i=l.length;t<i;t++)c(e,l[t],n,null,o);return}{let e=!1;for(let t,n=0,i=a.length;n<i;n++)if(t=a[n],0===l.filter((function(e){return t.src===e.src&&t.index.toString()===e.getAttribute("data-index")})).length){e=!0;break}if(!e)return}}const u=o?this.context.resizing._resize_plugin:"";o&&(this.context.resizing._resize_plugin=e);const d=[],h=[];for(let e=0,t=a.length;e<t;e++)h[e]=a[e].index;for(let t,a=0,u=l.length;a<u;a++)t=l[a],this.util.getParentElement(t,this.util.isMediaComponent)&&s._checkMediaComponent(t)?!t.getAttribute("data-index")||h.indexOf(1*t.getAttribute("data-index"))<0?(d.push(r._infoIndex),t.removeAttribute("data-index"),c(e,t,n,null,o)):d.push(1*t.getAttribute("data-index")):(d.push(r._infoIndex),i(t));for(let e,t=0;t<a.length;t++)e=a[t].index,d.indexOf(e)>-1||(a.splice(t,1),"function"==typeof n&&n(null,e,"delete",null,0,this),t--);o&&(this.context.resizing._resize_plugin=u)},setInfo:function(e,t,n,i,o){const l=o?this.context.resizing._resize_plugin:"";o&&(this.context.resizing._resize_plugin=e);const s=this.plugins[e],r=this.context[e],a=r._infoList;let c=t.getAttribute("data-index"),u=null,d="";if(i||(i={name:t.getAttribute("data-file-name")||("string"==typeof t.src?t.src.split("/").pop():""),size:t.getAttribute("data-file-size")||0}),!c||this._componentsInfoInit)d="create",c=r._infoIndex++,t.setAttribute("data-index",c),t.setAttribute("data-file-name",i.name),t.setAttribute("data-file-size",i.size),u={src:t.src,index:1*c,name:i.name,size:i.size},a.push(u);else{d="update",c*=1;for(let e=0,t=a.length;e<t;e++)if(c===a[e].index){u=a[e];break}u||(c=r._infoIndex++,u={index:c},a.push(u)),u.src=t.src,u.name=t.getAttribute("data-file-name"),u.size=1*t.getAttribute("data-file-size")}if(u.element=t,u.delete=s.destroy.bind(this,t),u.select=function(e){e.scrollIntoView(!0),this._w.setTimeout(s.select.bind(this,e))}.bind(this,t),o){if(!t.getAttribute("origin-size")&&t.naturalWidth&&t.setAttribute("origin-size",t.naturalWidth+","+t.naturalHeight),!t.getAttribute("data-origin")){const e=this.util.getParentElement(t,this.util.isMediaComponent),n=this.util.getParentElement(t,"FIGURE"),i=this.plugins.resizing._module_getSizeX.call(this,r,t,n,e),o=this.plugins.resizing._module_getSizeY.call(this,r,t,n,e);t.setAttribute("data-origin",i+","+o),t.setAttribute("data-size",i+","+o)}if(!t.style.width){const e=(t.getAttribute("data-size")||t.getAttribute("data-origin")||"").split(",");s.onModifyMode.call(this,t,null),s.applySize.call(this,e[0],e[1])}this.context.resizing._resize_plugin=l}"function"==typeof n&&n(t,c,d,u,--r._uploadFileLength<0?0:r._uploadFileLength,this)},deleteInfo:function(e,t,n){if(t>=0){const i=this.context[e]._infoList;for(let e=0,o=i.length;e<o;e++)if(t===i[e].index)return i.splice(e,1),void("function"==typeof n&&n(null,t,"delete",null,0,this))}},resetInfo:function(e,t){const n=this.context[e];if("function"==typeof t){const e=n._infoList;for(let n=0,i=e.length;n<i;n++)t(null,e[n].index,"delete",null,0,this)}n._infoList=[],n._infoIndex=0}};return void 0===t&&(e.SUNEDITOR_MODULES||Object.defineProperty(e,"SUNEDITOR_MODULES",{enumerable:!0,writable:!1,configurable:!1,value:{}}),Object.defineProperty(e.SUNEDITOR_MODULES,"fileManager",{enumerable:!0,writable:!1,configurable:!1,value:n})),n},"object"==typeof e.exports?e.exports=i.document?o(i,!0):function(e){if(!e.document)throw new Error("SUNEDITOR_MODULES a window with a document");return o(e)}:o(i)},h8zM:function(e,t,n){(function(t){e.exports=function(){"use strict";var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==t?t:"undefined"!=typeof self?self:{},n={exports:{}},i=(ni=function(e){return e&&e.Math==Math&&e})("object"==typeof globalThis&&globalThis)||ni("object"==typeof window&&window)||ni("object"==typeof self&&self)||ni("object"==typeof e&&e)||function(){return this}()||Function("return this")(),o={},l=!(Bb=function(e){try{return!!e()}catch(e){return!0}})((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),s={},r={}.propertyIsEnumerable,a=Object.getOwnPropertyDescriptor,c=a&&!r.call({1:2},1);function u(e){return v(y(e))}function d(e){return"object"==typeof e?null!==e:"function"==typeof e}function h(e,t){if(!b(e))return e;var n,i;if(t&&"function"==typeof(n=e.toString)&&!b(i=n.call(e)))return i;if("function"==typeof(n=e.valueOf)&&!b(i=n.call(e)))return i;if(!t&&"function"==typeof(n=e.toString)&&!b(i=n.call(e)))return i;throw TypeError("Can't convert object to primitive value")}s.f=c?function(e){return!!(e=a(this,e))&&e.enumerable}:r;var p=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}},f={}.toString,g=Kr=function(e){return f.call(e).slice(8,-1)},m="".split,v=na=(ri=Bb)((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==g(e)?m.call(e,""):Object(e)}:Object,y=sb=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e},b=d,_=sb,w=eb=function(e){return Object(_(e))},C={}.hasOwnProperty,x=Object.hasOwn||function(e,t){return C.call(w(e),t)},E=d,S=i.document,T=E(S)&&E(S.createElement),N=Ro=function(e){return T?S.createElement(e):{}},L=!l&&!Bb((function(){return 7!=Object.defineProperty(N("div"),"a",{get:function(){return 7}}).a})),k=s,A=p,B=u,M=h,I=x,z=L,O=Object.getOwnPropertyDescriptor;function R(e){if(!Y(e))throw TypeError(String(e)+" is not an object");return e}o.f=l?O:function(e,t){if(e=B(e),t=M(t,!0),z)try{return O(e,t)}catch(e){}if(I(e,t))return A(!k.f.call(e,t),e[t])};var H=Bb,D=/#|\.prototype\./,F=(hi=function(e,t){return(e=P[F(e)])==U||e!=V&&("function"==typeof t?H(t):!!t)}).normalize=function(e){return String(e).replace(D,".").toLowerCase()},P=hi.data={},V=hi.NATIVE="N",U=hi.POLYFILL="P",W=hi,Z={},j=dc=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e},q=function(e,t,n){if(j(e),void 0===t)return e;switch(n){case 0:return function(){return e.call(t)};case 1:return function(n){return e.call(t,n)};case 2:return function(n,i){return e.call(t,n,i)};case 3:return function(n,i,o){return e.call(t,n,i,o)}}return function(){return e.apply(t,arguments)}},$={},Y=d,G=L,X=R,K=h,J=Object.defineProperty;function Q(e){function t(t,n,i){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,n)}return new e(t,n,i)}return e.apply(this,arguments)}return t.prototype=e.prototype,t}function ee(e,t){var n,i,o,l,s,r=e.target,a=e.global,c=e.stat,u=e.proto,d=a?oe:c?oe[r]:(oe[r]||{}).prototype,h=a?re:re[r]||(re[r]={}),p=h.prototype;for(n in t)l=!se(a?n:r+(c?".":"#")+n,e.forced)&&d&&ue(d,n),i=h[n],l&&(o=e.noTargetGet?(s=le(d,n))&&s.value:d[n]),s=l&&o?o:t[n],l&&typeof i==typeof s||(l=e.bind&&l?ae(s,oe):e.wrap&&l?Q(s):u&&"function"==typeof s?ae(Function.call,s):s,(e.sham||s&&s.sham||i&&i.sham)&&ce(l,"sham",!0),h[n]=l,u&&(ue(re,l=r+"Prototype")||ce(re,l,{}),re[l][n]=s,e.real&&p&&!p[n]&&ce(p,n,s)))}$.f=l?J:function(e,t,n){if(X(e),t=K(t,!0),X(n),G)try{return J(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(e[t]=n.value),e};var te=$,ne=p,ie=l?function(e,t,n){return te.f(e,t,ne(1,n))}:function(e,t,n){return e[t]=n,e},oe=i,le=o.f,se=W,re=Z,ae=q,ce=ie,ue=x;ee({target:"Object",stat:!0,forced:!l,sham:!l},{defineProperty:$.f});var de=Z.Object,he=n.exports=function(e,t,n){return de.defineProperty(e,t,n)};de.defineProperty.sham&&(he.sham=!0);var pe=n.exports;function fe(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),pe(e,i.key,i)}}function ge(e){return 0<e?_e(be(e),9007199254740991):0}function me(e,t){return(e=we(e))<0?Ce(e+t,0):xe(e,t)}var ve=Math.ceil,ye=Math.floor,be=eu=function(e){return isNaN(e=+e)?0:(0<e?ye:ve)(e)},_e=Math.min,we=eu,Ce=Math.max,xe=Math.min,Ee=u,Se=ge,Te=me,Ne={includes:(xi=function(e){return function(t,n,i){var o,l=Ee(t),s=Se(l.length),r=Te(i,s);if(e&&n!=n){for(;r<s;)if((o=l[r++])!=o)return!0}else for(;r<s;r++)if((e||r in l)&&l[r]===n)return e||r||0;return!e&&-1}})(!0),indexOf:xi(!1)},Le=Bb,ke=function(e,t){var n=[][e];return!!n&&Le((function(){n.call(null,t||function(){throw 1},1)}))},Ae=ee,Be=Ne.indexOf,Me=ke,Ie=[].indexOf,ze=!!Ie&&1/[1].indexOf(1,-0)<0,Oe=Me("indexOf");Ae({target:"Array",proto:!0,forced:ze||!Oe},{indexOf:function(e){return ze?Ie.apply(this,arguments)||0:Be(this,e,1<arguments.length?arguments[1]:void 0)}});var Re=Z,He=(Lb=function(e){return Re[e+"Prototype"]})("Array").indexOf,De=Array.prototype,Fe=function(e){var t=e.indexOf;return e===De||e instanceof Array&&t===De.indexOf?He:t},Pe={exports:{}},Ve=i,Ue=ie,We=function(e,t){try{Ue(Ve,e,t)}catch(n){Ve[e]=t}return t},Ze=is=i[Ti="__core-js_shared__"]||We(Ti,{});function je(e){return"function"==typeof e?e:void 0}function qe(e,t){return arguments.length<2?je(St[e])||je(Tt[e]):St[e]&&St[e][t]||Tt[e]&&Tt[e][t]}function $e(){}function Ye(e){return"<script>"+e+"</"+Ot+">"}(Pe.exports=function(e,t){return Ze[e]||(Ze[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.15.2",mode:"pure",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"});var Ge,Xe=0,Ke=Math.random(),Je=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++Xe+Ke).toString(36)},Qe=Pe.exports,et=Je,tt=Qe("keys"),nt=function(e){return tt[e]||(tt[e]=et(e))},it=!Bb((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype})),ot=x,lt=eb,st=it,rt=nt("IE_PROTO"),at=Object.prototype,ct=st?Object.getPrototypeOf:function(e){return e=lt(e),ot(e,rt)?e[rt]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?at:null},ut=d,dt=R,ht=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,n={};try{(e=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),t=n instanceof Array}catch(n){}return function(n,i){return dt(n),function(e){if(!ut(e)&&null!==e)throw TypeError("Can't set "+String(e)+" as a prototype")}(i),t?e.call(n,i):n.__proto__=i,n}}():void 0),pt={},ft=x,gt=u,mt=Ne.indexOf,vt=pt,yt=Hv=function(e,t){var n,i=gt(e),o=0,l=[];for(n in i)!ft(vt,n)&&ft(i,n)&&l.push(n);for(;t.length>o;)ft(i,n=t[o++])&&(~mt(l,n)||l.push(n));return l},bt=Fv=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],_t=Object.keys||function(e){return yt(e,bt)},wt=$,Ct=R,xt=_t,Et=l?Object.defineProperties:function(e,t){Ct(e);for(var n,i=xt(t),o=i.length,l=0;l<o;)wt.f(e,n=i[l++],t[n]);return e},St=Z,Tt=i,Nt=qe("document","documentElement"),Lt=R,kt=Et,At=Fv,Bt=pt,Mt=Nt,It=Ro,zt="prototype",Ot="script",Rt=nt("IE_PROTO"),Ht=function(){try{Ge=document.domain&&new ActiveXObject("htmlfile")}catch(e){}var e;Ht=Ge?function(e){e.write(Ye("")),e.close();var t=e.parentWindow.Object;return e=null,t}(Ge):((e=It("iframe")).style.display="none",Mt.appendChild(e),e.src=String("javascript:"),(e=e.contentWindow.document).open(),e.write(Ye("document.F=Object")),e.close(),e.F);for(var t=At.length;t--;)delete Ht[zt][At[t]];return Ht()};Bt[Rt]=!0;var Dt=Object.create||function(e,t){var n;return null!==e?($e[zt]=Lt(e),n=new $e,$e[zt]=null,n[Rt]=e):n=Ht(),void 0===t?n:kt(n,t)},Ft=bl=qe("navigator","userAgent")||"",Pt=(Vi=i.process)&&Vi.versions;(Ui=Pt&&Pt.v8)?$i=(qi=Ui.split("."))[0]<4?1:qi[0]+qi[1]:Ft&&(!(qi=Ft.match(/Edge\/(\d+)/))||74<=qi[1])&&(qi=Ft.match(/Chrome\/(\d+)/))&&($i=qi[1]);var Vt=Ev=$i&&+$i,Ut=Bb,Wt=(Pv=!!Object.getOwnPropertySymbols&&!Ut((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&Vt&&Vt<41})))&&!Symbol.sham&&"symbol"==typeof Symbol.iterator,Zt=i,jt=Pe.exports,qt=x,$t=Je,Yt=Pv,Gt=Wt,Xt=jt("wks"),Kt=Zt.Symbol,Jt=Gt?Kt:Kt&&Kt.withoutSetter||$t,Qt=Dr={},en=(_b=function(e){return qt(Xt,e)&&(Yt||"string"==typeof Xt[e])||(Yt&&qt(Kt,e)?Xt[e]=Kt[e]:Xt[e]=Jt("Symbol."+e)),Xt[e]})("iterator"),tn=Array.prototype;function nn(e,t){this.stopped=e,this.result=t}(oo={})[_b("toStringTag")]="z";var on=mo="[object z]"===String(oo),ln=Kr,sn=_b("toStringTag"),rn="Arguments"==ln(function(){return arguments}()),an=ba=on?ln:function(e){var t;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(e=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),sn))?e:rn?ln(t):"Object"==(e=ln(t))&&"function"==typeof t.callee?"Arguments":e},cn=Dr,un=_b("iterator"),dn=R,hn=R,pn=ge,fn=q,gn=function(e){var t=e.return;if(void 0!==t)return dn(t.call(e)).value},mn=ee,vn=ct,yn=ht,bn=Dt,_n=ie,wn=p,Cn=Qs=function(e,t,n){function i(e){return l&&gn(l),new nn(!0,e)}function o(e){return h?(hn(e),f?g(e[0],e[1],i):g(e[0],e[1])):f?g(e,i):g(e)}var l,s,r,a,c,u,d=n&&n.that,h=!(!n||!n.AS_ENTRIES),p=!(!n||!n.IS_ITERATOR),f=!(!n||!n.INTERRUPTED),g=fn(t,d,1+h+f);if(p)l=e;else{if("function"!=typeof(p=function(e){if(null!=e)return e[un]||e["@@iterator"]||cn[an(e)]}(e)))throw TypeError("Target is not iterable");if(function(e){return void 0!==e&&(Qt.Array===e||tn[en]===e)}(p)){for(s=0,r=pn(e.length);s<r;s++)if((a=o(e[s]))&&a instanceof nn)return a;return new nn(!1)}l=p.call(e)}for(c=l.next;!(u=c.call(l)).done;){try{a=o(u.value)}catch(e){throw gn(l),e}if("object"==typeof a&&a&&a instanceof nn)return a}return new nn(!1)},xn=function(e,t){var n=this;return n instanceof xn?(yn&&(n=yn(new Error(void 0),vn(n))),void 0!==t&&_n(n,"message",String(t)),Cn(e,(t=[]).push,{that:t}),_n(n,"errors",t),n):new xn(e,t)};xn.prototype=bn(Error.prototype,{constructor:wn(5,xn),message:wn(5,""),name:wn(5,"AggregateError")}),mn({global:!0},{AggregateError:xn});var En=i.Promise,Sn=ie,Tn=Jv=function(e,t,n,i){i&&i.enumerable?e[t]=n:Sn(e,t,n)},Nn=ba,Ln=mo,kn=$.f,An=ie,Bn=x,Mn=mo?{}.toString:function(){return"[object "+Nn(this)+"]"},In=_b("toStringTag"),zn=function(e,t,n,i){e&&(e=n?e:e.prototype,Bn(e,In)||kn(e,In,{configurable:!0,value:t}),i&&!Ln&&An(e,"toString",Mn))},On=qe,Rn=$,Hn=l,Dn=_b("species"),Fn=is,Pn=Function.toString;"function"!=typeof Fn.inspectSource&&(Fn.inspectSource=function(e){return Pn.call(e)});var Vn=Fn.inspectSource,Un=_b("iterator"),Wn=!1;try{var Zn=0;(So={next:function(){return{done:!!Zn++}},return:function(){Wn=!0}})[Un]=function(){return this},Array.from(So,(function(){throw 2}))}catch(e){}function jn(e){var t;ui.hasOwnProperty(e)&&(t=ui[e],delete ui[e],t())}function qn(e){return function(){jn(e)}}var $n,Yn=R,Gn=dc,Xn=_b("species"),Kn=function(e,t){var n;return void 0===(e=Yn(e).constructor)||null==(n=Yn(e)[Xn])?t:Gn(n)},Jn=/(?:iphone|ipod|ipad).*applewebkit/i.test(bl),Qn="process"==Kr(i.process),ei=i,ti=Bb,ni=q,ii=Nt,oi=Ro,li=ei.location,si=(c=ei.setImmediate,r=ei.clearImmediate,ei.process),ri=ei.MessageChannel,ai=ei.Dispatch,ci=0,ui={},di="onreadystatechange",hi=(E=function(e){jn(e.data)},function(e){ei.postMessage(e+"",li.protocol+"//"+li.host)});c&&r||(c=function(e){for(var t=[],n=1;n<arguments.length;)t.push(arguments[n++]);return ui[++ci]=function(){("function"==typeof e?e:Function(e)).apply(void 0,t)},$n(ci),ci},r=function(e){delete ui[e]},Qn?$n=function(e){si.nextTick(qn(e))}:ai&&ai.now?$n=function(e){ai.now(qn(e))}:ri&&!Jn?(ll=(ol=new ri).port2,ol.port1.onmessage=E,$n=ni(ll.postMessage,ll,1)):ei.addEventListener&&"function"==typeof postMessage&&!ei.importScripts&&li&&"file:"!==li.protocol&&!ti(hi)?($n=hi,ei.addEventListener("message",E,!1)):$n=di in oi("script")?function(e){ii.appendChild(oi("script"))[di]=function(){ii.removeChild(this),jn(e)}}:function(e){setTimeout(qn(e),0)}),L={set:c,clear:r},he=/web0s(?!.*chrome)/i.test(bl);var pi,fi,gi,mi,vi,yi,bi,_i,wi=i,Ci=(n=o.f,L.set),xi=Jn,Ei=(Me=he,Qn),Si=(Ae=wi.MutationObserver||wi.WebKitMutationObserver,Oe=wi.document,wi.process),Ti=(We=wi.Promise,n(wi,"queueMicrotask"));function Ni(e){var t,n;this.promise=new e((function(e,i){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=i})),this.resolve=Li(t),this.reject=Li(n)}(Qe=Ti&&Ti.value)||(pi=function(){var e,t;for(Ei&&(e=Si.domain)&&e.exit();fi;){t=fi.fn,fi=fi.next;try{t()}catch(e){throw fi?mi():gi=void 0,e}}gi=void 0,e&&e.enter()},mi=xi||Ei||Me||!Ae||!Oe?We&&We.resolve?((bi=We.resolve(void 0)).constructor=We,_i=bi.then,function(){_i.call(bi,pi)}):Ei?function(){Si.nextTick(pi)}:function(){Ci.call(wi,pi)}:(vi=!0,yi=Oe.createTextNode(""),new Ae(pi).observe(yi,{characterData:!0}),function(){yi.data=vi=!vi})),it=Qe||function(e){e={fn:e,next:void 0},gi&&(gi.next=e),fi||(fi=e,mi()),gi=e};var Li=dc;(st={}).f=function(e){return new Ni(e)};var ki,Ai,Bi,Mi,Ii,zi,Oi,Ri,Hi=R,Di=d,Fi=st,Pi=(Ne=function(e,t){return Hi(e),Di(t)&&t.constructor===e?t:((0,(e=Fi.f(e)).resolve)(t),e.promise)},i),Vi=(Bt=function(e){try{return{error:!1,value:e()}}catch(e){return{error:!0,value:e}}},Vn),Ui="function"==typeof(Pt=i.WeakMap)&&/native code/.test(Vi(Pt)),Wi=d,Zi=ie,ji=x,qi=(Ft=is,nt),$i=pt,Yi="Object already initialized";function Gi(e){var t;return!(!lo(e)||"function"!=typeof(t=e.then))&&t}function Xi(e,t){var n;e.notified||(e.notified=!0,n=e.reactions,ho((function(){for(var i=e.value,o=1==e.state,l=0;n.length>l;){var s,r,a,c=n[l++],u=o?c.ok:c.fail,d=c.resolve,h=c.reject,p=c.domain;try{u?(o||(2===e.rejection&&Fo(e),e.rejection=1),!0===u?s=i:(p&&p.enter(),s=u(i),p&&(p.exit(),a=!0)),s===c.promise?h(Lo("Promise-chain cycle")):(r=Gi(s))?r.call(s,d,h):d(s)):h(i)}catch(i){p&&!a&&p.exit(),h(i)}}e.reactions=[],e.notified=!1,t&&!e.rejection&&Ho(e)})))}function Ki(e,t,n){var i,o;Io?((i=ko.createEvent("Event")).promise=t,i.reason=n,i.initEvent(e,!1,!0),io.dispatchEvent(i)):i={promise:t,reason:n},!zo&&(o=io["on"+e])?o(i):e===Oo&&fo("Unhandled promise rejection",n)}function Ji(e,t,n){return function(i){e(t,i,n)}}function Qi(e,t,n){e.done||(e.done=!0,(e=n||e).value=t,e.state=2,Xi(e,!0))}Ut=i.WeakMap,Oi=Ui||Ft.state?(ki=Ft.state||(Ft.state=new Ut),Ai=ki.get,Bi=ki.has,Mi=ki.set,Ii=function(e,t){if(Bi.call(ki,e))throw new TypeError(Yi);return t.facade=e,Mi.call(ki,e,t),t},zi=function(e){return Ai.call(ki,e)||{}},function(e){return Bi.call(ki,e)}):($i[Ri=qi("state")]=!0,Ii=function(e,t){if(ji(e,Ri))throw new TypeError(Yi);return t.facade=e,Zi(e,Ri,t),t},zi=function(e){return ji(e,Ri)?e[Ri]:{}},function(e){return ji(e,Ri)}),jt={set:Ii,get:zi,has:Oi,enforce:function(e){return Oi(e)?zi(e):Ii(e,{})},getterFor:function(e){return function(t){var n;if(!Wi(t)||(n=zi(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return n}}},Zt="object"==typeof window,Gt=ee;var eo,to,no,io=i,oo=($t=qe,En),lo=(on=function(e,t,n){for(var i in t)n&&n.unsafe&&e[i]?e[i]=t[i]:Tn(e,i,t[i],n);return e},ht=zn,bn=function(e){var t=On(e);e=Rn.f,Hn&&t&&!t[Dn]&&e(t,Dn,{configurable:!0,get:function(){return this}})},d),so=dc,ro=Vn,ao=Qs,co=(wn=function(e,t){if(!t&&!Wn)return!1;var n=!1;try{var i={};i[Un]=function(){return{next:function(){return{done:n=!0}}}},e(i)}catch(e){}return n},Kn),uo=L.set,ho=it,po=Ne,fo=function(e,t){var n=Pi.console;n&&n.error&&(1===arguments.length?n.error(e):n.error(e,t))},go=(mn=st,Bt),mo=jt,vo=(Fn=W,Zt),yo=Qn,bo=Ev,_o=_b("species"),wo="Promise",Co=mo.get,xo=mo.set,Eo=mo.getterFor(wo),So=oo&&oo.prototype,To=oo,No=So,Lo=io.TypeError,ko=io.document,Ao=io.process,Bo=mn.f,Mo=Bo,Io=!!(ko&&ko.createEvent&&io.dispatchEvent),zo="function"==typeof PromiseRejectionEvent,Oo="unhandledrejection",Ro=(Nt=Fn(wo,(function(){var e=(n=ro(To))!==String(To);if(!e&&66===bo)return!0;if(!No.finally)return!0;if(51<=bo&&/native code/.test(n))return!1;var t=new To((function(e){e(1)})),n=function(e){e((function(){}),(function(){}))};return(t.constructor={})[_o]=n,!(t.then((function(){}))instanceof n)||!e&&vo&&!zo})))||!wn((function(e){To.all(e).catch((function(){}))})),Ho=function(e){uo.call(io,(function(){var t,n=e.facade,i=e.value;if(Do(e)&&(t=go((function(){yo?Ao.emit("unhandledRejection",i,n):Ki(Oo,n,i)})),e.rejection=yo||Do(e)?2:1,t.error))throw t.value}))},Do=function(e){return 1!==e.rejection&&!e.parent},Fo=function(e){uo.call(io,(function(){var t=e.facade;yo?Ao.emit("rejectionHandled",t):Ki("rejectionhandled",t,e.value)}))},Po=function(e,t,n){if(!e.done){e.done=!0,n&&(e=n);try{if(e.facade===t)throw Lo("Promise can't be resolved itself");var i=Gi(t);i?ho((function(){var n={done:!1};try{i.call(t,Ji(Po,n,e),Ji(Qi,n,e))}catch(t){Qi(n,t,e)}})):(e.value=t,e.state=1,Xi(e,!1))}catch(t){Qi({done:!1},t,e)}}};Nt&&(No=(To=function(e){(function(e,t,n){if(!(e instanceof t))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation")})(this,To,wo),so(e),eo.call(this);var t=Co(this);try{e(Ji(Po,t),Ji(Qi,t))}catch(e){Qi(t,e)}}).prototype,(eo=function(e){xo(this,{type:wo,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=on(No,{then:function(e,t){var n=Eo(this),i=Bo(co(this,To));return i.ok="function"!=typeof e||e,i.fail="function"==typeof t&&t,i.domain=yo?Ao.domain:void 0,n.parent=!0,n.reactions.push(i),0!=n.state&&Xi(n,!1),i.promise},catch:function(e){return this.then(void 0,e)}}),to=function(){var e=new eo,t=Co(e);this.promise=e,this.resolve=Ji(Po,t),this.reject=Ji(Qi,t)},mn.f=Bo=function(e){return e===To||e===no?new to:Mo(e)}),Gt({global:!0,wrap:!0,forced:Nt},{Promise:To}),ht(To,wo,!1,!0),bn(wo),no=$t(wo),Gt({target:wo,stat:!0,forced:Nt},{reject:function(e){var t=Bo(this);return t.reject.call(void 0,e),t.promise}}),Gt({target:wo,stat:!0,forced:!0},{resolve:function(e){return po(this===no?To:this,e)}}),Gt({target:wo,stat:!0,forced:Ro},{all:function(e){var t=this,n=Bo(t),i=n.resolve,o=n.reject,l=go((function(){var n=so(t.resolve),l=[],s=0,r=1;ao(e,(function(e){var a=s++,c=!1;l.push(void 0),r++,n.call(t,e).then((function(e){c||(c=!0,l[a]=e,--r||i(l))}),o)})),--r||i(l)}));return l.error&&o(l.value),n.promise},race:function(e){var t=this,n=Bo(t),i=n.reject,o=go((function(){var o=so(t.resolve);ao(e,(function(e){o.call(t,e).then(n.resolve,i)}))}));return o.error&&i(o.value),n.promise}});var Vo=dc,Uo=st,Wo=Bt,Zo=Qs;ee({target:"Promise",stat:!0},{allSettled:function(e){var t=this,n=Uo.f(t),i=n.resolve,o=n.reject,l=Wo((function(){var n=Vo(t.resolve),o=[],l=0,s=1;Zo(e,(function(e){var r=l++,a=!1;o.push(void 0),s++,n.call(t,e).then((function(e){a||(a=!0,o[r]={status:"fulfilled",value:e},--s||i(o))}),(function(e){a||(a=!0,o[r]={status:"rejected",reason:e},--s||i(o))}))})),--s||i(o)}));return l.error&&o(l.value),n.promise}});var jo=dc,qo=qe,$o=st,Yo=Bt,Go=Qs,Xo="No one promise resolved";ee({target:"Promise",stat:!0},{any:function(e){var t=this,n=$o.f(t),i=n.resolve,o=n.reject,l=Yo((function(){var n=jo(t.resolve),l=[],s=0,r=1,a=!1;Go(e,(function(e){var c=s++,u=!1;l.push(void 0),r++,n.call(t,e).then((function(e){u||a||(a=!0,i(e))}),(function(e){u||a||(u=!0,l[c]=e,--r||o(new(qo("AggregateError"))(l,Xo)))}))})),--r||o(new(qo("AggregateError"))(l,Xo))}));return l.error&&o(l.value),n.promise}});var Ko=En,Jo=qe,Qo=Kn,el=Ne;ee({target:"Promise",proto:!0,real:!0,forced:!!Ko&&Bb((function(){Ko.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(e){var t=Qo(this,Jo("Promise")),n="function"==typeof e;return this.then(n?function(n){return el(t,e()).then((function(){return n}))}:e,n?function(n){return el(t,e()).then((function(){throw n}))}:e)}});var tl,nl=eu,il=sb,ol={codeAt:(ri=function(e){return function(t,n){var i,o=String(il(t)),l=nl(n);return t=o.length,l<0||t<=l?e?"":void 0:(n=o.charCodeAt(l))<55296||56319<n||l+1===t||(i=o.charCodeAt(l+1))<56320||57343<i?e?o.charAt(l):n:e?o.slice(l,l+2):i-56320+(n-55296<<10)+65536}})(!1),charAt:ri(!0)},ll=(ni=Bb,ct),sl=(ti=ie,hi=x,_b("iterator"));function rl(){return this}function al(){return this}E=!1,[].keys&&("next"in(vr=[].keys())?(yr=ll(ll(vr)))!==Object.prototype&&(tl=yr):E=!0),(c=null==tl||ni((function(){var e={};return tl[sl].call(e)!==e})))&&(tl={}),c&&!hi(tl,sl)&&ti(tl,sl,(function(){return this}));var cl=(r={IteratorPrototype:tl,BUGGY_SAFARI_ITERATORS:E}).IteratorPrototype,ul=Dt,dl=p,hl=zn,pl=Dr,fl=ee,gl=ct,ml=zn,vl=ie,yl=Jv,bl=_b,_l=Dr,wl=r.IteratorPrototype,Cl=r.BUGGY_SAFARI_ITERATORS,xl=bl("iterator"),El="values",Sl="entries",Tl=(Jn=function(e,t,n,i,o,l,s){function r(e){if(e===o&&f)return f;if(!Cl&&e in h)return h[e];switch(e){case"keys":case El:case Sl:return function(){return new n(this,e)}}return function(){return new n(this)}}!function(e,t,n){t+=" Iterator",e.prototype=ul(cl,{next:dl(1,n)}),hl(e,t,!1,!0),pl[t]=rl}(n,t,i);var a,c,u=t+" Iterator",d=!1,h=e.prototype,p=h[xl]||h["@@iterator"]||o&&h[o],f=!Cl&&p||r(o);if((i="Array"==t&&h.entries||p)&&(e=gl(i.call(new e)),wl!==Object.prototype&&e.next&&(ml(e,u,!0,!0),_l[u]=al)),o==El&&p&&p.name!==El&&(d=!0,f=function(){return p.call(this)}),s&&h[xl]!==f&&vl(h,xl,f),_l[t]=f,o)if(a={values:r(El),keys:l?f:r("keys"),entries:r(Sl)},s)for(c in a)!Cl&&!d&&c in h||yl(h,c,a[c]);else fl({target:t,proto:!0,forced:Cl||d},a);return a},ol.charAt),Nl=(n=Jn,"String Iterator"),Ll=(he=jt).set,kl=he.getterFor(Nl);n(String,"String",(function(e){Ll(this,{type:Nl,string:String(e),index:0})}),(function(){var e=kl(this),t=e.string,n=e.index;return n>=t.length?{value:void 0,done:!0}:(n=Tl(t,n),e.index+=n.length,{value:n,done:!1})}));var Al=u,Bl=(Ti=Dr,Me=Jn,"Array Iterator"),Ml=(xi=jt).set,Il=xi.getterFor(Bl);Me(Array,"Array",(function(e,t){Ml(this,{type:Bl,target:Al(e),index:0,kind:t})}),(function(){var e=Il(this),t=e.target,n=e.kind,i=e.index++;return!t||i>=t.length?{value:e.target=void 0,done:!0}:"keys"==n?{value:i,done:!1}:"values"==n?{value:t[i],done:!1}:{value:[i,t[i]],done:!1}}),"values"),Ti.Arguments=Ti.Array,We={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0};var zl,Ol=i,Rl=ba,Hl=ie,Dl=Dr,Fl=_b("toStringTag");for(zl in We){var Pl;(Pl=(Pl=Ol[zl])&&Pl.prototype)&&Rl(Pl)!==Fl&&Hl(Pl,Fl,zl),Dl[zl]=Dl.Array}Oe=Z.Promise;var Vl=st,Ul=Bt;ee({target:"Promise",stat:!0},{try:function(e){var t=Vl.f(this);return((e=Ul(e)).error?t.reject:t.resolve)(e.value),t.promise}});var Wl=Oe,Zl=Kr,jl=(Ae=Array.isArray||function(e){return"Array"==Zl(e)},d),ql=Ae,$l=_b("species"),Yl=q,Gl=na,Xl=eb,Kl=ge,Jl=Qe=function(e,t){var n;return new(void 0===(n=ql(e)&&("function"==typeof(n=e.constructor)&&(n===Array||ql(n.prototype))||jl(n)&&null===(n=n[$l]))?void 0:n)?Array:n)(0===t?0:t)},Ql=[].push,es=(Pt={forEach:(Vi=function(e){var t=1==e,n=2==e,i=3==e,o=4==e,l=6==e,s=7==e,r=5==e||l;return function(a,c,u,d){for(var h,p,f=Xl(a),g=Gl(f),m=Yl(c,u,3),v=Kl(g.length),y=0,b=(d=d||Jl,t?d(a,v):n||s?d(a,0):void 0);y<v;y++)if((r||y in g)&&(p=m(h=g[y],y,f),e))if(t)b[y]=p;else if(p)switch(e){case 3:return!0;case 5:return h;case 6:return y;case 2:Ql.call(b,h)}else switch(e){case 4:return!1;case 7:Ql.call(b,h)}return l?-1:i||o?o:b}})(0),map:Vi(1),filter:Vi(2),some:Vi(3),every:Vi(4),find:Vi(5),findIndex:Vi(6),filterOut:Vi(7)},Bb),ts=Ev,ns=_b("species"),is=function(e){return 51<=ts||!es((function(){var t=[];return(t.constructor={})[ns]=function(){return{foo:1}},1!==t[e](Boolean).foo}))},os=(Ui=ee,Pt.map);Ui({target:"Array",proto:!0,forced:!is("map")},{map:function(e){return os(this,e,1<arguments.length?arguments[1]:void 0)}});var ls=Lb("Array").map,ss=Array.prototype,rs=function(e){var t=e.map;return e===ss||e instanceof Array&&t===ss.map?ls:t},as=(Ft=ee,Pt.filter);Ft({target:"Array",proto:!0,forced:!is("filter")},{filter:function(e){return as(this,e,1<arguments.length?arguments[1]:void 0)}});var cs=Lb("Array").filter,us=Array.prototype,ds=function(e){var t=e.filter;return e===us||e instanceof Array&&t===us.filter?cs:t},hs=dc,ps=d,fs=[].slice,gs={};ee({target:"Function",proto:!0},{bind:Function.bind||function(e){var t=hs(this),n=fs.call(arguments,1),i=function(){var o=n.concat(fs.call(arguments));return this instanceof i?function(e,t,n){if(!(t in gs)){for(var i=[],o=0;o<t;o++)i[o]="a["+o+"]";gs[t]=Function("C,a","return new C("+i.join(",")+")")}return gs[t](e,n)}(t,o.length,o):t.apply(e,o)};return ps(t.prototype)&&(i.prototype=t.prototype),i}});var ms=Lb("Function").bind,vs=Function.prototype,ys=Pt.forEach;Ut=ke("forEach")?[].forEach:function(e){return ys(this,e,1<arguments.length?arguments[1]:void 0)},ee({target:"Array",proto:!0,forced:[].forEach!=Ut},{forEach:Ut});var bs=Lb("Array").forEach,_s=ba,ws=Array.prototype,Cs={DOMTokenList:!0,NodeList:!0},xs=function(e){var t=e.forEach;return e===ws||e instanceof Array&&t===ws.forEach||Cs.hasOwnProperty(_s(e))?bs:t},Es=h,Ss=$,Ts=p,Ns=(qi=ee,me),Ls=eu,ks=ge,As=eb,Bs=Qe,Ms=$i=function(e,t,n){(t=Es(t))in e?Ss.f(e,t,Ts(0,n)):e[t]=n},Is=(Vn=is("splice"),Math.max),zs=Math.min;qi({target:"Array",proto:!0,forced:!Vn},{splice:function(e,t){var n,i,o,l,s,r,a=As(this),c=ks(a.length),u=Ns(e,c);if(0===(e=arguments.length)?n=i=0:i=1===e?(n=0,c-u):(n=e-2,zs(Is(Ls(t),0),c-u)),9007199254740991<c+n-i)throw TypeError("Maximum allowed length exceeded");for(o=Bs(a,i),l=0;l<i;l++)(s=u+l)in a&&Ms(o,l,a[s]);if(n<(o.length=i)){for(l=u;l<c-i;l++)r=l+n,(s=l+i)in a?a[r]=a[s]:delete a[r];for(l=c;c-i+n<l;l--)delete a[l-1]}else if(i<n)for(l=c-i;u<l;l--)r=l+n-1,(s=l+i-1)in a?a[r]=a[s]:delete a[r];for(l=0;l<n;l++)a[l+u]=arguments[l+2];return a.length=c-i+n,o}});var Os=Lb("Array").splice,Rs=Array.prototype,Hs=function(e){var t=e.splice;return e===Rs||e instanceof Array&&t===Rs.splice?Os:t},Ds=(L=ee,Pt.find),Fs=!0;"find"in[]&&Array(1).find((function(){Fs=!1})),L({target:"Array",proto:!0,forced:Fs},{find:function(e){return Ds(this,e,1<arguments.length?arguments[1]:void 0)}});var Ps=Lb("Array").find,Vs=Array.prototype,Us=function(e){var t=e.find;return e===Vs||e instanceof Array&&t===Vs.find?Ps:t},Ws=(W=(it=function(e){return e&&e.Math==Math&&e})("object"==typeof globalThis&&globalThis)||it("object"==typeof window&&window)||it("object"==typeof self&&self)||it("object"==typeof e&&e)||function(){return this}()||Function("return this")(),Zt={},mo=!(Qn=function(e){try{return!!e()}catch(e){return!0}})((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),oo={},So={}.propertyIsEnumerable,Object.getOwnPropertyDescriptor);Fn=Ws&&!So.call({1:2},1),oo.f=Fn?function(e){return!!(e=Ws(this,e))&&e.enumerable}:So,wn=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}};var Zs={}.toString,js=on=function(e){return Zs.call(e).slice(8,-1)},qs="".split,$s=ht=(mn=Qn)((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==js(e)?qs.call(e,""):Object(e)}:Object,Ys=bn=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e},Gs=($t=function(e){return $s(Ys(e))},Nt=function(e){return"object"==typeof e?null!==e:"function"==typeof e}),Xs=(Gt=function(e,t){if(!Gs(e))return e;var n,i;if(t&&"function"==typeof(n=e.toString)&&!Gs(i=n.call(e)))return i;if("function"==typeof(n=e.valueOf)&&!Gs(i=n.call(e)))return i;if(!t&&"function"==typeof(n=e.toString)&&!Gs(i=n.call(e)))return i;throw TypeError("Can't convert object to primitive value")},bn),Ks=Ro=function(e){return Object(Xs(e))},Js={}.hasOwnProperty,Qs=Object.hasOwn||function(e,t){return Js.call(Ks(e),t)},er=(En=Nt,W.document),tr=En(er)&&En(er.createElement),nr=Kn=function(e){return tr?er.createElement(e):{}},ir=(Ne=!mo&&!Qn((function(){return 7!=Object.defineProperty(nr("div"),"a",{get:function(){return 7}}).a})),oo),or=wn,lr=$t,sr=Gt,rr=Qs,ar=Ne,cr=Object.getOwnPropertyDescriptor;Zt.f=mo?cr:function(e,t){if(e=lr(e),t=sr(t,!0),ar)try{return cr(e,t)}catch(e){}if(rr(e,t))return or(!ir.f.call(e,t),e[t])},ri={};var ur=Nt,dr=Ne,hr=ll=function(e){if(!ur(e))throw TypeError(String(e)+" is not an object");return e},pr=Gt,fr=Object.defineProperty;ri.f=mo?fr:function(e,t,n){if(hr(e),t=pr(t,!0),hr(n),dr)try{return fr(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(e[t]=n.value),e};var gr=ri,mr=wn,vr=mo?function(e,t,n){return gr.f(e,t,mr(1,n))}:function(e,t,n){return e[t]=n,e},yr={exports:{}},br=W,_r=vr,wr=(c=ni=function(e,t){try{_r(br,e,t)}catch(n){br[e]=t}return t},E=ti=W[hi="__core-js_shared__"]||c(hi,{}),Function.toString);"function"!=typeof E.inspectSource&&(E.inspectSource=function(e){return wr.call(e)}),r=ct=E.inspectSource,ol="function"==typeof(bl=W.WeakMap)&&/native code/.test(r(bl));var Cr=ti;((he={exports:{}}).exports=function(e,t){return Cr[e]||(Cr[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.15.2",mode:"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"});var xr,Er,Sr,Tr,Nr,Lr,kr,Ar,Br=0,Mr=Math.random(),Ir=(n=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++Br+Mr).toString(36)},Jn=he.exports,n),zr=Jn("keys"),Or=Nt,Rr=vr,Hr=Qs,Dr=(Ti=ti,xi=function(e){return zr[e]||(zr[e]=Ir(e))}),Fr=(We=Me={},"Object already initialized");st=W.WeakMap,kr=ol||Ti.state?(xr=Ti.state||(Ti.state=new st),Er=xr.get,Sr=xr.has,Tr=xr.set,Nr=function(e,t){if(Sr.call(xr,e))throw new TypeError(Fr);return t.facade=e,Tr.call(xr,e,t),t},Lr=function(e){return Er.call(xr,e)||{}},function(e){return Sr.call(xr,e)}):(We[Ar=Dr("state")]=!0,Nr=function(e,t){if(Hr(e,Ar))throw new TypeError(Fr);return t.facade=e,Rr(e,Ar,t),t},Lr=function(e){return Hr(e,Ar)?e[Ar]:{}},function(e){return Hr(e,Ar)});var Pr=W,Vr=vr,Ur=Qs,Wr=ni,Zr=ct,jr=(Bt={set:Nr,get:Lr,has:kr,enforce:function(e){return kr(e)?Lr(e):Nr(e,{})},getterFor:function(e){return function(t){var n;if(!Or(t)||(n=Lr(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return n}}}).get,qr=Bt.enforce,$r=String(String).split("String");function Yr(e){return"function"==typeof e?e:void 0}(yr.exports=function(e,t,n,i){var o=!!i&&!!i.unsafe,l=!!i&&!!i.enumerable,s=!!i&&!!i.noTargetGet;"function"==typeof n&&("string"!=typeof t||Ur(n,"name")||Vr(n,"name",t),(i=qr(n)).source||(i.source=$r.join("string"==typeof t?t:""))),e!==Pr?(o?!s&&e[t]&&(l=!0):delete e[t],l?e[t]=n:Vr(e,t,n)):l?e[t]=n:Wr(t,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&jr(this).source||Zr(this)}));var Gr=W,Xr=W,Kr=(Oe=function(e,t){return arguments.length<2?Yr(Gr[e])||Yr(Xr[e]):Gr[e]&&Gr[e][t]||Xr[e]&&Xr[e][t]},{}),Jr=Math.ceil,Qr=Math.floor,ea=q=function(e){return isNaN(e=+e)?0:(0<e?Qr:Jr)(e)},ta=Math.min,na=function(e){return 0<e?ta(ea(e),9007199254740991):0},ia=q,oa=Math.max,la=Math.min,sa=$t,ra=na,aa=Vi=function(e,t){return(e=ia(e))<0?oa(e+t,0):la(e,t)},ca=(Ft={includes:(Ui=function(e){return function(t,n,i){var o,l=sa(t),s=ra(l.length),r=aa(i,s);if(e&&n!=n){for(;r<s;)if((o=l[r++])!=o)return!0}else for(;r<s;r++)if((e||r in l)&&l[r]===n)return e||r||0;return!e&&-1}})(!0),indexOf:Ui(!1)},Qs),ua=$t,da=Ft.indexOf,ha=Me,pa=dc=function(e,t){var n,i=ua(e),o=0,l=[];for(n in i)!ca(ha,n)&&ca(i,n)&&l.push(n);for(;t.length>o;)ca(i,n=t[o++])&&(~da(l,n)||l.push(n));return l},fa=(ke=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]).concat("length","prototype");function ga(e,t){return RegExp(e,t)}Kr.f=Object.getOwnPropertyNames||function(e){return pa(e,fa)},(Ut={}).f=Object.getOwnPropertySymbols;var ma=Kr,va=Ut,ya=ll,ba=Oe("Reflect","ownKeys")||function(e){var t=ma.f(ya(e)),n=va.f;return n?t.concat(n(e)):t},_a=Qs,wa=ba,Ca=Zt,xa=ri,Ea=Qn,Sa=/#|\.prototype\./,Ta=(eu=function(e,t){return(e=Na[Ta(e)])==ka||e!=La&&("function"==typeof t?Ea(t):!!t)}).normalize=function(e){return String(e).replace(Sa,".").toLowerCase()},Na=eu.data={},La=eu.NATIVE="N",ka=eu.POLYFILL="P",Aa=(qi=eu,W),Ba=Zt.f,Ma=vr,Ia=yr.exports,za=ni,Oa=function(e,t){for(var n=wa(t),i=xa.f,o=Ca.f,l=0;l<n.length;l++){var s=n[l];_a(e,s)||i(e,s,o(t,s))}},Ra=qi,Ha=(Vn=function(e,t){var n,i,o,l=e.target,s=e.global,r=e.stat,a=s?Aa:r?Aa[l]||za(l,{}):(Aa[l]||{}).prototype;if(a)for(n in t){if(i=t[n],o=e.noTargetGet?(o=Ba(a,n))&&o.value:a[n],!Ra(s?n:l+(r?".":"#")+n,e.forced)&&void 0!==o){if(typeof i==typeof o)continue;Oa(i,o)}(e.sham||o&&o.sham)&&Ma(i,"sham",!0),Ia(a,n,i,e)}},ll);function Da(){}function Fa(e){return"<script>"+e+"</"+Ja+">"}L=function(){var e=Ha(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t},(it={}).UNSUPPORTED_Y=(e=Qn)((function(){var e=ga("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),it.BROKEN_CARET=e((function(){var e=ga("^r","gy");return e.lastIndex=2,null!=e.exec("str")}));var Pa,Va=dc,Ua=ke,Wa=(Fn=Object.keys||function(e){return Va(e,Ua)},ri),Za=ll,ja=Fn,qa=(So=mo?Object.defineProperties:function(e,t){Za(e);for(var n,i=ja(t),o=i.length,l=0;l<o;)Wa.f(e,n=i[l++],t[n]);return e},mn=Oe("document","documentElement"),ll),$a=So,Ya=ke,Ga=(En=Me,mn),Xa=Kn,Ka="prototype",Ja="script",Qa=xi("IE_PROTO"),ec=function(){try{Pa=document.domain&&new ActiveXObject("htmlfile")}catch(e){}var e;ec=Pa?function(e){e.write(Fa("")),e.close();var t=e.parentWindow.Object;return e=null,t}(Pa):((e=Xa("iframe")).style.display="none",Ga.appendChild(e),e.src=String("javascript:"),(e=e.contentWindow.document).open(),e.write(Fa("document.F=Object")),e.close(),e.F);for(var t=Ya.length;t--;)delete ec[Ka][Ya[t]];return ec()};En[Qa]=!0,oo=Object.create||function(e,t){var n;return null!==e?(Da[Ka]=qa(e),n=new Da,Da[Ka]=null,n[Qa]=e):n=ec(),void 0===t?n:$a(n,t)},Ne=Qn((function(){var e=RegExp(".","string".charAt(0));return!(e.dotAll&&e.exec("\n")&&"s"===e.flags)})),c=Qn((function(){var e=RegExp("(?<a>b)","string".charAt(5));return"b"!==e.exec("b").groups.a||"bc"!=="b".replace(e,"$<a>c")}));var tc=L,nc=(hi=it,E=he.exports,oo),ic=Bt.get,oc=(r=Ne,bl=c,RegExp.prototype.exec),lc=E("native-string-replace",String.prototype.replace),sc=oc,rc=(Jn=/a/,ti=/b*/g,oc.call(Jn,"a"),oc.call(ti,"a"),0!==Jn.lastIndex||0!==ti.lastIndex),ac=hi.UNSUPPORTED_Y||hi.BROKEN_CARET,cc=void 0!==/()??/.exec("")[1];ol=sc=rc||cc||ac||r||bl?function(e){var t,n,i,o,l,s,r=this;if(d=(p=ic(r)).raw)return d.lastIndex=r.lastIndex,h=sc.call(d,e),r.lastIndex=d.lastIndex,h;var a=p.groups,c=ac&&r.sticky,u=tc.call(r),d=r.source,h=0,p=e;if(c&&(-1===(u=u.replace("y","")).indexOf("g")&&(u+="g"),p=String(e).slice(r.lastIndex),0<r.lastIndex&&(!r.multiline||r.multiline&&"\n"!==e[r.lastIndex-1])&&(d="(?: "+d+")",p=" "+p,h++),t=new RegExp("^(?:"+d+")",u)),cc&&(t=new RegExp("^"+d+"$(?!\\s)",u)),rc&&(n=r.lastIndex),i=oc.call(c?t:r,p),c?i?(i.input=i.input.slice(h),i[0]=i[0].slice(h),i.index=r.lastIndex,r.lastIndex+=i[0].length):r.lastIndex=0:rc&&i&&(r.lastIndex=r.global?i.index+i[0].length:n),cc&&i&&1<i.length&&lc.call(i[0],t,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(i[o]=void 0)})),i&&a)for(i.groups=l=nc(null),o=0;o<a.length;o++)l[(s=a[o])[0]]=i[s[1]];return i}:sc,Vn({target:"RegExp",proto:!0,forced:/./.exec!==ol},{exec:ol}),Ti=Oe("navigator","userAgent")||"",st=Ti,We=W.process,Dr=We&&We.versions,(Ui=Dr&&Dr.v8)?Qc=(Xc=Ui.split("."))[0]<4?1:Xc[0]+Xc[1]:st&&(!(Xc=st.match(/Edge\/(\d+)/))||74<=Xc[1])&&(Xc=st.match(/Chrome\/(\d+)/))&&(Qc=Xc[1]);var uc=Ut=Qc&&+Qc,dc=(ba=Qn,ni=(eu=!!Object.getOwnPropertySymbols&&!ba((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&uc&&uc<41})))&&!Symbol.sham&&"symbol"==typeof Symbol.iterator,e=W,he.exports),hc=Qs,pc=(Fn=n,eu),fc=(So=ni,dc("wks")),gc=e.Symbol,mc=So?gc:gc&&gc.withoutSetter||Fn,vc=(ke=function(e){return hc(fc,e)&&(pc||"string"==typeof fc[e])||(pc&&hc(gc,e)?fc[e]=gc[e]:fc[e]=mc("Symbol."+e)),fc[e]},yr.exports),yc=ol,bc=Qn,_c=ke,wc=vr,Cc=_c("species"),xc=RegExp.prototype,Ec=(Me=function(e,t,n,i){var o,l=_c(e),s=!bc((function(){var t={};return t[l]=function(){return 7},7!=""[e](t)})),r=s&&!bc((function(){var t=!1,n=/a/;return"split"===e&&((n={constructor:{}}).constructor[Cc]=function(){return n},n.flags="",n[l]=/./[l]),n.exec=function(){return t=!0,null},n[l](""),!t}));s&&r&&!n||(o=/./[l],t=t(l,""[e],(function(e,t,n,i,l){var r=t.exec;return r===yc||r===xc.exec?s&&!l?{done:!0,value:o.call(t,n,i)}:{done:!0,value:e.call(n,t,i)}:{done:!1}})),vc(String.prototype,e,t[0]),vc(xc,l,t[1])),i&&wc(xc[l],"sham",!0)},q),Sc=bn,Tc=(E={codeAt:(En=function(e){return function(t,n){var i,o=String(Sc(t)),l=Ec(n);return t=o.length,l<0||t<=l?e?"":void 0:(n=o.charCodeAt(l))<55296||56319<n||l+1===t||(i=o.charCodeAt(l+1))<56320||57343<i?e?o.charAt(l):n:e?o.slice(l,l+2):i-56320+(n-55296<<10)+65536}})(!1),charAt:En(!0)}).charAt,Nc=(Jn=function(e,t,n){return t+(n?Tc(e,t).length:1)},Ro),Lc=Math.floor,kc="".replace,Ac=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,Bc=/\$([$&'`]|\d{1,2})/g,Mc=on,Ic=ol,zc=(hi=Me,r=Qn,ll),Oc=na,Rc=q,Hc=bn,Dc=Jn,Fc=function(e,t,n,i,o,l){var s=n+e.length,r=i.length,a=Bc;return void 0!==o&&(o=Nc(o),a=Ac),kc.call(l,a,(function(l,a){var c;switch(a.charAt(0)){case"$":return"$";case"&":return e;case"`":return t.slice(0,n);case"'":return t.slice(s);case"<":c=o[a.slice(1,-1)];break;default:var u=+a;if(0==u)return l;if(r<u){var d=Lc(u/10);return 0===d?l:d<=r?void 0===i[d-1]?a.charAt(1):i[d-1]+a.charAt(1):l}c=i[u-1]}return void 0===c?"":c}))},Pc=ti=function(e,t){var n=e.exec;if("function"==typeof n){if("object"!=typeof(n=n.call(e,t)))throw TypeError("RegExp exec method returned something other than an Object or null");return n}if("RegExp"!==Mc(e))throw TypeError("RegExp#exec called on incompatible receiver");return Ic.call(e,t)},Vc=ke("replace"),Uc=Math.max,Wc=Math.min,Zc=(bl="$0"==="a".replace(/./,"$0"),!!/./[Vc]&&""===/./[Vc]("a","$0"));hi("replace",(function(e,t,n){var i=Zc?"$":"$0";return[function(e,n){var i=Hc(this),o=null==e?void 0:e[Vc];return void 0!==o?o.call(e,i,n):t.call(String(i),e,n)},function(e,o){if("string"==typeof o&&-1===o.indexOf(i)&&-1===o.indexOf("$<")){var l=n(t,this,e,o);if(l.done)return l.value}var s=zc(this),r=String(e),a="function"==typeof o;a||(o=String(o));var c,u=s.global;u&&(c=s.unicode,s.lastIndex=0);for(var d=[];null!==(m=Pc(s,r))&&(d.push(m),u);)""===String(m[0])&&(s.lastIndex=Dc(r,Oc(s.lastIndex),c));for(var h,p="",f=0,g=0;g<d.length;g++){for(var m=d[g],v=String(m[0]),y=Uc(Wc(Rc(m.index),r.length),0),b=[],_=1;_<m.length;_++)b.push(void 0===(h=m[_])?h:String(h));var w,C=m.groups;C=a?(w=[v].concat(b,y,r),void 0!==C&&w.push(C),String(o.apply(void 0,w))):Fc(v,r,y,b,C,o),f<=y&&(p+=r.slice(f,y)+C,f=y+v.length)}return p+r.slice(f)}]}),!!r((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}))||!bl||Zc),We=oo,Dr=ri;var jc=ke("unscopables"),qc=Array.prototype;null==qc[jc]&&Dr.f(qc,jc,{configurable:!0,value:We(null)}),Ui={},st=!Qn((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}));var $c,Yc=Qs,Gc=Ro,Xc=st,Kc=xi("IE_PROTO"),Jc=Object.prototype,Qc=Xc?Object.getPrototypeOf:function(e){return e=Gc(e),Yc(e,Kc)?e[Kc]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?Jc:null},eu=(ba=Qn,he=Qc,vr),tu=(ni=Qs,ke("iterator"));function nu(){return this}function iu(){return this}dc=!1,[].keys&&("next"in(zu=[].keys())?(Ru=he(he(zu)))!==Object.prototype&&($c=Ru):dc=!0),ni($c=null==$c||ba((function(){var e={};return $c[tu].call(e)!==e}))?{}:$c,tu)||eu($c,tu,(function(){return this})),e={IteratorPrototype:$c,BUGGY_SAFARI_ITERATORS:dc};var ou=ri.f,lu=Qs,su=ke("toStringTag"),ru=(So=function(e,t,n){e&&!lu(e=n?e:e.prototype,su)&&ou(e,su,{configurable:!0,value:t})},e.IteratorPrototype),au=oo,cu=wn,uu=So,du=Ui,hu=Nt,pu=ll,fu=(Fn=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,n={};try{(e=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),t=n instanceof Array}catch(n){}return function(n,i){return pu(n),function(e){if(!hu(e)&&null!==e)throw TypeError("Can't set "+String(e)+" as a prototype")}(i),t?e.call(n,i):n.__proto__=i,n}}():void 0),Vn),gu=Qc,mu=Fn,vu=So,yu=vr,bu=yr.exports,_u=(En=ke,Ui),wu=e.IteratorPrototype,Cu=e.BUGGY_SAFARI_ITERATORS,xu=En("iterator"),Eu="values",Su="entries",Tu=(ol=function(e,t,n,i,o,l,s){function r(e){if(e===o&&f)return f;if(!Cu&&e in h)return h[e];switch(e){case"keys":case Eu:case Su:return function(){return new n(this,e)}}return function(){return new n(this)}}!function(e,t,n){t+=" Iterator",e.prototype=au(ru,{next:cu(1,n)}),uu(e,t,!1),du[t]=nu}(n,t,i);var a,c,u=t+" Iterator",d=!1,h=e.prototype,p=h[xu]||h["@@iterator"]||o&&h[o],f=!Cu&&p||r(o);if((i="Array"==t&&h.entries||p)&&(e=gu(i.call(new e)),wu!==Object.prototype&&e.next&&(gu(e)!==wu&&(mu?mu(e,wu):"function"!=typeof e[xu]&&yu(e,xu,iu)),vu(e,u,!0))),o==Eu&&p&&p.name!==Eu&&(d=!0,f=function(){return p.call(this)}),h[xu]!==f&&yu(h,xu,f),_u[t]=f,o)if(a={values:r(Eu),keys:l?f:r("keys"),entries:r(Su)},s)for(c in a)!Cu&&!d&&c in h||bu(h,c,a[c]);else fu({target:t,proto:!0,forced:Cu||d},a);return a},$t),Nu=(hi=function(e){qc[jc][e]=!0},r=Ui,Dr=ol,"Array Iterator"),Lu=(bl=Bt).set,ku=bl.getterFor(Nu);We=Dr(Array,"Array",(function(e,t){Lu(this,{type:Nu,target:Tu(e),index:0,kind:t})}),(function(){var e=ku(this),t=e.target,n=e.kind,i=e.index++;return!t||i>=t.length?{value:e.target=void 0,done:!0}:"keys"==n?{value:i,done:!1}:"values"==n?{value:t[i],done:!1}:{value:[i,t[i]],done:!1}}),"values"),r.Arguments=r.Array,hi("keys"),hi("values"),hi("entries"),(st={})[ke("toStringTag")]="z",Xc=xi="[object z]"===String(st);var Au=on,Bu=ke("toStringTag"),Mu="Arguments"==Au(function(){return arguments}()),Iu=he=Xc?Au:function(e){var t;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(e=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),Bu))?e:Mu?Au(t):"Object"==(e=Au(t))&&"function"==typeof t.callee?"Arguments":e},zu=yr.exports;function Ou(e,t){this.stopped=e,this.result=t}xi||zu(Object.prototype,"toString",xi?{}.toString:function(){return"[object "+Iu(this)+"]"},{unsafe:!0});var Ru=W.Promise,Hu=yr.exports,Du=(ni=function(e,t,n){for(var i in t)Hu(e,i,t[i],n);return e},Oe),Fu=ri,Pu=mo,Vu=ke("species"),Uu=(ba=function(e){var t=Du(e);e=Fu.f,Pu&&t&&!t[Vu]&&e(t,Vu,{configurable:!0,get:function(){return this}})},eu=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e},dc=function(e,t,n){if(!(e instanceof t))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return e},Ui),Wu=ke("iterator"),Zu=Array.prototype,ju=(e=function(e){return void 0!==e&&(Uu.Array===e||Zu[Wu]===e)},eu),qu=(En=function(e,t,n){if(ju(e),void 0===t)return e;switch(n){case 0:return function(){return e.call(t)};case 1:return function(n){return e.call(t,n)};case 2:return function(n,i){return e.call(t,n,i)};case 3:return function(n,i,o){return e.call(t,n,i,o)}}return function(){return e.apply(t,arguments)}},he),$u=Ui,Yu=ke("iterator"),Gu=ll,Xu=ll,Ku=e,Ju=na,Qu=En,ed=bl=function(e){if(null!=e)return e[Yu]||e["@@iterator"]||$u[qu(e)]},td=function(e){var t=e.return;if(void 0!==t)return Gu(t.call(e)).value},nd=ke("iterator"),id=!1;try{var od=0;(md={next:function(){return{done:!!od++}},return:function(){id=!0}})[nd]=function(){return this},Array.from(md,(function(){throw 2}))}catch(e){}function ld(e){var t;bd.hasOwnProperty(e)&&(t=bd[e],delete bd[e],t())}function sd(e){return function(){ld(e)}}Dr=function(e,t){if(!t&&!id)return!1;var n=!1;try{var i={};i[nd]=function(){return{next:function(){return{done:n=!0}}}},e(i)}catch(e){}return n};var rd,ad=ll,cd=eu,ud=ke("species"),dd=(r=function(e,t){var n;return void 0===(e=ad(e).constructor)||null==(n=ad(e)[ud])?t:cd(n)},hi=/(?:iphone|ipod|ipad).*applewebkit/i.test(Ti),st="process"==on(W.process),W),hd=(Xc=Qn,zu=En,mn),pd=Kn,fd=dd.location,gd=(xi=dd.setImmediate,Ui=dd.clearImmediate,dd.process),md=dd.MessageChannel,vd=dd.Dispatch,yd=0,bd={},_d="onreadystatechange";mn=function(e){ld(e.data)},Kn=function(e){dd.postMessage(e+"",fd.protocol+"//"+fd.host)},xi&&Ui||(xi=function(e){for(var t=[],n=1;n<arguments.length;)t.push(arguments[n++]);return bd[++yd]=function(){("function"==typeof e?e:Function(e)).apply(void 0,t)},rd(yd),yd},Ui=function(e){delete bd[e]},st?rd=function(e){gd.nextTick(sd(e))}:vd&&vd.now?rd=function(e){vd.now(sd(e))}:md&&!hi?(Md=(kd=new md).port2,kd.port1.onmessage=mn,rd=zu(Md.postMessage,Md,1)):dd.addEventListener&&"function"==typeof postMessage&&!dd.importScripts&&fd&&"file:"!==fd.protocol&&!Xc(Kn)?(rd=Kn,dd.addEventListener("message",mn,!1)):rd=_d in pd("script")?function(e){hd.appendChild(pd("script"))[_d]=function(){hd.removeChild(this),ld(e)}}:function(e){setTimeout(sd(e),0)}),md={set:xi,clear:Ui};var wd,Cd,xd,Ed,Sd,Td,Nd,Ld,kd=/web0s(?!.*chrome)/i.test(Ti),Ad=W,Bd=(zu=Zt.f,md.set),Md=hi,Id=(Xc=kd,st),zd=(Kn=Ad.MutationObserver||Ad.WebKitMutationObserver,mn=Ad.document,Ad.process);function Od(e){var t,n;this.promise=new e((function(e,i){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=i})),this.resolve=Rd(t),this.reject=Rd(n)}xi=Ad.Promise,Ui=zu(Ad,"queueMicrotask"),(hi=Ui&&Ui.value)||(wd=function(){var e,t;for(Id&&(e=zd.domain)&&e.exit();Cd;){t=Cd.fn,Cd=Cd.next;try{t()}catch(e){throw Cd?Ed():xd=void 0,e}}xd=void 0,e&&e.enter()},Ed=Md||Id||Xc||!Kn||!mn?xi&&xi.resolve?((Nd=xi.resolve(void 0)).constructor=xi,Ld=Nd.then,function(){Ld.call(Nd,wd)}):Id?function(){zd.nextTick(wd)}:function(){Bd.call(Ad,wd)}:(Sd=!0,Td=mn.createTextNode(""),new Kn(wd).observe(Td,{characterData:!0}),function(){Td.data=Sd=!Sd})),kd=hi||function(e){e={fn:e,next:void 0},xd&&(xd.next=e),Cd||(Cd=e,Ed()),xd=e};var Rd=eu;function Hd(e){var t;return!(!Kd(e)||"function"!=typeof(t=e.then))&&t}function Dd(e,t){var n;e.notified||(e.notified=!0,n=e.reactions,oh((function(){for(var i=e.value,o=1==e.state,l=0;n.length>l;){var s,r,a,c=n[l++],u=o?c.ok:c.fail,d=c.resolve,h=c.reject,p=c.domain;try{u?(o||(2===e.rejection&&Nh(e),e.rejection=1),!0===u?s=i:(p&&p.enter(),s=u(i),p&&(p.exit(),a=!0)),s===c.promise?h(mh("Promise-chain cycle")):(r=Hd(s))?r.call(s,d,h):d(s)):h(i)}catch(i){p&&!a&&p.exit(),h(i)}}e.reactions=[],e.notified=!1,t&&!e.rejection&&Sh(e)})))}function Fd(e,t,n){var i,o;wh?((i=vh.createEvent("Event")).promise=t,i.reason=n,i.initEvent(e,!1,!0),Xd.dispatchEvent(i)):i={promise:t,reason:n},!Ch&&(o=Xd["on"+e])?o(i):e===xh&&lh("Unhandled promise rejection",n)}function Pd(e,t,n){return function(i){e(t,i,n)}}function Vd(e,t,n){e.done||(e.done=!0,(e=n||e).value=t,e.state=2,Dd(e,!0))}(zu={}).f=function(e){return new Od(e)};var Ud,Wd,Zd,jd,qd=ll,$d=Nt,Yd=zu,Gd=W,Xd=(Ui="object"==typeof window,Md=Vn,W),Kd=(Xc=Oe,xi=Ru,mn=yr.exports,Kn=ni,hi=Fn,Oe=So,Ru=ba,Nt),Jd=eu,Qd=dc,eh=ct,th=function(e,t,n){function i(e){return l&&td(l),new Ou(!0,e)}function o(e){return h?(Xu(e),f?g(e[0],e[1],i):g(e[0],e[1])):f?g(e,i):g(e)}var l,s,r,a,c,u,d=n&&n.that,h=!(!n||!n.AS_ENTRIES),p=!(!n||!n.IS_ITERATOR),f=!(!n||!n.INTERRUPTED),g=Qu(t,d,1+h+f);if(p)l=e;else{if("function"!=typeof(p=ed(e)))throw TypeError("Target is not iterable");if(Ku(p)){for(s=0,r=Ju(e.length);s<r;s++)if((a=o(e[s]))&&a instanceof Ou)return a;return new Ou(!1)}l=p.call(e)}for(c=l.next;!(u=c.call(l)).done;){try{a=o(u.value)}catch(e){throw td(l),e}if("object"==typeof a&&a&&a instanceof Ou)return a}return new Ou(!1)},nh=(ct=Dr,r),ih=md.set,oh=kd,lh=function(e,t){var n=Gd.console;n&&n.error&&(1===arguments.length?n.error(e):n.error(e,t))},sh=(md=zu,function(e){try{return{error:!1,value:e()}}catch(e){return{error:!0,value:e}}}),rh=(kd=Bt,zu=qi,Ui),ah=st,ch=Ut,uh=ke("species"),dh="Promise",hh=kd.get,ph=kd.set,fh=kd.getterFor(dh),gh=(st=xi&&xi.prototype,xi),mh=(kd=st,Xd.TypeError),vh=Xd.document,yh=Xd.process,bh=md.f,_h=bh,wh=!!(vh&&vh.createEvent&&Xd.dispatchEvent),Ch="function"==typeof PromiseRejectionEvent,xh="unhandledrejection",Eh=!1,Sh=(ct=(zu=zu(dh,(function(){var e=(n=eh(gh))!==String(gh);if(!e&&66===ch)return!0;if(51<=ch&&/native code/.test(n))return!1;var t=new gh((function(e){e(1)})),n=function(e){e((function(){}),(function(){}))};return(t.constructor={})[uh]=n,!(Eh=t.then((function(){}))instanceof n)||!e&&rh&&!Ch})))||!ct((function(e){gh.all(e).catch((function(){}))})),function(e){ih.call(Xd,(function(){var t,n=e.facade,i=e.value;if(Th(e)&&(t=sh((function(){ah?yh.emit("unhandledRejection",i,n):Fd(xh,n,i)})),e.rejection=ah||Th(e)?2:1,t.error))throw t.value}))}),Th=function(e){return 1!==e.rejection&&!e.parent},Nh=function(e){ih.call(Xd,(function(){var t=e.facade;ah?yh.emit("rejectionHandled",t):Fd("rejectionhandled",t,e.value)}))},Lh=function(e,t,n){if(!e.done){e.done=!0,n&&(e=n);try{if(e.facade===t)throw mh("Promise can't be resolved itself");var i=Hd(t);i?oh((function(){var n={done:!1};try{i.call(t,Pd(Lh,n,e),Pd(Vd,n,e))}catch(t){Vd(n,t,e)}})):(e.value=t,e.state=1,Dd(e,!1))}catch(t){Vd({done:!1},t,e)}}};if(zu&&(kd=(gh=function(e){Qd(this,gh,dh),Jd(e),Ud.call(this);var t=hh(this);try{e(Pd(Lh,t),Pd(Vd,t))}catch(e){Vd(t,e)}}).prototype,(Ud=function(e){ph(this,{type:dh,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=Kn(kd,{then:function(e,t){var n=fh(this),i=bh(nh(this,gh));return i.ok="function"!=typeof e||e,i.fail="function"==typeof t&&t,i.domain=ah?yh.domain:void 0,n.parent=!0,n.reactions.push(i),0!=n.state&&Dd(n,!1),i.promise},catch:function(e){return this.then(void 0,e)}}),Wd=function(){var e=new Ud,t=hh(e);this.promise=e,this.resolve=Pd(Lh,t),this.reject=Pd(Vd,t)},md.f=bh=function(e){return e===gh||e===Zd?new Wd:_h(e)},"function"==typeof xi&&st!==Object.prototype)){jd=st.then,Eh||(mn(st,"then",(function(e,t){var n=this;return new gh((function(e,t){jd.call(n,e,t)})).then(e,t)}),{unsafe:!0}),mn(st,"catch",kd.catch,{unsafe:!0}));try{delete st.constructor}catch(e){}hi&&hi(st,kd)}Md({global:!0,wrap:!0,forced:zu},{Promise:gh}),Oe(gh,dh,!1),Ru(dh),Zd=Xc(dh),Md({target:dh,stat:!0,forced:zu},{reject:function(e){var t=bh(this);return t.reject.call(void 0,e),t.promise}}),Md({target:dh,stat:!0,forced:zu},{resolve:function(e){return function(e,t){return qd(e),$d(t)&&t.constructor===e?t:((0,(e=Yd.f(e)).resolve)(t),e.promise)}(this,e)}}),Md({target:dh,stat:!0,forced:ct},{all:function(e){var t=this,n=bh(t),i=n.resolve,o=n.reject,l=sh((function(){var n=Jd(t.resolve),l=[],s=0,r=1;th(e,(function(e){var a=s++,c=!1;l.push(void 0),r++,n.call(t,e).then((function(e){c||(c=!0,l[a]=e,--r||i(l))}),o)})),--r||i(l)}));return l.error&&o(l.value),n.promise},race:function(e){var t=this,n=bh(t),i=n.reject,o=sh((function(){var o=Jd(t.resolve);th(e,(function(e){o.call(t,e).then(n.resolve,i)}))}));return o.error&&i(o.value),n.promise}});var kh=E.charAt,Ah=(Ru=ol,"String Iterator"),Bh=(Oe=Bt).set,Mh=Oe.getterFor(Ah);Ru(String,"String",(function(e){Bh(this,{type:Ah,string:String(e),index:0})}),(function(){var e=Mh(this),t=e.string,n=e.index;return n>=t.length?{value:void 0,done:!0}:(n=kh(t,n),e.index+=n.length,{value:n,done:!1})}));var Ih,zh=W,Oh={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0},Rh=We,Hh=vr,Dh=(Xc=ke)("iterator"),Fh=Xc("toStringTag"),Ph=Rh.values;for(Ih in Oh){var Vh=zh[Ih],Uh=Vh&&Vh.prototype;if(Uh){if(Uh[Dh]!==Ph)try{Hh(Uh,Dh,Ph)}catch(e){Uh[Dh]=Ph}if(Uh[Fh]||Hh(Uh,Fh,Ih),Oh[Ih])for(var Wh in Rh)if(Uh[Wh]!==Rh[Wh])try{Hh(Uh,Wh,Rh[Wh])}catch(e){Uh[Wh]=Rh[Wh]}}}var Zh=Nt,jh=Fn,qh=(zu=function(e,t,n){var i,o;return jh&&"function"==typeof(i=t.constructor)&&i!==n&&Zh(o=i.prototype)&&o!==n.prototype&&jh(e,o),e},Nt),$h=on,Yh=ke("match"),Gh=(Md=mo,ct=W,E=qi,zu),Xh=vr,Kh=ri.f,Jh=(ol=Kr.f,L),Qh=(Oe=it,Ru=yr.exports,Xc=Qn,Qs),ep=Bt.enforce,tp=(it=ba,Ne),np=c,ip=ke("match"),op=ct.RegExp,lp=op.prototype,sp=/^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/,rp=/a/g,ap=/a/g,cp=(c=new op(rp)!==rp,Oe.UNSUPPORTED_Y);if(Xc=Md&&(!c||cp||tp||np||Xc((function(){return ap[ip]=!1,op(rp)!=rp||op(ap)==ap||"/a/i"!=op(rp,"i")}))),E("RegExp",Xc)){for(var up=function(e,t){var n,i,o=this instanceof up,l=function(e){var t;return qh(e)&&(void 0!==(t=e[Yh])?!!t:"RegExp"==$h(e))}(e),s=void 0===t,r=[],a=e;if(!o&&l&&s&&e.constructor===up)return e;if((l||e instanceof up)&&(e=e.source,s&&(t="flags"in a?a.flags:Jh.call(a))),e=void 0===e?"":String(e),t=void 0===t?"":String(t),a=e,l=t=tp&&"dotAll"in rp&&(n=!!t&&-1<t.indexOf("s"))?t.replace(/s/g,""):t,cp&&"sticky"in rp&&(i=!!t&&-1<t.indexOf("y"))&&(t=t.replace(/y/g,"")),np&&(e=(s=function(e){for(var t,n=e.length,i=0,o="",l=[],s={},r=!1,a=!1,c=0,u="";i<=n;i++){if("\\"===(t=e.charAt(i)))t+=e.charAt(++i);else if("]"===t)r=!1;else if(!r)switch(!0){case"["===t:r=!0;break;case"("===t:sp.test(e.slice(i+1))&&(i+=2,a=!0),o+=t,c++;continue;case">"===t&&a:if(""===u||Qh(s,u))throw new SyntaxError("Invalid capture group name");s[u]=!0,l.push([u,c]),a=!1,u="";continue}a?u+=t:o+=t}return[o,l]}(e))[0],r=s[1]),t=Gh(op(e,t),o?this:lp,up),(n||i||r.length)&&(o=ep(t),n&&(o.dotAll=!0,o.raw=up(function(e){for(var t,n=e.length,i=0,o="",l=!1;i<=n;i++)"\\"!==(t=e.charAt(i))?l||"."!==t?("["===t?l=!0:"]"===t&&(l=!1),o+=t):o+="[\\s\\S]":o+=t+e.charAt(++i);return o}(e),l)),i&&(o.sticky=!0),r.length&&(o.groups=r)),e!==a)try{Xh(t,"source",""===a?"(?:)":a)}catch(e){}return t},dp=ol(op),hp=0;dp.length>hp;)!function(e){e in up||Kh(up,e,{configurable:!0,get:function(){return op[e]},set:function(t){op[e]=t}})}(dp[hp++]);(lp.constructor=up).prototype=lp,Ru(ct,"RegExp",up)}it("RegExp"),Xc=yr.exports;var pp=ll,fp=(ol=Qn,L),gp=(Ru="toString",RegExp.prototype),mp=gp[Ru];ct=ol((function(){return"/a/b"!=mp.call({source:"a",flags:"b"})})),it=mp.name!=Ru,(ct||it)&&Xc(RegExp.prototype,Ru,(function(){var e=pp(this),t=String(e.source),n=e.flags;return"/"+t+"/"+String(void 0===n&&e instanceof RegExp&&!("flags"in gp)?fp.call(e):n)}),{unsafe:!0});var vp=ll,yp=na,bp=bn,_p=Jn,wp=ti;function Cp(e){return!!Tp(e)&&(e=Lp(e),Np(Dp,e)||Np(Fp,e))}Me("match",(function(e,t,n){return[function(t){var n=bp(this),i=null==t?void 0:t[e];return void 0!==i?i.call(t,n):new RegExp(t)[e](String(n))},function(e){var i=n(t,this,e);if(i.done)return i.value;var o=vp(this),l=String(e);if(!o.global)return wp(o,l);for(var s=o.unicode,r=[],a=o.lastIndex=0;null!==(c=wp(o,l));){var c=String(c[0]);""===(r[a]=c)&&(o.lastIndex=_p(l,yp(o.lastIndex),s)),a++}return 0===a?null:r}]})),L={exports:{}},ct=ol="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView;var xp,Ep=mo,Sp=W,Tp=Nt,Np=Qs,Lp=he,kp=vr,Ap=yr.exports,Bp=(it=ri.f,Xc=Qc,Fn),Mp=(Ru=ke,ll=n,(Jn=Sp.Int8Array)&&Jn.prototype),Ip=(Me=(ti=Sp.Uint8ClampedArray)&&ti.prototype,Jn&&Xc(Jn)),zp=Mp&&Xc(Mp),Op=(n=Object.prototype).isPrototypeOf,Rp=(ti=Ru("toStringTag"),ll("TYPED_ARRAY_TAG")),Hp=ct&&!!Bp&&"Opera"!==Lp(Sp.opera),Dp=(Jn=!1,{Int8Array:1,Uint8Array:1,Uint8ClampedArray:1,Int16Array:2,Uint16Array:2,Int32Array:4,Uint32Array:4,Float32Array:4,Float64Array:8}),Fp={BigInt64Array:8,BigUint64Array:8};for(xp in Dp)Sp[xp]||(Hp=!1);if((!Hp||"function"!=typeof Ip||Ip===Function.prototype)&&(Ip=function(){throw TypeError("Incorrect invocation")},Hp))for(xp in Dp)Sp[xp]&&Bp(Sp[xp],Ip);if((!Hp||!zp||zp===n)&&(zp=Ip.prototype,Hp))for(xp in Dp)Sp[xp]&&Bp(Sp[xp].prototype,zp);if(Hp&&Xc(Me)!==zp&&Bp(Me,zp),Ep&&!Np(zp,ti))for(xp in Jn=!0,it(zp,ti,{get:function(){return Tp(this)?this[Rp]:void 0}}),Dp)Sp[xp]&&kp(Sp[xp],Rp,xp);function Pp(e){return[255&e]}function Vp(e){return[255&e,e>>8&255]}function Up(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]}function Wp(e){return e[3]<<24|e[2]<<16|e[1]<<8|e[0]}function Zp(e){return Sf(e,23,4)}function jp(e){return Sf(e,52,8)}function qp(e,t,n,i){var o=hf(n);if(o+t>(n=gf(e)).byteLength)throw Ef(_f);return e=gf(n.buffer).bytes,n=o+n.byteOffset,t=e.slice(n,n+t),i?t:t.reverse()}function $p(e,t,n,i,o,l){if((n=hf(n))+t>(e=gf(e)).byteLength)throw Ef(_f);for(var s=gf(e.buffer).bytes,r=n+e.byteOffset,a=i(+o),c=0;c<t;c++)s[r+c]=a[l?c:t-c-1]}Ru={NATIVE_ARRAY_BUFFER_VIEWS:Hp,TYPED_ARRAY_TAG:Jn&&Rp,aTypedArray:function(e){if(Cp(e))return e;throw TypeError("Target is not a typed array")},aTypedArrayConstructor:function(e){if(Bp){if(Op.call(Ip,e))return e}else for(var t in Dp)if(Np(Dp,xp)&&(t=Sp[t])&&(e===t||Op.call(t,e)))return e;throw TypeError("Target is not a typed array constructor")},exportTypedArrayMethod:function(e,t,n){if(Ep){if(n)for(var i in Dp)if((i=Sp[i])&&Np(i.prototype,e))try{delete i.prototype[e]}catch(e){}zp[e]&&!n||Ap(zp,e,!n&&Hp&&Mp[e]||t)}},exportTypedArrayStaticMethod:function(e,t,n){var i,o;if(Ep){if(Bp){if(n)for(i in Dp)if((o=Sp[i])&&Np(o,e))try{delete o[e]}catch(e){}if(Ip[e]&&!n)return;try{return Ap(Ip,e,!n&&Hp&&Ip[e]||t)}catch(e){}}for(i in Dp)!(o=Sp[i])||o[e]&&!n||Ap(o,e,t)}},isView:function(e){return!!Tp(e)&&("DataView"===(e=Lp(e))||Np(Dp,e)||Np(Fp,e))},isTypedArray:Cp,TypedArray:Ip,TypedArrayPrototype:zp},ll=Qn,ct=Dr;var Yp=W.ArrayBuffer,Gp=W.Int8Array,Xp=(n=!Ru.NATIVE_ARRAY_BUFFER_VIEWS||!ll((function(){Gp(1)}))||!ll((function(){new Gp(-1)}))||!ct((function(e){new Gp,new Gp(null),new Gp(1.5),new Gp(e)}),!0)||ll((function(){return 1!==new Gp(new Yp(2),1,void 0).length})),q),Kp=na,Jp=(Xc=function(e){if(void 0===e)return 0;var t=Xp(e);if(t!==(e=Kp(t)))throw RangeError("Wrong length or index");return e},Math.abs),Qp=Math.pow,ef=Math.floor,tf=Math.log,nf=Math.LN2,of=(Me={pack:function(e,t,n){var i,o,l=new Array(n),s=8*n-t-1,r=(1<<s)-1,a=r>>1,c=23===t?Qp(2,-24)-Qp(2,-77):0,u=e<0||0===e&&1/e<0?1:0,d=0;for((e=Jp(e))!=e||e===1/0?(o=e!=e?1:0,i=r):(i=ef(tf(e)/nf),e*(n=Qp(2,-i))<1&&(i--,n*=2),2<=(e+=1<=i+a?c/n:c*Qp(2,1-a))*n&&(i++,n/=2),r<=i+a?(o=0,i=r):1<=i+a?(o=(e*n-1)*Qp(2,t),i+=a):(o=e*Qp(2,a-1)*Qp(2,t),i=0));8<=t;l[d++]=255&o,o/=256,t-=8);for(i=i<<t|o,s+=t;0<s;l[d++]=255&i,i/=256,s-=8);return l[--d]|=128*u,l},unpack:function(e,t){var n,i,o=8*(i=e.length)-t-1,l=(1<<o)-1,s=l>>1,r=o-7,a=i-1,c=127&(i=e[a--]);for(i>>=7;0<r;c=256*c+e[a],a--,r-=8);for(n=c&(1<<-r)-1,c>>=-r,r+=t;0<r;n=256*n+e[a],a--,r-=8);if(0===c)c=1-s;else{if(c===l)return n?NaN:i?-1/0:1/0;n+=Qp(2,t),c-=s}return(i?-1:1)*n*Qp(2,c-t)}},Ro),lf=Vi,sf=na,rf=(it=function(e){for(var t,n=of(this),i=sf(n.length),o=lf(1<(t=arguments.length)?arguments[1]:void 0,i),l=void 0===(t=2<t?arguments[2]:void 0)?i:lf(t,i);o<l;)n[o++]=e;return n},mo),af=vr,cf=(ti=ni,Jn=Qn,dc),uf=q,df=na,hf=Xc,pf=(Dr=Qc,ct=Fn,ll=Kr.f,ri.f),ff=it,gf=(ni=So,Bt.get),mf=Bt.set,vf="ArrayBuffer",yf="DataView",bf="prototype",_f="Wrong index",wf=W[vf],Cf=wf,xf=W[yf],Ef=(Qc=xf&&xf[bf],So=Object.prototype,W.RangeError),Sf=Me.pack,Tf=Me.unpack;if(Me=function(e,t){pf(e[bf],t,{get:function(){return gf(this)[t]}})},ol){if(!Jn((function(){wf(1)}))||!Jn((function(){new wf(-1)}))||Jn((function(){return new wf,new wf(1.5),new wf(NaN),wf.name!=vf}))){Jn=(Cf=function(e){return cf(this,Cf),new wf(hf(e))})[bf]=wf[bf];for(var Nf,Lf=ll(wf),kf=0;Lf.length>kf;)(Nf=Lf[kf++])in Cf||af(Cf,Nf,wf[Nf]);Jn.constructor=Cf}ct&&Dr(Qc)!==So&&ct(Qc,So),So=new xf(new Cf(2));var Af=Qc.setInt8;So.setInt8(0,2147483648),So.setInt8(1,2147483649),!So.getInt8(0)&&So.getInt8(1)||ti(Qc,{setInt8:function(e,t){Af.call(this,e,t<<24>>24)},setUint8:function(e,t){Af.call(this,e,t<<24>>24)}},{unsafe:!0})}else Cf=function(e){cf(this,Cf,vf),e=hf(e),mf(this,{bytes:ff.call(new Array(e),0),byteLength:e}),rf||(this.byteLength=e)},xf=function(e,t,n){cf(this,xf,yf),cf(e,Cf,yf);var i=gf(e).byteLength;if((t=uf(t))<0||i<t)throw Ef("Wrong offset");if(i<t+(n=void 0===n?i-t:df(n)))throw Ef("Wrong length");mf(this,{buffer:e,byteLength:n,byteOffset:t}),rf||(this.buffer=e,this.byteLength=n,this.byteOffset=t)},rf&&(Me(Cf,"byteLength"),Me(xf,"buffer"),Me(xf,"byteLength"),Me(xf,"byteOffset")),ti(xf[bf],{getInt8:function(e){return qp(this,1,e)[0]<<24>>24},getUint8:function(e){return qp(this,1,e)[0]},getInt16:function(e){return((e=qp(this,2,e,1<arguments.length?arguments[1]:void 0))[1]<<8|e[0])<<16>>16},getUint16:function(e){return(e=qp(this,2,e,1<arguments.length?arguments[1]:void 0))[1]<<8|e[0]},getInt32:function(e){return Wp(qp(this,4,e,1<arguments.length?arguments[1]:void 0))},getUint32:function(e){return Wp(qp(this,4,e,1<arguments.length?arguments[1]:void 0))>>>0},getFloat32:function(e){return Tf(qp(this,4,e,1<arguments.length?arguments[1]:void 0),23)},getFloat64:function(e){return Tf(qp(this,8,e,1<arguments.length?arguments[1]:void 0),52)},setInt8:function(e,t){$p(this,1,e,Pp,t)},setUint8:function(e,t){$p(this,1,e,Pp,t)},setInt16:function(e,t){$p(this,2,e,Vp,t,2<arguments.length?arguments[2]:void 0)},setUint16:function(e,t){$p(this,2,e,Vp,t,2<arguments.length?arguments[2]:void 0)},setInt32:function(e,t){$p(this,4,e,Up,t,2<arguments.length?arguments[2]:void 0)},setUint32:function(e,t){$p(this,4,e,Up,t,2<arguments.length?arguments[2]:void 0)},setFloat32:function(e,t){$p(this,4,e,Zp,t,2<arguments.length?arguments[2]:void 0)},setFloat64:function(e,t){$p(this,8,e,jp,t,2<arguments.length?arguments[2]:void 0)}});function Bf(e,t){var n;return new(void 0===(n=Zf(e)&&("function"==typeof(n=e.constructor)&&(n===Array||Zf(n.prototype))||Wf(n)&&null===(n=n[jf]))?void 0:n)?Array:n)(0===t?0:t)}function Mf(e,t){for(var n=0,i=t.length,o=new(kg(e))(i);n<i;)o[n]=t[n++];return o}function If(e){var t;return e instanceof xg||"ArrayBuffer"==(t=ag(e))||"SharedArrayBuffer"==t}function zf(e,t){return Ag(e)&&"symbol"!=typeof t&&t in e&&String(+t)==String(t)}ni(Cf,vf),ni(xf,yf),ti={ArrayBuffer:Cf,DataView:xf};var Of=q,Rf=(ni=function(e,t){if((e=function(e){if((e=Of(e))<0)throw RangeError("The argument can't be less than 0");return e}(e))%t)throw RangeError("Wrong offset");return e},Ro),Hf=na,Df=bl,Ff=e,Pf=En,Vf=Ru.aTypedArrayConstructor,Uf=on,Wf=(e=Array.isArray||function(e){return"Array"==Uf(e)},Nt),Zf=e,jf=ke("species"),qf=En,$f=ht,Yf=Ro,Gf=na,Xf=[].push,Kf=(En={forEach:(En=function(e){var t=1==e,n=2==e,i=3==e,o=4==e,l=6==e,s=7==e,r=5==e||l;return function(a,c,u,d){for(var h,p,f=Yf(a),g=$f(f),m=qf(c,u,3),v=Gf(g.length),y=0,b=(d=d||Bf,t?d(a,v):n||s?d(a,0):void 0);y<v;y++)if((r||y in g)&&(p=m(h=g[y],y,f),e))if(t)b[y]=p;else if(p)switch(e){case 3:return!0;case 5:return h;case 6:return y;case 2:Xf.call(b,h)}else switch(e){case 4:return!1;case 7:Xf.call(b,h)}return l?-1:i||o?o:b}})(0),map:En(1),filter:En(2),some:En(3),every:En(4),find:En(5),findIndex:En(6),filterOut:En(7)},Vn),Jf=W,Qf=n,eg=dc,tg=wn,ng=vr,ig=na,og=Xc,lg=ni,sg=Gt,rg=Qs,ag=he,cg=Nt,ug=oo,dg=Fn,hg=Kr.f,pg=function(e){var t,n,i,o,l,s,r=Rf(e),a=arguments.length,c=1<a?arguments[1]:void 0,u=void 0!==c;if(null!=(e=Df(r))&&!Ff(e))for(s=(l=e.call(r)).next,r=[];!(o=s.call(l)).done;)r.push(o.value);for(u&&2<a&&(c=Pf(c,arguments[2],2)),n=Hf(r.length),i=new(Vf(this))(n),t=0;t<n;t++)i[t]=u?c(r[t],t):r[t];return i},fg=En.forEach,gg=ba,mg=(Xc=ri,he=Zt,zu),vg=Bt.get,yg=Bt.set,bg=Xc.f,_g=he.f,wg=Math.round,Cg=Jf.RangeError,xg=ti.ArrayBuffer,Eg=ti.DataView,Sg=Ru.NATIVE_ARRAY_BUFFER_VIEWS,Tg=Ru.TYPED_ARRAY_TAG,Ng=Ru.TypedArray,Lg=Ru.TypedArrayPrototype,kg=Ru.aTypedArrayConstructor,Ag=Ru.isTypedArray,Bg="BYTES_PER_ELEMENT",Mg="Wrong length";Nt=function(e,t){bg(e,t,{get:function(){return vg(this)[t]}})},Fn=function(e,t){return zf(e,t=sg(t,!0))?tg(2,e[t]):_g(e,t)},Bt=function(e,t,n){return!(zf(e,t=sg(t,!0))&&cg(n)&&rg(n,"value"))||rg(n,"get")||rg(n,"set")||n.configurable||rg(n,"writable")&&!n.writable||rg(n,"enumerable")&&!n.enumerable?bg(e,t,n):(e[t]=n.value,e)},mo?(Sg||(he.f=Fn,Xc.f=Bt,Nt(Lg,"buffer"),Nt(Lg,"byteOffset"),Nt(Lg,"byteLength"),Nt(Lg,"length")),Kf({target:"Object",stat:!0,forced:!Sg},{getOwnPropertyDescriptor:Fn,defineProperty:Bt}),L.exports=function(e,t,n){function i(e,t){bg(e,t,{get:function(){return function(e,t){return(e=vg(e)).view[s](t*o+e.byteOffset,!0)}(this,t)},set:function(e){return function(e,t,i){e=vg(e),n&&(i=(i=wg(i))<0?0:255<i?255:255&i),e.view[r](t*o+e.byteOffset,i,!0)}(this,t,e)},enumerable:!0})}var o=e.match(/\d+$/)[0]/8,l=e+(n?"Clamped":"")+"Array",s="get"+e,r="set"+e,a=Jf[l],c=a,u=c&&c.prototype;e={},Sg?Qf&&(c=t((function(e,t,n,i){return eg(e,c,l),mg(cg(t)?If(t)?void 0!==i?new a(t,lg(n,o),i):void 0!==n?new a(t,lg(n,o)):new a(t):Ag(t)?Mf(c,t):pg.call(c,t):new a(og(t)),e,c)})),dg&&dg(c,Ng),fg(hg(a),(function(e){e in c||ng(c,e,a[e])})),c.prototype=u):(c=t((function(e,t,n,s){eg(e,c,l);var r,a,u=0,d=0;if(cg(t)){if(!If(t))return Ag(t)?Mf(c,t):pg.call(c,t);var h=t;if(d=lg(n,o),n=t.byteLength,void 0===s){if(n%o)throw Cg(Mg);if((r=n-d)<0)throw Cg(Mg)}else if(n<(r=ig(s)*o)+d)throw Cg(Mg);a=r/o}else a=og(t),h=new xg(r=a*o);for(yg(e,{buffer:h,byteOffset:d,byteLength:r,length:a,view:new Eg(h)});u<a;)i(e,u++)})),dg&&dg(c,Ng),u=c.prototype=ug(Lg)),u.constructor!==c&&ng(u,"constructor",c),Tg&&ng(u,Tg,l),e[l]=c,Kf({global:!0,forced:c!=a,sham:!Sg},e),Bg in c||ng(c,Bg,o),Bg in u||ng(u,Bg,o),gg(l)}):L.exports=function(){},(0,L.exports)("Uint8",(function(e){return function(t,n,i){return e(this,t,n,i)}}));var Ig=Ro,zg=Vi,Og=na,Rg=Math.min,Hg=[].copyWithin||function(e,t){var n=Ig(this),i=Og(n.length),o=zg(e,i),l=zg(t,i),s=Rg((void 0===(t=2<arguments.length?arguments[2]:void 0)?i:zg(t,i))-l,i-o),r=1;for(l<o&&o<l+s&&(r=-1,l+=s-1,o+=s-1);0<s--;)l in n?n[o]=n[l]:delete n[o],o+=r,l+=r;return n},Dg=Ru.aTypedArray;(0,Ru.exportTypedArrayMethod)("copyWithin",(function(e,t){return Hg.call(Dg(this),e,t,2<arguments.length?arguments[2]:void 0)}));var Fg=En.every,Pg=Ru.aTypedArray;(0,Ru.exportTypedArrayMethod)("every",(function(e){return Fg(Pg(this),e,1<arguments.length?arguments[1]:void 0)}));var Vg=it,Ug=Ru.aTypedArray;(0,Ru.exportTypedArrayMethod)("fill",(function(e){return Vg.apply(Ug(this),arguments)}));var Wg=Ru.aTypedArrayConstructor,Zg=r,jg=En.filter,qg=function(e,t){e=Zg(e,e.constructor);for(var n=0,i=t.length,o=new(Wg(e))(i);n<i;)o[n]=t[n++];return o},$g=Ru.aTypedArray;(0,Ru.exportTypedArrayMethod)("filter",(function(e){return e=jg($g(this),e,1<arguments.length?arguments[1]:void 0),qg(this,e)}));var Yg=En.find,Gg=Ru.aTypedArray;(0,Ru.exportTypedArrayMethod)("find",(function(e){return Yg(Gg(this),e,1<arguments.length?arguments[1]:void 0)}));var Xg=En.findIndex,Kg=Ru.aTypedArray;(0,Ru.exportTypedArrayMethod)("findIndex",(function(e){return Xg(Kg(this),e,1<arguments.length?arguments[1]:void 0)}));var Jg=En.forEach,Qg=Ru.aTypedArray;(0,Ru.exportTypedArrayMethod)("forEach",(function(e){Jg(Qg(this),e,1<arguments.length?arguments[1]:void 0)}));var em=Ft.includes,tm=Ru.aTypedArray;(0,Ru.exportTypedArrayMethod)("includes",(function(e){return em(tm(this),e,1<arguments.length?arguments[1]:void 0)}));var nm=Ft.indexOf,im=Ru.aTypedArray;(0,Ru.exportTypedArrayMethod)("indexOf",(function(e){return nm(im(this),e,1<arguments.length?arguments[1]:void 0)})),it=W,Ft=Ru,We=We,ke=ke("iterator"),it=it.Uint8Array;var om=We.values,lm=We.keys,sm=We.entries,rm=Ft.aTypedArray;We=Ft.exportTypedArrayMethod,it=!!(Ft=it&&it.prototype[ke])&&("values"==Ft.name||null==Ft.name),Ft=function(){return om.call(rm(this))},We("entries",(function(){return sm.call(rm(this))})),We("keys",(function(){return lm.call(rm(this))})),We("values",Ft,!it),We(ke,Ft,!it);var am=Ru.aTypedArray,cm=(it=Ru.exportTypedArrayMethod,[].join);it("join",(function(e){return cm.apply(am(this),arguments)}));var um=Qn,dm=$t,hm=q,pm=na,fm=(q=it=function(e,t){var n=[][e];return!!n&&um((function(){n.call(null,t||function(){throw 1},1)}))},Math.min),gm=[].lastIndexOf,mm=!!gm&&1/[1].lastIndexOf(1,-0)<0,vm=(q=q("lastIndexOf"),mm||!q?function(e){if(mm)return gm.apply(this,arguments)||0;var t=dm(this),n=pm(t.length),i=n-1;for((i=1<arguments.length?fm(i,hm(arguments[1])):i)<0&&(i=n+i);0<=i;i--)if(i in t&&t[i]===e)return i||0;return-1}:gm),ym=Ru.aTypedArray;(0,Ru.exportTypedArrayMethod)("lastIndexOf",(function(e){return vm.apply(ym(this),arguments)}));var bm=En.map,_m=r,wm=Ru.aTypedArray,Cm=Ru.aTypedArrayConstructor;(0,Ru.exportTypedArrayMethod)("map",(function(e){return bm(wm(this),e,1<arguments.length?arguments[1]:void 0,(function(e,t){return new(Cm(_m(e,e.constructor)))(t)}))}));var xm=eu,Em=Ro,Sm=ht,Tm=na,Nm=(q={left:(q=function(e){return function(t,n,i,o){xm(n);var l=Em(t),s=Sm(l),r=Tm(l.length),a=e?r-1:0,c=e?-1:1;if(i<2)for(;;){if(a in s){o=s[a],a+=c;break}if(a+=c,e?a<0:r<=a)throw TypeError("Reduce of empty array with no initial value")}for(;e?0<=a:a<r;a+=c)a in s&&(o=n(o,s[a],a,l));return o}})(!1),right:q(!0)}).left,Lm=Ru.aTypedArray;(0,Ru.exportTypedArrayMethod)("reduce",(function(e){return Nm(Lm(this),e,arguments.length,1<arguments.length?arguments[1]:void 0)}));var km=q.right,Am=Ru.aTypedArray;(0,Ru.exportTypedArrayMethod)("reduceRight",(function(e){return km(Am(this),e,arguments.length,1<arguments.length?arguments[1]:void 0)}));var Bm=Ru.aTypedArray,Mm=(q=Ru.exportTypedArrayMethod,Math.floor);q("reverse",(function(){for(var e,t=this,n=Bm(t).length,i=Mm(n/2),o=0;o<i;)e=t[o],t[o++]=t[--n],t[n]=e;return t}));var Im=na,zm=ni,Om=Ro,Rm=(q=Qn,Ru.aTypedArray);(0,Ru.exportTypedArrayMethod)("set",(function(e){Rm(this);var t=zm(1<arguments.length?arguments[1]:void 0,1),n=this.length,i=Om(e),o=Im(i.length),l=0;if(n<o+t)throw RangeError("Wrong length");for(;l<o;)this[t+l]=i[l++]}),q((function(){new Int8Array(1).set({})})));var Hm=r,Dm=(ni=Qn,Ru.aTypedArray),Fm=Ru.aTypedArrayConstructor,Pm=(Ro=Ru.exportTypedArrayMethod,[].slice);Ro("slice",(function(e,t){for(var n=Pm.call(Dm(this),e,t),i=(t=Hm(this,this.constructor),0),o=n.length,l=new(Fm(t))(o);i<o;)l[i]=n[i++];return l}),ni((function(){new Int8Array(1).slice()})));var Vm=En.some,Um=Ru.aTypedArray;(0,Ru.exportTypedArrayMethod)("some",(function(e){return Vm(Um(this),e,1<arguments.length?arguments[1]:void 0)}));var Wm=Math.floor,Zm=function(e,t){var n=e.length,i=Wm(n/2);return n<8?jm(e,t):qm(Zm(e.slice(0,i),t),Zm(e.slice(i),t),t)},jm=function(e,t){for(var n,i,o=e.length,l=1;l<o;){for(n=e[i=l];i&&0<t(e[i-1],n);)e[i]=e[--i];i!==l++&&(e[i]=n)}return e},qm=function(e,t,n){for(var i=e.length,o=t.length,l=0,s=0,r=[];l<i||s<o;)l<i&&s<o?r.push(n(e[l],t[s])<=0?e[l++]:t[s++]):r.push(l<i?e[l++]:t[s++]);return r},$m=(q=Zm,ni=!!(Ro=Ti.match(/firefox\/(\d+)/i))&&+Ro[1],En=/MSIE|Trident/.test(Ti),Ti=!!(Ro=Ti.match(/AppleWebKit\/(\d+)\./))&&+Ro[1],Ro=Qn,eu),Ym=na,Gm=q,Xm=ni,Km=En,Jm=Ut,Qm=Ti,ev=Ru.aTypedArray,tv=(Ut=Ru.exportTypedArrayMethod,W.Uint16Array),nv=tv&&tv.prototype.sort,iv=(Ti=!!nv&&!Ro((function(){var e=new tv(2);e.sort(null),e.sort({})})),!!nv&&!Ro((function(){if(Jm)return Jm<74;if(Xm)return Xm<67;if(Km)return!0;if(Qm)return Qm<602;for(var e,t=new tv(516),n=Array(516),i=0;i<516;i++)e=i%4,t[i]=515-i,n[i]=i-2*e+3;for(t.sort((function(e,t){return(e/4|0)-(t/4|0)})),i=0;i<516;i++)if(t[i]!==n[i])return!0})));Ut("sort",(function(e){var t=this;if(void 0!==e&&$m(e),iv)return nv.call(t,e);ev(t);for(var n,i=Ym(t.length),o=Array(i),l=0;l<i;l++)o[l]=t[l];for(o=Gm(t,(n=e,function(e,t){return void 0!==n?+n(e,t)||0:t!=t?-1:e!=e?1:0===e&&0===t?0<1/e&&1/t<0?1:-1:t<e})),l=0;l<i;l++)t[l]=o[l];return t}),!iv||Ti);var ov=na,lv=Vi,sv=r,rv=Ru.aTypedArray;(0,Ru.exportTypedArrayMethod)("subarray",(function(e,t){var n=rv(this),i=n.length;return e=lv(e,i),new(sv(n,n.constructor))(n.buffer,n.byteOffset+e*n.BYTES_PER_ELEMENT,ov((void 0===t?i:lv(t,i))-e))})),Vi=Qn;var av=W.Int8Array,cv=Ru.aTypedArray,uv=(r=Ru.exportTypedArrayMethod,[].toLocaleString),dv=[].slice,hv=!!av&&Vi((function(){uv.call(new av(1))}));r("toLocaleString",(function(){return uv.apply(hv?dv.call(cv(this)):cv(this),arguments)}),Vi((function(){return[1,2].toLocaleString()!=new av([1,2]).toLocaleString()}))||!Vi((function(){av.prototype.toLocaleString.call([1,2])}))),r=Ru.exportTypedArrayMethod,Vi=Qn,Ru=(Ru=W.Uint8Array)&&Ru.prototype||{};var pv=[].toString,fv=[].join;Vi((function(){pv.call({})}))&&(pv=function(){return fv.call(this)}),Vi=Ru.toString!=pv,r("toString",pv,Vi),Ru=Vn,r=ba,ba=ti[Vi="ArrayBuffer"],Ru({global:!0,forced:W[Vi]!==ba},{ArrayBuffer:ba}),r(Vi),ti=ee,Ru=Bb;var gv=Ae,mv=d,vv=eb,yv=ge,bv=$i,_v=Qe,wv=(ba=is,r=Ev,_b("isConcatSpreadable")),Cv=9007199254740991,xv="Maximum allowed index exceeded";Vi=51<=r||!Ru((function(){var e=[];return e[wv]=!1,e.concat()[0]!==e})),Qe=ba("concat"),ti({target:"Array",proto:!0,forced:!Vi||!Qe},{concat:function(e){for(var t,n,i,o=vv(this),l=_v(o,0),s=0,r=-1,a=arguments.length;r<a;r++)if(function(e){if(!mv(e))return!1;var t=e[wv];return void 0!==t?!!t:gv(e)}(i=-1===r?o:arguments[r])){if(n=yv(i.length),Cv<s+n)throw TypeError(xv);for(t=0;t<n;t++,s++)t in i&&bv(l,s,i[t])}else{if(Cv<=s)throw TypeError(xv);bv(l,s++,i)}return l.length=s,l}});var Ev={},Sv=Hv,Tv=Fv.concat("length","prototype");Ev.f=Object.getOwnPropertyNames||function(e){return Sv(e,Tv)},r={};var Nv=u,Lv=Ev.f,kv={}.toString,Av="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];function Bv(e,t){var n=my[e]=Gv(uy[sy]);return ry(n,{type:ly,tag:e,description:t}),Dv||(n.description=t),n}function Mv(e,t){Zv(e);var n=qv(t);return t=Xv(n).concat(Sy(n)),iy(t,(function(t){Dv&&!Ey.call(n,t)||xy(e,t,n[t])})),e}r.f=function(e){return Av&&"[object Window]"==kv.call(e)?function(e){try{return Lv(e)}catch(e){return Av.slice()}}(e):Lv(Nv(e))},(Ru={}).f=Object.getOwnPropertySymbols,(ba={}).f=_b;var Iv=Z,zv=x,Ov=ba,Rv=$.f,Hv=(ti=function(e){var t=Iv.Symbol||(Iv.Symbol={});zv(t,e)||Rv(t,e,{value:Ov.f(e)})},Vi=ee,Qe=i,qe),Dv=l,Fv=Pv,Pv=Wt,Vv=(Wt=Bb,x),Uv=Ae,Wv=d,Zv=R,jv=eb,qv=u,$v=h,Yv=p,Gv=Dt,Xv=_t,Kv=(p=Ev,Dt=r,Ru),Jv=(r=o,$=$,s=s,ie=ie,Jv),Qv=(Pe=Pe.exports,nt=nt,pt),ey=Je,ty=_b,ny=(pt=ba,ti),iy=(Je=zn,jt=jt,Pt.forEach),oy=nt("hidden"),ly="Symbol",sy="prototype",ry=(nt=ty("toPrimitive"),jt.set),ay=jt.getterFor(ly),cy=Object[sy],uy=Qe.Symbol,dy=Hv("JSON","stringify"),hy=r.f,py=$.f,fy=Dt.f,gy=s.f,my=Pe("symbols"),vy=Pe("op-symbols"),yy=Pe("string-to-symbol-registry"),by=Pe("symbol-to-string-registry"),_y=(Pe=Pe("wks"),!(Qe=Qe.QObject)||!Qe[sy]||!Qe[sy].findChild),wy=Dv&&Wt((function(){return 7!=Gv(py({},"a",{get:function(){return py(this,"a",{value:7}).a}})).a}))?function(e,t,n){var i=hy(cy,t);i&&delete cy[t],py(e,t,n),i&&e!==cy&&py(cy,t,i)}:py,Cy=Pv?function(e){return"symbol"==typeof e}:function(e){return Object(e)instanceof uy},xy=function(e,t,n){return e===cy&&xy(vy,t,n),Zv(e),t=$v(t,!0),Zv(n),Vv(my,t)?(n.enumerable?(Vv(e,oy)&&e[oy][t]&&(e[oy][t]=!1),n=Gv(n,{enumerable:Yv(0,!1)})):(Vv(e,oy)||py(e,oy,Yv(1,{})),e[oy][t]=!0),wy(e,t,n)):py(e,t,n)},Ey=function(e){var t=$v(e,!0);return e=gy.call(this,t),!(this===cy&&Vv(my,t)&&!Vv(vy,t))&&(!(e||!Vv(this,t)||!Vv(my,t)||Vv(this,oy)&&this[oy][t])||e)},Sy=(Qe=function(e,t){var n=qv(e);if(e=$v(t,!0),n!==cy||!Vv(my,e)||Vv(vy,e))return!(t=hy(n,e))||!Vv(my,e)||Vv(n,oy)&&n[oy][e]||(t.enumerable=!0),t},Pv=function(e){e=fy(qv(e));var t=[];return iy(e,(function(e){Vv(my,e)||Vv(Qv,e)||t.push(e)})),t},function(e){var t=e===cy,n=(e=fy(t?vy:qv(e)),[]);return iy(e,(function(e){!Vv(my,e)||t&&!Vv(cy,e)||n.push(my[e])})),n});Fv||(Jv((uy=function(){if(this instanceof uy)throw TypeError("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,t=ey(e),n=function(e){this===cy&&n.call(vy,e),Vv(this,oy)&&Vv(this[oy],t)&&(this[oy][t]=!1),wy(this,t,Yv(1,e))};return Dv&&_y&&wy(cy,t,{configurable:!0,set:n}),Bv(t,e)})[sy],"toString",(function(){return ay(this).tag})),Jv(uy,"withoutSetter",(function(e){return Bv(ey(e),e)})),s.f=Ey,$.f=xy,r.f=Qe,p.f=Dt.f=Pv,Kv.f=Sy,pt.f=function(e){return Bv(ty(e),e)},Dv&&py(uy[sy],"description",{configurable:!0,get:function(){return ay(this).description}})),Vi({global:!0,wrap:!0,forced:!Fv,sham:!Fv},{Symbol:uy}),iy(Xv(Pe),(function(e){ny(e)})),Vi({target:ly,stat:!0,forced:!Fv},{for:function(e){var t=String(e);return Vv(yy,t)?yy[t]:(e=uy(t),yy[t]=e,by[e]=t,e)},keyFor:function(e){if(!Cy(e))throw TypeError(e+" is not a symbol");if(Vv(by,e))return by[e]},useSetter:function(){_y=!0},useSimple:function(){_y=!1}}),Vi({target:"Object",stat:!0,forced:!Fv,sham:!Dv},{create:function(e,t){return void 0===t?Gv(e):Mv(Gv(e),t)},defineProperty:xy,defineProperties:Mv,getOwnPropertyDescriptor:Qe}),Vi({target:"Object",stat:!0,forced:!Fv},{getOwnPropertyNames:Pv,getOwnPropertySymbols:Sy}),Vi({target:"Object",stat:!0,forced:Wt((function(){Kv.f(1)}))},{getOwnPropertySymbols:function(e){return Kv.f(jv(e))}}),dy&&Vi({target:"JSON",stat:!0,forced:!Fv||Wt((function(){var e=uy();return"[null]"!=dy([e])||"{}"!=dy({a:e})||"{}"!=dy(Object(e))}))},{stringify:function(e,t,n){for(var i,o=[e],l=1;l<arguments.length;)o.push(arguments[l++]);if((Wv(i=t)||void 0!==e)&&!Cy(e))return Uv(t)||(t=function(e,t){if("function"==typeof i&&(t=i.call(this,e,t)),!Cy(t))return t}),o[1]=t,dy.apply(null,o)}}),uy[sy][nt]||ie(uy[sy],nt,uy[sy].valueOf),Je(uy,ly),Qv[oy]=!0,ti("asyncIterator"),ti("hasInstance"),ti("isConcatSpreadable"),ti("iterator"),ti("match"),ti("matchAll"),ti("replace"),ti("search"),ti("species"),ti("split"),ti("toPrimitive"),ti("toStringTag"),ti("unscopables"),zn(i.JSON,"JSON",!0),zn=Z.Symbol,ti("asyncDispose"),ti("dispose"),ti("matcher"),ti("metadata"),ti("observable"),ti("patternMatch"),ti("replaceAll");var Ty=zn,Ny=ba.f("iterator");function Ly(e){return(Ly="function"==typeof Ty&&"symbol"==typeof Ny?function(e){return typeof e}:function(e){return e&&"function"==typeof Ty&&e.constructor===Ty&&e!==Ty.prototype?"symbol":typeof e})(e)}function ky(e){var t,n,i,o,l,s,r,a=Ry(e,!1);if("string"==typeof a&&2<a.length)if(43===(t=(a=Py(a)).charCodeAt(0))||45===t){if(88===(e=a.charCodeAt(2))||120===e)return NaN}else if(48===t){switch(a.charCodeAt(1)){case 66:case 98:n=2,i=49;break;case 79:case 111:n=8,i=55;break;default:return+a}for(l=(o=a.slice(2)).length,s=0;s<l;s++)if((r=o.charCodeAt(s))<48||i<r)return NaN;return parseInt(o,n)}return+a}var Ay=bn,By=(bn="[\t\n\v\f\r                　\u2028\u2029\ufeff]",RegExp("^"+bn+bn+"*")),My=RegExp(bn+bn+"*$"),Iy=(bn={start:(bn=function(e){return function(t){return t=String(Ay(t)),1&e&&(t=t.replace(By,"")),2&e?t.replace(My,""):t}})(1),end:bn(2),trim:bn(3)},mo=mo,W=W,qi=qi,yr=yr.exports,Qs),zy=on,Oy=zu,Ry=Gt,Hy=Qn,Dy=(oo=oo,Kr=Kr.f,Zt.f),Fy=ri.f,Py=bn.trim,Vy="Number",Uy=W[Vy],Wy=Uy.prototype,Zy=zy(oo(Wy))==Vy;if(qi(Vy,!Uy(" 0o1")||!Uy("0b1")||Uy("+0x1"))){for(var jy,qy=function(e){e=arguments.length<1?0:e;var t=this;return t instanceof qy&&(Zy?Hy((function(){Wy.valueOf.call(t)})):zy(t)!=Vy)?Oy(new Uy(ky(e)),t,qy):ky(e)},$y=mo?Kr(Uy):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger,fromString,range".split(","),Yy=0;$y.length>Yy;Yy++)Iy(Uy,jy=$y[Yy])&&!Iy(qy,jy)&&Fy(qy,jy,Dy(Uy,jy));(qy.prototype=Wy).constructor=qy,yr(W,Vy,qy)}Vn=Vn;var Gy=$t,Xy=(it=it,[].join);ht=ht!=Object,it=it("join",","),Vn({target:"Array",proto:!0,forced:ht||!it},{join:function(e){return Xy.call(Gy(this),void 0===e?",":e)}});var Ky=eb,Jy=_t;ee({target:"Object",stat:!0,forced:Bb((function(){Jy(1)}))},{keys:function(e){return Jy(Ky(e))}});var Qy=Z.Object.keys,eb="\t\n\v\f\r                　\u2028\u2029\ufeff",tb=sb,nb=(_t="[\t\n\v\f\r                　\u2028\u2029\ufeff]",RegExp("^"+_t+_t+"*")),ib=RegExp(_t+_t+"*$"),ob=(_t={start:(sb=function(e){return function(t){return t=String(tb(t)),1&e&&(t=t.replace(nb,"")),2&e?t.replace(ib,""):t}})(1),end:sb(2),trim:sb(3)},Bb),lb=eb,sb=ee,rb=_t.trim;sb({target:"String",proto:!0,forced:function(e){return ob((function(){return!!lb[e]()||"​᠎"!="​᠎"[e]()||lb[e].name!==e}))}("trim")},{trim:function(){return rb(this)}});var ab=Lb("String").trim,cb=String.prototype,ub=_t.trim,db=(eb=eb,i.parseInt),hb=/^[+-]?0[Xx]/;eb=8!==db(eb+"08")||22!==db(eb+"0x16")?function(e,t){return e=ub(String(e)),db(e,t>>>0||(hb.test(e)?16:10))}:db,ee({global:!0,forced:parseInt!=eb},{parseInt:eb});var pb=Z.parseInt,fb=(eb=ee,d),gb=Ae,mb=me,vb=ge,yb=u,bb=$i,_b=_b,wb=(is=is("slice"),_b("species")),Cb=[].slice,xb=Math.max;eb({target:"Array",proto:!0,forced:!is},{slice:function(e,t){var n,i,o,l=yb(this),s=vb(l.length),r=mb(e,s),a=mb(void 0===t?s:t,s);if(gb(l)&&((n="function"==typeof(n=l.constructor)&&(n===Array||gb(n.prototype))||fb(n)&&null===(n=n[wb])?void 0:n)===Array||void 0===n))return Cb.call(l,r,a);for(i=new(void 0===n?Array:n)(xb(a-r,0)),o=0;r<a;r++,o++)r in l&&bb(i,o,l[r]);return i.length=o,i}});var Eb=Lb("Array").slice,Sb=Array.prototype,Tb=function(e){var t=e.slice;return e===Sb||e instanceof Array&&t===Sb.slice?Eb:t},Nb=Z.Object.getOwnPropertySymbols,Lb=(eb={exports:{}},is=ee,Bb),kb=u,Ab=o.f,Bb=l;Lb=Lb((function(){Ab(1)})),is({target:"Object",stat:!0,forced:!Bb||Lb,sham:!Bb},{getOwnPropertyDescriptor:function(e,t){return Ab(kb(e),t)}});var Mb=Z.Object;Bb=eb.exports=function(e,t){return Mb.getOwnPropertyDescriptor(e,t)},Mb.getOwnPropertyDescriptor.sham&&(Bb.sham=!0);var Ib=eb.exports,zb=Ev,Ob=Ru,Rb=R,Hb=qe("Reflect","ownKeys")||function(e){var t=zb.f(Rb(e)),n=Ob.f;return n?t.concat(n(e)):t},Db=u,Fb=o,Pb=$i;ee({target:"Object",stat:!0,sham:!l},{getOwnPropertyDescriptors:function(e){for(var t,n,i=Db(e),o=Fb.f,l=Hb(i),s={},r=0;l.length>r;)void 0!==(n=o(i,t=l[r++]))&&Pb(s,t,n);return s}});var Vb=Z.Object.getOwnPropertyDescriptors;$i={exports:{}},ee({target:"Object",stat:!0,forced:!l,sham:!l},{defineProperties:Et});var Ub=Z.Object;Z=$i.exports=function(e,t){return Ub.defineProperties(e,t)},Ub.defineProperties.sham&&(Z.sham=!0);var Wb=$i.exports;function Zb(e,t){var n,i=Qy(e);return Nb&&(n=Nb(e),t&&(n=ds(n).call(n,(function(t){return Ib(e,t).enumerable}))),i.push.apply(i,n)),i}function jb(e){for(var t=1;t<arguments.length;t++){var n,i=null!=arguments[t]?arguments[t]:{};t%2?xs(n=Zb(Object(i),!0)).call(n,(function(t){var n,o;n=e,t=i[o=t],o in n?pe(n,o,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[o]=t})):Vb?Wb(e,Vb(i)):xs(n=Zb(Object(i))).call(n,(function(t){pe(e,t,Ib(i,t))}))}return e}var qb={merge:function(e,t){var n=qb.clone(e),i=qb.clone(t);return xs(qb).call(qb,Qy(i),(function(e){"object"===Ly(i[e])&&"object"===Ly(n[e])?n[e]=qb.merge(n[e],i[e]):n[e]=i[e]})),n},clone:function(e){var t,n;if(e&&e instanceof Array){t=[];for(var i=0;i<e.length;i++)t[i]=qb.clone(e[i]);return t}if(null===e||"object"!==Ly(e)||e instanceof String||e instanceof Number||e instanceof Boolean||e instanceof Date||e instanceof RegExp)return e;if(e.nodeType||e.window===e)return e;for(n in t=new e.constructor,e){var o=e[n];t[n]=qb.clone(o)}return t},forEach:function(e,t,n){for(var i=e.length,o=0;o<i;o++)t.call(n,e[o],o,e)},find:function(e,t,n){for(var i=e.length,o=0;o<i;){if(t.call(n,e[o],o,e))return e[o];o++}},indexOf:function(e,t){if("function"==typeof t){for(var n=0,i=e.length;n<i;n++)if(t(e[n]))return n}else{if(Fe(e))return Fe(e).call(e,t);for(n=0,i=e.length;n<i;n++)if(e[n]===t)return n}return-1},map:function(e,t,n){for(var i=[],o=0;o<e.length;o++)i.push(t.call(n,e[o],o,e));return i},filter:function(e,t,n){var i=[];return xs(qb).call(qb,e,(function(o,l){t.call(n,o,l,e)&&i.push(o)})),i},unique:function(e){return ds(qb).call(qb,e,(function(t,n){return n===Fe(qb).call(qb,e,t)}))},createXMLHttpRequest:function(){var e=(t=navigator.userAgent.toLowerCase()).match(/edge[ \/](\d+.?\d*)/),t=-1<Fe(t).call(t,"trident/");if(!e&&!t||"file:"!==location.protocol)try{return new XMLHttpRequest}catch(t){console.log(t)}try{return new ActiveXObject("Msxml2.XMLHTTP")}catch(t){console.log(t)}try{return new ActiveXObject("Microsoft.XMLHTTP")}catch(t){console.log(t)}return null},checkStatus:function(e){return 4===e.readyState&&(200<=e.status&&e.status<300||304===e.status||0===e.status||1223===e.status)},getResponse:function(e,t){if(!qb.checkStatus(e))return null;switch(t){case"text":return e.responseText;case"arraybuffer":return e.response;default:return null}},load:function(e,t,n){var i=!!t,o=qb.createXMLHttpRequest();return o?(i&&"text"!==n&&"xml"!==n&&(o.responseType=n),o.open("GET",e,i),i&&(o.onreadystatechange=function(){4===o.readyState&&(t(qb.getResponse(o,n)),o=null)}),o.send(null),i?"":qb.getResponse(o,n)):null}},$b={getGroups:function(e,t){for(var n,i=[],o=0;n=$b.getGroup(e,t,{start:o});)o=n.end,i.push(n);return i},removeGroups:function(e,t){for(var n;n=$b.getGroup(e,t);)e=e.substring(0,n.start)+e.substring(n.end);return e},getGroup:function(e,t,n){var i,o,l=0;if(t=new RegExp("\\{\\\\"+t,"g"),n=qb.merge({start:0},n||{}),t.lastIndex=n.start,!(t=t.exec(e)))return null;o=e[i=t.index];do{var s="{"===o&&"\\"!==$b.getPreviousNonWhitespaceChar(e,i)&&"\\"===$b.getNextNonWhitespaceChar(e,i),r="}"===o&&"\\"!==$b.getPreviousNonWhitespaceChar(e,i)&&0<l}while(s?l++:r&&l--,(o=e[++i])&&0<l);return{start:t.index,end:i,content:e.substring(t.index,i)}},extractGroupContent:function(e){var t=$b.getGroupName(e);return e=e.replace(/\}([^{\s]+)/g,"} $1"),(e=function(e){var t=e.trim;return"string"==typeof e||e===cb||e instanceof String&&t===cb.trim?ab:t}(t=(e=$b.removeGroups(e,"(?!"+t+")")).replace(/^\{(\\[\w-]+\s*)+/g,"")).call(t)).replace(/}$/,"")},getGroupName:function(e){return(e=e.match(/^\{\\(\w+)/))?e[1]:null},getNonWhitespaceChar:function(e,t,n){for(var i=t+n,o=e[i],l=/[\s]/;o&&l.test(o);)o=e[i+=n];return o},getPreviousNonWhitespaceChar:function(e,t){return $b.getNonWhitespaceChar(e,t,-1)},getNextNonWhitespaceChar:function(e,t){return $b.getNonWhitespaceChar(e,t,1)}},Yb=($i={convertHexStringToBytes:function(e){for(var t=[],n=e.length/2,i=0;i<n;i++)t.push(pb(e.substr(2*i,2),16));return t},convertBytesToBase64:function(e){for(var t="",n=e.length,i=0;i<n;i+=3){var o,l=Tb(e).call(e,i,i+3),s=l.length,r=[];if(s<3)for(o=s;o<3;o++)l[o]=0;for(r[0]=(252&l[0])>>2,r[1]=(3&l[0])<<4|l[1]>>4,r[2]=(15&l[1])<<2|(192&l[2])>>6,r[3]=63&l[2],o=0;o<4;o++)t+=o<=s?"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(r[o]):"="}return t},getImageTypeFromSignature:function(e){e=e.subarray(0,4);var t=rs(qb).call(qb,e,(function(e){return e.toString(16)})).join("");return(e=Us(qb).call(qb,[{signature:"ffd8ff",type:"image/jpeg"},{signature:"47494638",type:"image/gif"},{signature:"89504e47",type:"image/png"}],(function(e){return 0===Fe(t).call(t,e.signature)})))?e.type:null}},jb(jb(jb({},qb),$b),$i));return function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.config=t||{}}var t,n;return t=e,(n=[{key:"supportedImageTypes",get:function(){return["image/png","image/jpeg","image/gif"]}},{key:"parse",value:function(e,t){e=e.clipboardData||window.clipboardData,this.parser(e,t)}},{key:"checkPaster",value:function(e){var t=this.getClipboardData(e,"text/html");return e=(e=this.getContentGeneratorName(t))?"microsoft"===e:/(class="?Mso|style=["'][^"]*?\bmso\-|w:WordDocument|<o:\w+>|<\/font>)/.test(t),t&&e}},{key:"getClipboardData",value:function(e,t){return e.getData(t)}},{key:"getContentGeneratorName",value:function(e){if((e=/<meta\s+name=["']?generator["']?\s+content=["']?(\w+)/gi.exec(e))&&e.length)return e=e[1].toLowerCase(),0===Fe(e).call(e,"microsoft")?"microsoft":0===Fe(e).call(e,"libreoffice")?"libreoffice":"unknown"}},{key:"parser",value:function(e,t){var n=this.stripHtml(this.getClipboardData(e,"text/html")),i=this.getClipboardData(e,"text/plain"),o=e.files[0],l=(e=this.getClipboardData(e,"text/rtf"),{html:n,text:i});o&&!this.config.ignorePasteSingleFile?this.handleSingleFile(o).then((function(e){l.html=e,t(l)})):this.filterRtfImageToHtml(l.html,e).then((function(e){l.html=e||i,t(l)}))}},{key:"stripHtml",value:function(e){var t=e;return t&&t.length&&(t=t.replace(/^<meta.*?>/i,""),(e=/<body(?:[\s\S]*?)>([\s\S]*)<\/body>/i.exec(t))&&e.length&&(t=(t=e[1]).replace(/\s*<!--StartFragment-->|<!--EndFragment-->\s*/g,""))),t}},{key:"filterRtfImageToHtml",value:function(e,t){var n=this.extractTagsFromHtml(e);return 0===n.length?Wl.resolve(e):t?this.handleRtfImages(e,t,n):this.handleBlobImages(e,n)}},{key:"extractTagsFromHtml",value:function(e){for(var t,n=/<img[^>]+src="([^"]+)[^>]+/g,i=[];t=n.exec(e);)i.push(t[1]);return i}},{key:"handleRtfImages",value:function(e,t,n){var i=this,o=this.extractFromRtf(t);return new Wl((function(t){var l;0===o.length&&t(e),l=i.config.imageHandler?rs(Yb).call(Yb,o,i.imageHandlerWrapper,i):rs(Yb).call(Yb,o,(function(e){return Wl.resolve(i.createSrcWithBase64(e))}),i),Wl.all(l).then((function(i){n.length!==i.length&&(console.error("处理rtf图片异常!处理后的图片数量与处理前不一致",{rtf:o.length,html:n.length}),t(e));for(var l,s=0;s<n.length;s++)0===Fe(l=n[s]).call(l,"file://")&&(i[s]?(l=n[s].replace(/\\/g,"\\\\"),l=new RegExp("(<img [^>]*src=[\"']?)"+l),e=e.replace(l,"$1"+i[s])):console.error("处理后的图片中未找到第"+(s+1)+"张图片",{type:o[s].type,index:s}));t(e)}))}))}},{key:"handleBlobImages",value:function(e,t){var n=Yb.unique(ds(Yb).call(Yb,t,(function(e){return e.match(/^blob:/i)}))),i=rs(Yb).call(Yb,n,function(e){var t=e.bind;return e===vs||e instanceof Function&&t===vs.bind?ms:t}(t=this.convertBlobUrlToBase64).call(t,this));return new Wl((function(t){Wl.all(i).then((function(i){xs(Yb).call(Yb,i,(function(t,i){var o;t?(o=n[i],e=e.replace(new RegExp(o,"g"),t)):console.error("转换blob格式图片为base64格式异常",{type:"blob",index:i})})),t(e)}))}))}},{key:"extractFromRtf",value:function(e){var t=[];e=Yb.removeGroups(e,"(?:(?:header|footer)[lrf]?|nonshppict|shprslt)");var n=Yb.getGroups(e,"pict");if(!n)return t;for(var i=0;i<n.length;i++){var o=n[i].content,l=function(e){var t=e.match(/\\blipuid (\w+)\}/);return e=e.match(/\\bliptag(-?\d+)/),t?t[1]:e?e[1]:null}(o),s=function(e){var t=Us(Yb).call(Yb,[{marker:/\\pngblip/,type:"image/png"},{marker:/\\jpegblip/,type:"image/jpeg"},{marker:/\\emfblip/,type:"image/emf"},{marker:/\\wmetafile\d/,type:"image/wmf"}],(function(t){return t.marker.test(e)}));return t?t.type:"unknown"}(o),r=function(e){return"string"==typeof e?Fe(Yb).call(Yb,t,(function(t){return t.id===e})):-1}(l),a=(d=-1!==r&&t[r].hex)&&t[r].type===s,c=d&&t[r].type!==s&&r===t.length-1,u=-1!==Fe(o).call(o,"\\defshp"),d=-1!==Fe(Yb).call(Yb,this.supportedImageTypes,s);a?t.push(t[r]):c||u||(s={id:l,hex:d?Yb.extractGroupContent(o).replace(/\s/g,""):null,type:s},-1!==r?Hs(t).call(t,r,1,s):t.push(s))}return t}},{key:"createSrcWithBase64",value:function(e){var t=-1!==Fe(Yb).call(Yb,this.supportedImageTypes,e.type),n=e.hex;return t?("string"==typeof n&&(n=Yb.convertHexStringToBytes(e.hex)),e.type?"data:"+e.type+";base64,"+Yb.convertBytesToBase64(n):null):null}},{key:"convertBlobUrlToBase64",value:function(e){var t=this;return new Wl((function(n){Yb.load(e,(function(e){e=new Uint8Array(e),e={type:Yb.getImageTypeFromSignature(e),hex:e},t.config.imageHandler?t.imageHandlerWrapper(e).then(n):(e=t.createSrcWithBase64(e),n(e))}),"arraybuffer")}))}},{key:"createBlobWithImageInfo",value:function(e){var t=-1!==Fe(Yb).call(Yb,this.supportedImageTypes,e.type),n=e.hex;if(!t)return null;"string"==typeof n&&(n=Yb.convertHexStringToBytes(e.hex)),t=new ArrayBuffer(n.length);for(var i=new Uint8Array(t),o=0;o<n.length;o++)i[o]=n[o];return new Blob([i],{type:e.type})}},{key:"imageHandlerWrapper",value:function(e){var t=this;return new Wl((function(n){t.config.imageHandler(t.createBlobWithImageInfo(e),n)}))}},{key:"handleSingleFile",value:function(e){var t=this;return new Wl((function(n){var i,o,l=-1!==Fe(Yb).call(Yb,t.supportedImageTypes,e.type);t.config.imageHandler?(i=new Blob([e],{type:e.type}),t.config.imageHandler(i,(function(e){e=l?'<img src="'.concat(e,'" />'):e,n(e)}))):((o=new FileReader).onloadend=function(){var e=l?'<img src="'.concat(o.result,'" />'):o.result;n(e)},o.onerror=function(e){console.error(e)},o.readAsDataURL(e))}))}}])&&fe(t.prototype,n),e}()}()}).call(this,n("yLpj"))},yLpj:function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,